{"version":3,"file":"ai-search-routes.js","sourceRoot":"","sources":["../../server/routes/ai-search-routes.ts"],"names":[],"mappings":"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","sourcesContent":["import express from 'express';\nimport { perplexityService } from '../services/perplexity-service';\n\nconst router = express.Router();\n\n/**\n * Intelligente Suche für regulatorische Updates\n */\nrouter.post('/search/regulatory', async (req, res) => {\n  try {\n    const { query, domain } = req.body;\n\n    if (!query) {\n      return res.status(400).json({\n        error: 'Query parameter is required'\n      });\n    }\n\n    console.log('[AI-SEARCH] Regulatory search request', { query, domain });\n\n    const result = await perplexityService.searchRegulatoryUpdates(query, domain);\n\n    res.json({\n      success: true,\n      query,\n      result: {\n        content: result.content,\n        citations: result.citations,\n        relatedQuestions: result.relatedQuestions || []\n      },\n      timestamp: new Date().toISOString()\n    });\n\n  } catch (error) {\n    console.error('[AI-SEARCH] Regulatory search error', { error: error.message });\n    res.status(500).json({\n      error: 'Search failed',\n      message: error.message\n    });\n  }\n});\n\n/**\n * KI-basierte Analyse von Rechtsfällen\n */\nrouter.post('/analyze/legal-case', async (req, res) => {\n  try {\n    const { caseData } = req.body;\n\n    if (!caseData || !caseData.title) {\n      return res.status(400).json({\n        error: 'Case data with title is required'\n      });\n    }\n\n    console.log('[AI-SEARCH] Legal case analysis request', { caseId: caseData.id });\n\n    const analysis = await perplexityService.analyzeLegalCase(caseData);\n\n    res.json({\n      success: true,\n      caseId: caseData.id,\n      analysis: {\n        summary: analysis.summary,\n        riskAssessment: analysis.riskAssessment,\n        precedentAnalysis: analysis.precedentAnalysis,\n        recommendations: analysis.recommendations,\n        citations: analysis.citations\n      },\n      timestamp: new Date().toISOString()\n    });\n\n  } catch (error) {\n    console.error('[AI-SEARCH] Legal case analysis error', { error: error.message });\n    res.status(500).json({\n      error: 'Legal case analysis failed',\n      message: error.message\n    });\n  }\n});\n\n/**\n * Content-Qualitätsbewertung mit KI\n */\nrouter.post('/evaluate/content', async (req, res) => {\n  try {\n    const { content } = req.body;\n\n    if (!content || !content.title) {\n      return res.status(400).json({\n        error: 'Content with title is required'\n      });\n    }\n\n    logger.info('[AI-SEARCH] Content evaluation request', { contentId: content.id });\n\n    const evaluation = await perplexityService.evaluateContent(content);\n\n    res.json({\n      success: true,\n      contentId: content.id,\n      evaluation: {\n        scores: {\n          quality: evaluation.qualityScore,\n          relevance: evaluation.relevanceScore,\n          compliance: evaluation.complianceScore,\n          overall: Math.round((evaluation.qualityScore + evaluation.relevanceScore + evaluation.complianceScore) / 3)\n        },\n        recommendations: evaluation.recommendations,\n        suggestedTags: evaluation.suggestedTags\n      },\n      timestamp: new Date().toISOString()\n    });\n\n  } catch (error) {\n    logger.error('[AI-SEARCH] Content evaluation error', { error: error.message });\n    res.status(500).json({\n      error: 'Content evaluation failed',\n      message: error.message\n    });\n  }\n});\n\n/**\n * Trend-Analyse für Dashboard\n */\nrouter.get('/trends/:timeframe?', async (req, res) => {\n  try {\n    const timeframe = req.params.timeframe || 'month';\n\n    if (!['week', 'month', 'quarter'].includes(timeframe)) {\n      return res.status(400).json({\n        error: 'Invalid timeframe. Use: week, month, or quarter'\n      });\n    }\n\n    logger.info('[AI-SEARCH] Trend analysis request', { timeframe });\n\n    const trends = await perplexityService.analyzeTrends(timeframe);\n\n    res.json({\n      success: true,\n      timeframe,\n      trends: {\n        emergingTopics: trends.emergingTopics,\n        riskAlerts: trends.riskAlerts,\n        complianceUpdates: trends.complianceUpdates,\n        marketInsights: trends.marketInsights\n      },\n      timestamp: new Date().toISOString()\n    });\n\n  } catch (error) {\n    logger.error('[AI-SEARCH] Trend analysis error', { error: error.message });\n    res.status(500).json({\n      error: 'Trend analysis failed',\n      message: error.message\n    });\n  }\n});\n\n/**\n * Bulk Content-Analyse für Admin-Dashboard\n */\nrouter.post('/bulk/analyze', async (req, res) => {\n  try {\n    const { contentItems, analysisType } = req.body;\n\n    if (!contentItems || !Array.isArray(contentItems)) {\n      return res.status(400).json({\n        error: 'Content items array is required'\n      });\n    }\n\n    logger.info('[AI-SEARCH] Bulk analysis request', { \n      itemCount: contentItems.length, \n      analysisType \n    });\n\n    const results = [];\n\n    // Process items in batches to avoid rate limits\n    for (const item of contentItems.slice(0, 5)) { // Limit for demo\n      try {\n        if (analysisType === 'legal') {\n          const analysis = await perplexityService.analyzeLegalCase(item);\n          results.push({\n            id: item.id,\n            success: true,\n            analysis\n          });\n        } else {\n          const evaluation = await perplexityService.evaluateContent(item);\n          results.push({\n            id: item.id,\n            success: true,\n            evaluation\n          });\n        }\n        \n        // Small delay to respect rate limits\n        await new Promise(resolve => setTimeout(resolve, 1000));\n        \n      } catch (error) {\n        results.push({\n          id: item.id,\n          success: false,\n          error: error.message\n        });\n      }\n    }\n\n    res.json({\n      success: true,\n      processed: results.length,\n      total: contentItems.length,\n      results,\n      timestamp: new Date().toISOString()\n    });\n\n  } catch (error) {\n    logger.error('[AI-SEARCH] Bulk analysis error', { error: error.message });\n    res.status(500).json({\n      error: 'Bulk analysis failed',\n      message: error.message\n    });\n  }\n});\n\n/**\n * Smart Content-Erstellung basierend auf Trends\n */\nrouter.post('/generate/content-suggestions', async (req, res) => {\n  try {\n    const { category, keywords, targetAudience } = req.body;\n\n    logger.info('[AI-SEARCH] Content suggestion request', { category, keywords });\n\n    // Use trend analysis to generate content suggestions\n    const trends = await perplexityService.analyzeTrends('month');\n    \n    // Combine trends with user requirements for suggestions\n    const suggestions = {\n      topicSuggestions: trends.emergingTopics.slice(0, 3),\n      keywordRecommendations: [\n        ...trends.complianceUpdates.slice(0, 2),\n        ...(keywords || [])\n      ],\n      contentTypes: [\n        'Regulatory Update Analysis',\n        'Compliance Guide',\n        'Market Trend Report',\n        'Risk Assessment'\n      ],\n      urgencyFlags: trends.riskAlerts.slice(0, 2)\n    };\n\n    res.json({\n      success: true,\n      category,\n      targetAudience,\n      suggestions,\n      basedOnTrends: true,\n      timestamp: new Date().toISOString()\n    });\n\n  } catch (error) {\n    logger.error('[AI-SEARCH] Content suggestions error', { error: error.message });\n    res.status(500).json({\n      error: 'Content suggestions failed',\n      message: error.message\n    });\n  }\n});\n\nexport default router;"]}