{"version":3,"file":"documents.js","sourceRoot":"","sources":["../../server/routes/documents.ts"],"names":[],"mappings":"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","sourcesContent":["import { Router } from 'express';\nimport { historicalDataService } from '../services/historicalDataService';\n\nconst router = Router();\n\n// Einzelnes Dokument abrufen\nrouter.get('/documents/:documentId', async (req, res) => {\n  try {\n    const { documentId } = req.params;\n    \n    // Suche Dokument in allen historischen Daten\n    const allSources = ['fda_guidance', 'ema_guidelines', 'bfarm_guidance', 'mhra_guidance', 'swissmedic_guidance'];\n    \n    for (const sourceId of allSources) {\n      const documents = await historicalDataService.getHistoricalData(sourceId);\n      const document = documents.find(doc => doc.id === documentId || doc.documentId === documentId);\n      \n      if (document) {\n        return res.json(document);\n      }\n    }\n    \n    res.status(404).json({ message: 'Dokument nicht gefunden' });\n  } catch (error) {\n    console.error('Fehler beim Abrufen des Dokuments:', error);\n    res.status(500).json({ message: 'Serverfehler beim Abrufen des Dokuments' });\n  }\n});\n\n// Dokument-Inhalt als Text herunterladen\nrouter.get('/documents/:documentId/download', async (req, res) => {\n  try {\n    const { documentId } = req.params;\n    \n    // Suche Dokument in allen historischen Daten\n    const allSources = ['fda_guidance', 'ema_guidelines', 'bfarm_guidance', 'mhra_guidance', 'swissmedic_guidance'];\n    \n    for (const sourceId of allSources) {\n      const documents = await historicalDataService.getHistoricalData(sourceId);\n      const document = documents.find(doc => doc.id === documentId || doc.documentId === documentId);\n      \n      if (document) {\n        const filename = `${document.documentTitle.replace(/[^a-z0-9]/gi, '_')}.txt`;\n        \n        res.setHeader('Content-Type', 'application/json');\n        res.setHeader('Content-Disposition', `attachment; filename=\"${filename}\"`);\n        \n        return res.json({\n          success: true,\n          content: document.content,\n          contentType: 'application/json',\n          filename: filename\n        });\n      }\n    }\n    \n    res.status(404).json({ message: 'Dokument nicht gefunden' });\n  } catch (error) {\n    console.error('Fehler beim Herunterladen des Dokuments:', error);\n    res.status(500).json({ message: 'Serverfehler beim Herunterladen des Dokuments' });\n  }\n});\n\n// Dokument in originalem Format öffnen (Weiterleitung zur ursprünglichen URL)\nrouter.get('/documents/:documentId/original', async (req, res) => {\n  try {\n    const { documentId } = req.params;\n    \n    // Suche Dokument in allen historischen Daten\n    const allSources = ['fda_guidance', 'ema_guidelines', 'bfarm_guidance', 'mhra_guidance', 'swissmedic_guidance'];\n    \n    for (const sourceId of allSources) {\n      const documents = await historicalDataService.getHistoricalData(sourceId);\n      const document = documents.find(doc => doc.id === documentId || doc.documentId === documentId);\n      \n      if (document && document.documentUrl) {\n        return res.redirect(document.documentUrl);\n      }\n    }\n    \n    res.status(404).json({ message: 'Originaldokument nicht verfügbar' });\n  } catch (error) {\n    console.error('Fehler beim Öffnen des Originaldokuments:', error);\n    res.status(500).json({ message: 'Serverfehler beim Öffnen des Originaldokuments' });\n  }\n});\n\nexport default router;"]}