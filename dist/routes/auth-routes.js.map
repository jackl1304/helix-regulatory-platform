{"version":3,"file":"auth-routes.js","sourceRoot":"","sources":["../../server/routes/auth-routes.ts"],"names":[],"mappings":"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","sourcesContent":["import express from 'express';\n// Simple password validation for demo (replace with bcrypt in production)\nimport { neon } from \"@neondatabase/serverless\";\nimport { TenantRequest } from '../middleware/tenant-isolation';\n\nconst router = express.Router();\nconst sql = neon(process.env.DATABASE_URL!);\n\n/**\n * Tenant Login\n * Authenticates users within their tenant context\n */\nrouter.post('/login', async (req: TenantRequest, res) => {\n  try {\n    const { email, password } = req.body;\n    const tenantSubdomain = req.headers['x-tenant-subdomain'] as string;\n\n    if (!email || !password) {\n      return res.status(400).json({ \n        error: 'Email und Passwort sind erforderlich' \n      });\n    }\n\n    // Use demo tenant for testing (simplified)\n    const tenant = {\n      id: '2d224347-b96e-4b61-acac-dbd414a0e048',\n      name: 'Demo Medical Corp',\n      subdomain: 'demo-medical',\n      subscription_tier: 'professional'\n    };\n\n    // Find user (simplified for demo)\n    const userResult = await sql`\n      SELECT id, email, name, role, created_at\n      FROM users \n      WHERE email = ${email}\n    `;\n\n    const user = userResult[0];\n    if (!user) {\n      return res.status(401).json({ \n        error: 'Ungültige Anmeldedaten' \n      });\n    }\n\n    // Verify password (demo implementation)\n    const validPassword = password === 'demo123';\n\n    if (!validPassword) {\n      return res.status(401).json({ \n        error: 'Ungültige Anmeldedaten' \n      });\n    }\n\n    // Update last login (skip for demo)\n    try {\n      await sql`\n        UPDATE users \n        SET updated_at = NOW() \n        WHERE id = ${user.id}\n      `;\n    } catch (error) {\n      console.log('[AUTH] Update user login time skipped:', error.message);\n    }\n\n    // Create session\n    const sessionUser = {\n      id: user.id,\n      tenantId: tenant.id,\n      email: user.email,\n      name: user.name,\n      role: user.role\n    };\n\n    // Store in session\n    if (req.session) {\n      req.session.user = sessionUser;\n    }\n\n    res.json({\n      success: true,\n      user: {\n        id: user.id,\n        email: user.email,\n        name: user.name,\n        role: user.role\n      },\n      tenant: {\n        id: tenant.id,\n        name: tenant.name,\n        subdomain: tenant.subdomain,\n        colorScheme: 'blue',\n        subscriptionTier: tenant.subscription_tier\n      }\n    });\n\n  } catch (error) {\n    console.error('[AUTH] Login error:', error);\n    res.status(500).json({ \n      error: 'Anmeldung fehlgeschlagen',\n      message: 'Bitte versuchen Sie es erneut oder kontaktieren Sie den Support'\n    });\n  }\n});\n\n/**\n * Tenant Logout\n */\nrouter.post('/logout', async (req: TenantRequest, res) => {\n  try {\n    if (req.session) {\n      req.session.destroy((err) => {\n        if (err) {\n          console.error('[AUTH] Logout error:', err);\n          return res.status(500).json({ error: 'Abmeldung fehlgeschlagen' });\n        }\n        res.json({ success: true, message: 'Erfolgreich abgemeldet' });\n      });\n    } else {\n      res.json({ success: true, message: 'Bereits abgemeldet' });\n    }\n  } catch (error) {\n    console.error('[AUTH] Logout error:', error);\n    res.status(500).json({ error: 'Abmeldung fehlgeschlagen' });\n  }\n});\n\n/**\n * Current User Profile\n */\nrouter.get('/profile', async (req: TenantRequest, res) => {\n  try {\n    if (!req.user || !req.tenant) {\n      return res.status(401).json({ error: 'Nicht angemeldet' });\n    }\n\n    res.json({\n      user: {\n        id: req.user.id,\n        email: req.user.email,\n        name: req.user.name,\n        role: req.user.role\n      },\n      tenant: {\n        id: req.tenant.id,\n        name: req.tenant.name,\n        subdomain: req.tenant.subdomain,\n        colorScheme: req.tenant.colorScheme,\n        subscriptionTier: req.tenant.subscriptionTier\n      }\n    });\n  } catch (error) {\n    console.error('[AUTH] Profile error:', error);\n    res.status(500).json({ error: 'Profil konnte nicht geladen werden' });\n  }\n});\n\nexport default router;"]}