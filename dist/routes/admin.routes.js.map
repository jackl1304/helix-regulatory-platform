{"version":3,"file":"admin.routes.js","sourceRoot":"","sources":["../../server/routes/admin.routes.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAqB,MAAM,SAAS,CAAC;AACpD,OAAO,EAAE,MAAM,EAAE,MAAM,4BAA4B,CAAC;AACpD,OAAO,EAAE,YAAY,EAAE,MAAM,gCAAgC,CAAC;AAC9D,OAAO,EAAE,YAAY,EAAE,cAAc,EAAE,MAAM,qCAAqC,CAAC;AACnF,OAAO,EAAE,CAAC,EAAE,MAAM,KAAK,CAAC;AAIxB,MAAM,MAAM,GAAG,MAAM,EAAE,CAAC;AAGxB,MAAM,iBAAiB,GAAG,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC;AAC/C,MAAM,cAAc,GAAG,CAAC,CAAC,MAAM,CAAC;IAC9B,QAAQ,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC;CAC5B,CAAC,CAAC;AAGH,MAAM,gBAAgB,GAA2C,EAAE,CAAC;AAGpE,MAAM,CAAC,GAAG,CAAC,eAAe,EAAE,YAAY,CAAC,KAAK,EAAE,GAAY,EAAE,GAAa,EAAE,EAAE;IAC7E,MAAM,CAAC,IAAI,CAAC,0CAA0C,CAAC,CAAC;IAGxD,MAAM,WAAW,GAAG;QAClB;YACE,EAAE,EAAE,UAAU;YACd,IAAI,EAAE,qBAAqB;YAC3B,MAAM,EAAE,UAAU;YAClB,cAAc,EAAE,CAAC,CAAC,gBAAgB,CAAC,UAAU,CAAC;SAC/C;QACD;YACE,EAAE,EAAE,UAAU;YACd,IAAI,EAAE,mBAAmB;YACzB,MAAM,EAAE,QAAQ;YAChB,cAAc,EAAE,CAAC,CAAC,gBAAgB,CAAC,UAAU,CAAC;SAC/C;KAEF,CAAC;IAEF,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;AACxB,CAAC,CAAC,CAAC,CAAC;AAGJ,MAAM,CAAC,IAAI,CAAC,qCAAqC,EAC/C,cAAc,CAAC,cAAc,CAAC,EAC9B,YAAY,CAAC,iBAAiB,CAAC,EAC/B,YAAY,CAAC,KAAK,EAAE,GAAY,EAAE,GAAa,EAAE,EAAE;IACjD,MAAM,EAAE,QAAQ,EAAE,GAAG,GAAG,CAAC,MAAM,CAAC;IAChC,MAAM,WAAW,GAAG,GAAG,CAAC,IAAI,CAAC;IAE7B,IAAI,CAAC,QAAQ,EAAE,CAAC;QACd,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;YAC1B,OAAO,EAAE,KAAK;YACd,KAAK,EAAE,kCAAkC;YACzC,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;SACpC,CAAC,CAAC;IACL,CAAC;IAED,MAAM,CAAC,IAAI,CAAC,yCAAyC,EAAE,EAAE,QAAQ,EAAE,CAAC,CAAC;IAGrE,gBAAgB,CAAC,QAAQ,CAAC,GAAG,WAAW,CAAC;IAEzC,MAAM,CAAC,IAAI,CAAC,qCAAqC,EAAE,EAAE,QAAQ,EAAE,CAAC,CAAC;IAEjE,OAAO,GAAG,CAAC,IAAI,CAAC;QACd,OAAO,EAAE,IAAI;QACb,OAAO,EAAE,sCAAsC;QAC/C,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;KACpC,CAAC,CAAC;AACL,CAAC,CAAC,CACH,CAAC;AAGF,MAAM,CAAC,IAAI,CAAC,8BAA8B,EACxC,cAAc,CAAC,cAAc,CAAC,EAC9B,YAAY,CAAC,KAAK,EAAE,GAAY,EAAE,GAAa,EAAE,EAAE;IACjD,MAAM,EAAE,QAAQ,EAAE,GAAG,GAAG,CAAC,MAAM,CAAC;IAEhC,IAAI,CAAC,QAAQ,EAAE,CAAC;QACd,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;YAC1B,OAAO,EAAE,KAAK;YACd,KAAK,EAAE,kCAAkC;YACzC,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;SACpC,CAAC,CAAC;IACL,CAAC;IAED,MAAM,CAAC,IAAI,CAAC,yCAAyC,EAAE,EAAE,QAAQ,EAAE,CAAC,CAAC;IAErE,MAAM,WAAW,GAAG,gBAAgB,CAAC,QAAQ,CAAC,CAAC;IAC/C,IAAI,CAAC,WAAW,EAAE,CAAC;QACjB,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;YAC1B,OAAO,EAAE,KAAK;YACd,KAAK,EAAE,mDAAmD;YAC1D,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;SACpC,CAAC,CAAC;IACL,CAAC;IAID,MAAM,SAAS,GAAG,IAAI,CAAC,MAAM,EAAE,GAAG,GAAG,CAAC;IAEtC,IAAI,SAAS,EAAE,CAAC;QACd,MAAM,CAAC,IAAI,CAAC,iCAAiC,EAAE,EAAE,QAAQ,EAAE,CAAC,CAAC;QAC7D,OAAO,GAAG,CAAC,IAAI,CAAC;YACd,OAAO,EAAE,IAAI;YACb,OAAO,EAAE,iCAAiC;YAC1C,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;SACpC,CAAC,CAAC;IACL,CAAC;SAAM,CAAC;QACN,MAAM,CAAC,IAAI,CAAC,6BAA6B,EAAE,EAAE,QAAQ,EAAE,CAAC,CAAC;QACzD,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;YAC1B,OAAO,EAAE,KAAK;YACd,KAAK,EAAE,kEAAkE;YACzE,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;SACpC,CAAC,CAAC;IACL,CAAC;AACH,CAAC,CAAC,CACH,CAAC;AAGF,MAAM,CAAC,GAAG,CAAC,qCAAqC,EAC9C,cAAc,CAAC,cAAc,CAAC,EAC9B,YAAY,CAAC,KAAK,EAAE,GAAY,EAAE,GAAa,EAAE,EAAE;IACjD,MAAM,EAAE,QAAQ,EAAE,GAAG,GAAG,CAAC,MAAM,CAAC;IAEhC,IAAI,CAAC,QAAQ,EAAE,CAAC;QACd,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;YAC1B,OAAO,EAAE,KAAK;YACd,KAAK,EAAE,kCAAkC;YACzC,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;SACpC,CAAC,CAAC;IACL,CAAC;IAED,MAAM,CAAC,IAAI,CAAC,kDAAkD,EAAE,EAAE,QAAQ,EAAE,CAAC,CAAC;IAE9E,MAAM,WAAW,GAAG,gBAAgB,CAAC,QAAQ,CAAC,CAAC;IAC/C,IAAI,CAAC,WAAW,EAAE,CAAC;QACjB,OAAO,GAAG,CAAC,IAAI,CAAC;YACd,OAAO,EAAE,IAAI;YACb,IAAI,EAAE,EAAE;YACR,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;SACpC,CAAC,CAAC;IACL,CAAC;IAGD,MAAM,iBAAiB,GAA2B,EAAE,CAAC;IACrD,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;QACrC,MAAM,KAAK,GAAG,WAAW,CAAC,GAAG,CAAC,CAAC;QAC/B,IAAI,KAAK,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE,CAAC;YACvC,IAAI,GAAG,CAAC,WAAW,EAAE,CAAC,QAAQ,CAAC,UAAU,CAAC,IAAI,GAAG,CAAC,WAAW,EAAE,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,GAAG,CAAC,WAAW,EAAE,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE,CAAC;gBACxH,iBAAiB,CAAC,GAAG,CAAC,GAAG,MAAM,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;YACpD,CAAC;iBAAM,CAAC;gBACN,iBAAiB,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;YACjC,CAAC;QACH,CAAC;IACH,CAAC,CAAC,CAAC;IAEH,OAAO,GAAG,CAAC,IAAI,CAAC;QACd,OAAO,EAAE,IAAI;QACb,IAAI,EAAE,iBAAiB;QACvB,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;KACpC,CAAC,CAAC;AACL,CAAC,CAAC,CACH,CAAC;AAKF,MAAM,kBAAkB,GAAG,CAAC,CAAC,MAAM,CAAC;IAClC,IAAI,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,6BAA6B,CAAC;IACtD,IAAI,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,uBAAuB,CAAC;IAChD,gBAAgB,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,SAAS,EAAE,cAAc,EAAE,YAAY,CAAC,CAAC;IACnE,kBAAkB,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,OAAO,EAAE,QAAQ,EAAE,WAAW,EAAE,WAAW,CAAC,CAAC;IACzE,YAAY,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,KAAK,CAAC,qCAAqC,CAAC;IACrE,WAAW,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,8BAA8B,CAAC;IAC9D,YAAY,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,KAAK,CAAC,qCAAqC,CAAC;IACrE,QAAQ,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC;IAC3B,cAAc,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC;IACjC,gBAAgB,EAAE,CAAC,CAAC,OAAO,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC;CAC5C,CAAC,CAAC;AAGH,MAAM,CAAC,IAAI,CAAC,UAAU,EAAE,KAAK,EAAE,GAAY,EAAE,GAAa,EAAE,EAAE;IAC5D,IAAI,CAAC;QACH,OAAO,CAAC,GAAG,CAAC,8BAA8B,EAAE,GAAG,CAAC,IAAI,CAAC,CAAC;QAGtD,MAAM,aAAa,GAAG,kBAAkB,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QAGzD,MAAM,EAAE,aAAa,EAAE,GAAG,MAAM,MAAM,CAAC,2BAA2B,CAAC,CAAC;QAGpE,MAAM,SAAS,GAAG,MAAM,aAAa,CAAC,YAAY,CAAC;YACjD,IAAI,EAAE,aAAa,CAAC,IAAI;YACxB,IAAI,EAAE,aAAa,CAAC,IAAI;YACxB,gBAAgB,EAAE,aAAa,CAAC,gBAAgB;YAChD,kBAAkB,EAAE,aAAa,CAAC,kBAAkB;YACpD,YAAY,EAAE,aAAa,CAAC,YAAY;YACxC,QAAQ,EAAE,aAAa,CAAC,QAAQ;YAChC,cAAc,EAAE,aAAa,CAAC,cAAc;YAC5C,gBAAgB,EAAE,aAAa,CAAC,gBAAgB;YAChD,WAAW,EAAE,aAAa,CAAC,WAAW;YACtC,YAAY,EAAE,aAAa,CAAC,YAAY;SACzC,CAAC,CAAC;QAEH,OAAO,CAAC,GAAG,CAAC,sCAAsC,EAAE,SAAS,CAAC,EAAE,CAAC,CAAC;QAElE,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;YAC1B,OAAO,EAAE,IAAI;YACb,IAAI,EAAE,SAAS;YACf,OAAO,EAAE,6BAA6B;SACvC,CAAC,CAAC;IAEL,CAAC;IAAC,OAAO,KAAU,EAAE,CAAC;QACpB,OAAO,CAAC,KAAK,CAAC,gCAAgC,EAAE,KAAK,CAAC,CAAC;QAEvD,IAAI,KAAK,CAAC,OAAO,KAAK,qBAAqB,EAAE,CAAC;YAC5C,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBAC1B,OAAO,EAAE,KAAK;gBACd,KAAK,EAAE,wDAAwD;gBAC/D,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;aACpC,CAAC,CAAC;QACL,CAAC;QAED,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;YAC1B,OAAO,EAAE,KAAK;YACd,KAAK,EAAE,KAAK,CAAC,OAAO,IAAI,mCAAmC;YAC3D,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;SACpC,CAAC,CAAC;IACL,CAAC;AACH,CAAC,CAAC,CAAC;AAGH,MAAM,CAAC,GAAG,CAAC,UAAU,EAAE,KAAK,EAAE,GAAY,EAAE,GAAa,EAAE,EAAE;IAC3D,IAAI,CAAC;QAEH,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,MAAM,CAAC,0BAA0B,CAAC,CAAC;QAC1D,MAAM,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,YAAa,CAAC,CAAC;QAE5C,MAAM,MAAM,GAAG,MAAM,GAAG,CAAA;;;;;;;;;;;;;;;;;;KAkBvB,CAAC;QAEF,OAAO,CAAC,GAAG,CAAC,uCAAuC,EAAE,MAAM,CAAC,MAAM,CAAC,CAAC;QAEpE,OAAO,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IAC1B,CAAC;IAAC,OAAO,KAAU,EAAE,CAAC;QACpB,OAAO,CAAC,KAAK,CAAC,iCAAiC,EAAE,KAAK,CAAC,CAAC;QACxD,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;YAC1B,OAAO,EAAE,KAAK;YACd,KAAK,EAAE,KAAK,CAAC,OAAO,IAAI,+BAA+B;SACxD,CAAC,CAAC;IACL,CAAC;AACH,CAAC,CAAC,CAAC;AAGH,MAAM,CAAC,GAAG,CAAC,cAAc,EAAE,KAAK,EAAE,GAAY,EAAE,GAAa,EAAE,EAAE;IAC/D,IAAI,CAAC;QACH,MAAM,EAAE,EAAE,EAAE,GAAG,GAAG,CAAC,MAAM,CAAC;QAC1B,MAAM,UAAU,GAAG,GAAG,CAAC,IAAI,CAAC;QAE5B,OAAO,CAAC,GAAG,CAAC,0BAA0B,EAAE,EAAE,EAAE,UAAU,CAAC,CAAC;QAGxD,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,MAAM,CAAC,0BAA0B,CAAC,CAAC;QAC1D,MAAM,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,YAAa,CAAC,CAAC;QAG5C,MAAM,OAAO,GAAa,EAAE,CAAC;QAC7B,MAAM,MAAM,GAAU,EAAE,CAAC;QACzB,IAAI,UAAU,GAAG,CAAC,CAAC;QAEnB,IAAI,UAAU,CAAC,IAAI,EAAE,CAAC;YACpB,OAAO,CAAC,IAAI,CAAC,WAAW,UAAU,EAAE,EAAE,CAAC,CAAC;YACxC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;QAC/B,CAAC;QACD,IAAI,UAAU,CAAC,gBAAgB,EAAE,CAAC;YAChC,OAAO,CAAC,IAAI,CAAC,wBAAwB,UAAU,EAAE,EAAE,CAAC,CAAC;YACrD,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,gBAAgB,CAAC,CAAC;QAC3C,CAAC;QACD,IAAI,UAAU,CAAC,kBAAkB,EAAE,CAAC;YAClC,OAAO,CAAC,IAAI,CAAC,0BAA0B,UAAU,EAAE,EAAE,CAAC,CAAC;YACvD,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,kBAAkB,CAAC,CAAC;QAC7C,CAAC;QACD,IAAI,UAAU,CAAC,YAAY,EAAE,CAAC;YAC5B,OAAO,CAAC,IAAI,CAAC,oBAAoB,UAAU,EAAE,EAAE,CAAC,CAAC;YACjD,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC;QACvC,CAAC;QACD,IAAI,UAAU,CAAC,QAAQ,KAAK,SAAS,EAAE,CAAC;YACtC,OAAO,CAAC,IAAI,CAAC,gBAAgB,UAAU,EAAE,EAAE,CAAC,CAAC;YAC7C,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;QACnC,CAAC;QACD,IAAI,UAAU,CAAC,cAAc,KAAK,SAAS,EAAE,CAAC;YAC5C,OAAO,CAAC,IAAI,CAAC,uBAAuB,UAAU,EAAE,EAAE,CAAC,CAAC;YACpD,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,CAAC;QACzC,CAAC;QACD,IAAI,UAAU,CAAC,gBAAgB,KAAK,SAAS,EAAE,CAAC;YAC9C,OAAO,CAAC,IAAI,CAAC,yBAAyB,UAAU,EAAE,EAAE,CAAC,CAAC;YACtD,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,gBAAgB,CAAC,CAAC;QAC3C,CAAC;QACD,IAAI,UAAU,CAAC,qBAAqB,KAAK,SAAS,EAAE,CAAC;YACnD,OAAO,CAAC,IAAI,CAAC,8BAA8B,UAAU,EAAE,EAAE,CAAC,CAAC;YAC3D,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,qBAAqB,CAAC,CAAC;QAChD,CAAC;QAED,IAAI,OAAO,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;YACzB,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBAC1B,OAAO,EAAE,KAAK;gBACd,KAAK,EAAE,+BAA+B;aACvC,CAAC,CAAC;QACL,CAAC;QAED,OAAO,CAAC,IAAI,CAAC,iBAAiB,UAAU,EAAE,EAAE,CAAC,CAAC;QAC9C,MAAM,CAAC,IAAI,CAAC,IAAI,IAAI,EAAE,CAAC,CAAC;QACxB,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QAGhB,MAAM,WAAW,GAAG;;YAEZ,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC;oBACV,UAAU;;KAEzB,CAAC;QAEF,MAAM,MAAM,GAAG,MAAM,GAAG,CAAC,WAAW,EAAE,MAAM,CAAC,CAAC;QAE9C,IAAI,MAAM,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;YACxB,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBAC1B,OAAO,EAAE,KAAK;gBACd,KAAK,EAAE,uBAAuB;aAC/B,CAAC,CAAC;QACL,CAAC;QAED,OAAO,CAAC,GAAG,CAAC,sCAAsC,EAAE,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;QAEnE,OAAO,GAAG,CAAC,IAAI,CAAC;YACd,OAAO,EAAE,IAAI;YACb,IAAI,EAAE,MAAM,CAAC,CAAC,CAAC;YACf,OAAO,EAAE,iCAAiC;SAC3C,CAAC,CAAC;IAEL,CAAC;IAAC,OAAO,KAAU,EAAE,CAAC;QACpB,OAAO,CAAC,KAAK,CAAC,gCAAgC,EAAE,KAAK,CAAC,CAAC;QACvD,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;YAC1B,OAAO,EAAE,KAAK;YACd,KAAK,EAAE,KAAK,CAAC,OAAO,IAAI,uCAAuC;SAChE,CAAC,CAAC;IACL,CAAC;AACH,CAAC,CAAC,CAAC;AAGH,MAAM,CAAC,MAAM,CAAC,cAAc,EAAE,KAAK,EAAE,GAAY,EAAE,GAAa,EAAE,EAAE;IAClE,IAAI,CAAC;QACH,MAAM,EAAE,EAAE,EAAE,GAAG,GAAG,CAAC,MAAM,CAAC;QAE1B,OAAO,CAAC,GAAG,CAAC,0BAA0B,EAAE,EAAE,CAAC,CAAC;QAG5C,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,MAAM,CAAC,0BAA0B,CAAC,CAAC;QAC1D,MAAM,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,YAAa,CAAC,CAAC;QAG5C,MAAM,GAAG,CAAA,oDAAoD,EAAE,EAAE,CAAC;QAGlE,IAAI,CAAC;YACH,MAAM,GAAG,CAAA,8CAA8C,EAAE,EAAE,CAAC;QAC9D,CAAC;QAAC,OAAO,GAAG,EAAE,CAAC;QAEf,CAAC;QAGD,MAAM,MAAM,GAAG,MAAM,GAAG,CAAA;;mBAET,EAAE;;KAEhB,CAAC;QAEF,IAAI,MAAM,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;YACxB,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBAC1B,OAAO,EAAE,KAAK;gBACd,KAAK,EAAE,uBAAuB;aAC/B,CAAC,CAAC;QACL,CAAC;QAED,OAAO,CAAC,GAAG,CAAC,sCAAsC,EAAE,EAAE,CAAC,CAAC;QAExD,OAAO,GAAG,CAAC,IAAI,CAAC;YACd,OAAO,EAAE,IAAI;YACb,OAAO,EAAE,6BAA6B;SACvC,CAAC,CAAC;IAEL,CAAC;IAAC,OAAO,KAAU,EAAE,CAAC;QACpB,OAAO,CAAC,KAAK,CAAC,gCAAgC,EAAE,KAAK,CAAC,CAAC;QACvD,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;YAC1B,OAAO,EAAE,KAAK;YACd,KAAK,EAAE,KAAK,CAAC,OAAO,IAAI,iCAAiC;SAC1D,CAAC,CAAC;IACL,CAAC;AACH,CAAC,CAAC,CAAC;AAGH,MAAM,CAAC,GAAG,CAAC,0BAA0B,EAAE,KAAK,EAAE,GAAY,EAAE,GAAa,EAAE,EAAE;IAC3E,IAAI,CAAC;QACH,MAAM,EAAE,EAAE,EAAE,GAAG,GAAG,CAAC,MAAM,CAAC;QAC1B,MAAM,EAAE,mBAAmB,EAAE,GAAG,GAAG,CAAC,IAAI,CAAC;QAEzC,OAAO,CAAC,GAAG,CAAC,mDAAmD,EAAE,EAAE,CAAC,CAAC;QACrE,OAAO,CAAC,GAAG,CAAC,0BAA0B,EAAE,mBAAmB,CAAC,CAAC;QAG7D,IAAI,CAAC,mBAAmB,IAAI,OAAO,mBAAmB,KAAK,QAAQ,EAAE,CAAC;YACpE,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBAC1B,OAAO,EAAE,KAAK;gBACd,KAAK,EAAE,iCAAiC;gBACxC,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;aACpC,CAAC,CAAC;QACL,CAAC;QAGD,MAAM,EAAE,EAAE,EAAE,GAAG,MAAM,MAAM,CAAC,OAAO,CAAC,CAAC;QACrC,MAAM,EAAE,OAAO,EAAE,GAAG,MAAM,MAAM,CAAC,qBAAqB,CAAC,CAAC;QACxD,MAAM,EAAE,EAAE,EAAE,GAAG,MAAM,MAAM,CAAC,aAAa,CAAC,CAAC;QAE3C,MAAM,MAAM,GAAG,MAAM,EAAE;aACpB,MAAM,CAAC,OAAO,CAAC;aACf,GAAG,CAAC;YACH,mBAAmB,EAAE,mBAAmB;YACxC,SAAS,EAAE,IAAI,IAAI,EAAE;SACtB,CAAC;aACD,KAAK,CAAC,EAAE,CAAC,OAAO,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;aACzB,SAAS,CAAC;YACT,EAAE,EAAE,OAAO,CAAC,EAAE;YACd,IAAI,EAAE,OAAO,CAAC,IAAI;YAClB,mBAAmB,EAAE,OAAO,CAAC,mBAAmB;SACjD,CAAC,CAAC;QAEL,IAAI,MAAM,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;YACxB,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBAC1B,OAAO,EAAE,KAAK;gBACd,KAAK,EAAE,uBAAuB;aAC/B,CAAC,CAAC;QACL,CAAC;QAED,OAAO,CAAC,GAAG,CAAC,+DAA+D,EAAE,EAAE,CAAC,CAAC;QAEjF,OAAO,GAAG,CAAC,IAAI,CAAC;YACd,OAAO,EAAE,IAAI;YACb,IAAI,EAAE,MAAM,CAAC,CAAC,CAAC;YACf,OAAO,EAAE,+CAA+C;SACzD,CAAC,CAAC;IAEL,CAAC;IAAC,OAAO,KAAU,EAAE,CAAC;QACpB,OAAO,CAAC,KAAK,CAAC,8CAA8C,EAAE,KAAK,CAAC,CAAC;QACrE,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;YAC1B,OAAO,EAAE,KAAK;YACd,KAAK,EAAE,KAAK,CAAC,OAAO,IAAI,8CAA8C;SACvE,CAAC,CAAC;IACL,CAAC;AACH,CAAC,CAAC,CAAC;AAEH,eAAe,MAAM,CAAC","sourcesContent":["import { Router, Request, Response } from 'express';\nimport { logger } from '../services/logger.service';\nimport { asyncHandler } from '../middleware/error.middleware';\nimport { validateBody, validateParams } from '../middleware/validation.middleware';\nimport { z } from 'zod';\nimport { db } from '../storage/database';\nimport { tenants } from '../../shared/schema';\n\nconst router = Router();\n\n// Validation schemas\nconst credentialsSchema = z.record(z.string());\nconst sourceIdSchema = z.object({\n  sourceId: z.string().min(1)\n});\n\n// Mock data store for credentials (in production, use database)\nconst credentialsStore: Record<string, Record<string, string>> = {};\n\n// Get all data sources configuration\nrouter.get('/data-sources', asyncHandler(async (req: Request, res: Response) => {\n  logger.info('API: Fetching data sources configuration');\n  \n  // In production, this would fetch from database\n  const dataSources = [\n    {\n      id: 'fda_510k',\n      name: 'FDA 510(k) Database',\n      status: 'inactive',\n      hasCredentials: !!credentialsStore['fda_510k']\n    },\n    {\n      id: 'ema_epar',\n      name: 'EMA EPAR Database',\n      status: 'active',\n      hasCredentials: !!credentialsStore['ema_epar']\n    },\n    // Add more sources as needed\n  ];\n  \n  res.json(dataSources);\n}));\n\n// Save credentials for a data source\nrouter.post('/data-sources/:sourceId/credentials', \n  validateParams(sourceIdSchema),\n  validateBody(credentialsSchema),\n  asyncHandler(async (req: Request, res: Response) => {\n    const { sourceId } = req.params;\n    const credentials = req.body;\n    \n    if (!sourceId) {\n      return res.status(400).json({\n        success: false,\n        error: 'Datenquellen-ID ist erforderlich',\n        timestamp: new Date().toISOString()\n      });\n    }\n    \n    logger.info('API: Saving credentials for data source', { sourceId });\n    \n    // In production, encrypt and store in database\n    credentialsStore[sourceId] = credentials;\n    \n    logger.info('API: Credentials saved successfully', { sourceId });\n    \n    return res.json({\n      success: true,\n      message: 'Zugangsdaten erfolgreich gespeichert',\n      timestamp: new Date().toISOString()\n    });\n  })\n);\n\n// Test connection for a data source\nrouter.post('/data-sources/:sourceId/test',\n  validateParams(sourceIdSchema),\n  asyncHandler(async (req: Request, res: Response) => {\n    const { sourceId } = req.params;\n    \n    if (!sourceId) {\n      return res.status(400).json({\n        success: false,\n        error: 'Datenquellen-ID ist erforderlich',\n        timestamp: new Date().toISOString()\n      });\n    }\n    \n    logger.info('API: Testing connection for data source', { sourceId });\n    \n    const credentials = credentialsStore[sourceId];\n    if (!credentials) {\n      return res.status(400).json({\n        success: false,\n        error: 'Keine Zugangsdaten für diese Datenquelle gefunden',\n        timestamp: new Date().toISOString()\n      });\n    }\n    \n    // In production, actually test the connection to the data source\n    // For now, simulate a test\n    const isSuccess = Math.random() > 0.3; // 70% success rate for demo\n    \n    if (isSuccess) {\n      logger.info('API: Connection test successful', { sourceId });\n      return res.json({\n        success: true,\n        message: 'Verbindung erfolgreich getestet',\n        timestamp: new Date().toISOString()\n      });\n    } else {\n      logger.warn('API: Connection test failed', { sourceId });\n      return res.status(400).json({\n        success: false,\n        error: 'Verbindungstest fehlgeschlagen - Überprüfen Sie die Zugangsdaten',\n        timestamp: new Date().toISOString()\n      });\n    }\n  })\n);\n\n// Get credentials for a data source (masked for security)\nrouter.get('/data-sources/:sourceId/credentials',\n  validateParams(sourceIdSchema),\n  asyncHandler(async (req: Request, res: Response) => {\n    const { sourceId } = req.params;\n    \n    if (!sourceId) {\n      return res.status(400).json({\n        success: false,\n        error: 'Datenquellen-ID ist erforderlich',\n        timestamp: new Date().toISOString()\n      });\n    }\n    \n    logger.info('API: Fetching masked credentials for data source', { sourceId });\n    \n    const credentials = credentialsStore[sourceId];\n    if (!credentials) {\n      return res.json({\n        success: true,\n        data: {},\n        timestamp: new Date().toISOString()\n      });\n    }\n    \n    // Mask sensitive values\n    const maskedCredentials: Record<string, string> = {};\n    Object.keys(credentials).forEach(key => {\n      const value = credentials[key];\n      if (value && typeof value === 'string') {\n        if (key.toLowerCase().includes('password') || key.toLowerCase().includes('secret') || key.toLowerCase().includes('key')) {\n          maskedCredentials[key] = '****' + value.slice(-4);\n        } else {\n          maskedCredentials[key] = value;\n        }\n      }\n    });\n    \n    return res.json({\n      success: true,\n      data: maskedCredentials,\n      timestamp: new Date().toISOString()\n    });\n  })\n);\n\n// TENANT MANAGEMENT ROUTES\n\n// Validation schema für Tenant-Erstellung\nconst createTenantSchema = z.object({\n  name: z.string().min(1, 'Firmenname ist erforderlich'),\n  slug: z.string().min(1, 'Slug ist erforderlich'),\n  subscriptionPlan: z.enum(['starter', 'professional', 'enterprise']),\n  subscriptionStatus: z.enum(['trial', 'active', 'cancelled', 'suspended']),\n  billingEmail: z.string().email('Gültige E-Mail-Adresse erforderlich'),\n  contactName: z.string().min(1, 'Kontaktname ist erforderlich'),\n  contactEmail: z.string().email('Gültige Kontakt-E-Mail erforderlich'),\n  maxUsers: z.number().min(1),\n  maxDataSources: z.number().min(1),\n  apiAccessEnabled: z.boolean().default(true)\n});\n\n// POST /api/admin/tenants - Neuen Tenant erstellen\nrouter.post('/tenants', async (req: Request, res: Response) => {\n  try {\n    console.log('[ADMIN] Creating new tenant:', req.body);\n    \n    // Validate input\n    const validatedData = createTenantSchema.parse(req.body);\n    \n    // Import tenant service dynamically\n    const { TenantService } = await import('../services/tenantService');\n    \n    // Create tenant with email service integration\n    const newTenant = await TenantService.createTenant({\n      name: validatedData.name,\n      slug: validatedData.slug,\n      subscriptionPlan: validatedData.subscriptionPlan,\n      subscriptionStatus: validatedData.subscriptionStatus,\n      billingEmail: validatedData.billingEmail,\n      maxUsers: validatedData.maxUsers,\n      maxDataSources: validatedData.maxDataSources,\n      apiAccessEnabled: validatedData.apiAccessEnabled,\n      contactName: validatedData.contactName,\n      contactEmail: validatedData.contactEmail\n    });\n\n    console.log('[ADMIN] Tenant created successfully:', newTenant.id);\n    \n    return res.status(201).json({\n      success: true,\n      data: newTenant,\n      message: 'Tenant erfolgreich erstellt'\n    });\n    \n  } catch (error: any) {\n    console.error('[ADMIN] Error creating tenant:', error);\n    \n    if (error.message === 'Slug already exists') {\n      return res.status(409).json({\n        success: false,\n        error: 'Slug bereits vergeben - bitte wählen Sie einen anderen',\n        timestamp: new Date().toISOString()\n      });\n    }\n    \n    return res.status(500).json({\n      success: false,\n      error: error.message || 'Fehler beim Erstellen des Tenants',\n      timestamp: new Date().toISOString()\n    });\n  }\n});\n\n// GET /api/admin/tenants - Alle Tenants auflisten\nrouter.get('/tenants', async (req: Request, res: Response) => {\n  try {\n    // Direct SQL query für bessere Kompatibilität\n    const { neon } = await import('@neondatabase/serverless');\n    const sql = neon(process.env.DATABASE_URL!);\n    \n    const result = await sql`\n      SELECT \n        id,\n        name,\n        slug,\n        subscription_plan as \"subscriptionPlan\",\n        subscription_status as \"subscriptionStatus\", \n        billing_email as \"billingEmail\",\n        max_users as \"maxUsers\",\n        max_data_sources as \"maxDataSources\",\n        api_access_enabled as \"apiAccessEnabled\",\n        custom_branding_enabled as \"customBrandingEnabled\",\n        customer_permissions as \"customerPermissions\",\n        trial_ends_at as \"trialEndsAt\",\n        created_at as \"createdAt\",\n        updated_at as \"updatedAt\"\n      FROM tenants \n      ORDER BY created_at DESC\n    `;\n    \n    console.log('[ADMIN] Fetched tenants for frontend:', result.length);\n    \n    return res.json(result);\n  } catch (error: any) {\n    console.error('[ADMIN] Error fetching tenants:', error);\n    return res.status(500).json({\n      success: false,\n      error: error.message || 'Fehler beim Laden der Tenants'\n    });\n  }\n});\n\n// PUT /api/admin/tenants/:id - Tenant bearbeiten\nrouter.put('/tenants/:id', async (req: Request, res: Response) => {\n  try {\n    const { id } = req.params;\n    const updateData = req.body;\n    \n    console.log('[ADMIN] Updating tenant:', id, updateData);\n    \n    // Use direct SQL query for better compatibility\n    const { neon } = await import('@neondatabase/serverless');\n    const sql = neon(process.env.DATABASE_URL!);\n    \n    // Build SQL update statement\n    const updates: string[] = [];\n    const values: any[] = [];\n    let paramIndex = 1;\n    \n    if (updateData.name) {\n      updates.push(`name = $${paramIndex++}`);\n      values.push(updateData.name);\n    }\n    if (updateData.subscriptionPlan) {\n      updates.push(`subscription_plan = $${paramIndex++}`);\n      values.push(updateData.subscriptionPlan);\n    }\n    if (updateData.subscriptionStatus) {\n      updates.push(`subscription_status = $${paramIndex++}`);\n      values.push(updateData.subscriptionStatus);\n    }\n    if (updateData.billingEmail) {\n      updates.push(`billing_email = $${paramIndex++}`);\n      values.push(updateData.billingEmail);\n    }\n    if (updateData.maxUsers !== undefined) {\n      updates.push(`max_users = $${paramIndex++}`);\n      values.push(updateData.maxUsers);\n    }\n    if (updateData.maxDataSources !== undefined) {\n      updates.push(`max_data_sources = $${paramIndex++}`);\n      values.push(updateData.maxDataSources);\n    }\n    if (updateData.apiAccessEnabled !== undefined) {\n      updates.push(`api_access_enabled = $${paramIndex++}`);\n      values.push(updateData.apiAccessEnabled);\n    }\n    if (updateData.customBrandingEnabled !== undefined) {\n      updates.push(`custom_branding_enabled = $${paramIndex++}`);\n      values.push(updateData.customBrandingEnabled);\n    }\n    \n    if (updates.length === 0) {\n      return res.status(400).json({\n        success: false,\n        error: 'Keine Daten zum Aktualisieren'\n      });\n    }\n    \n    updates.push(`updated_at = $${paramIndex++}`);\n    values.push(new Date());\n    values.push(id);\n    \n    // Build proper parameterized query\n    const updateQuery = `\n      UPDATE tenants \n      SET ${updates.join(', ')}\n      WHERE id = $${paramIndex}\n      RETURNING *\n    `;\n    \n    const result = await sql(updateQuery, values);\n    \n    if (result.length === 0) {\n      return res.status(404).json({\n        success: false,\n        error: 'Tenant nicht gefunden'\n      });\n    }\n    \n    console.log('[ADMIN] Tenant updated successfully:', result[0]?.id);\n    \n    return res.json({\n      success: true,\n      data: result[0],\n      message: 'Tenant erfolgreich aktualisiert'\n    });\n    \n  } catch (error: any) {\n    console.error('[ADMIN] Error updating tenant:', error);\n    return res.status(500).json({\n      success: false,\n      error: error.message || 'Fehler beim Aktualisieren des Tenants'\n    });\n  }\n});\n\n// DELETE /api/admin/tenants/:id - Tenant löschen\nrouter.delete('/tenants/:id', async (req: Request, res: Response) => {\n  try {\n    const { id } = req.params;\n    \n    console.log('[ADMIN] Deleting tenant:', id);\n    \n    // Use direct SQL query for better compatibility\n    const { neon } = await import('@neondatabase/serverless');\n    const sql = neon(process.env.DATABASE_URL!);\n    \n    // First, delete related data access records\n    await sql`DELETE FROM tenant_data_access WHERE tenant_id = ${id}`;\n    \n    // Delete any tenant users if they exist\n    try {\n      await sql`DELETE FROM tenant_users WHERE tenant_id = ${id}`;\n    } catch (err) {\n      // Table might not exist, continue\n    }\n    \n    // Now delete the tenant\n    const result = await sql`\n      DELETE FROM tenants \n      WHERE id = ${id}\n      RETURNING id\n    `;\n    \n    if (result.length === 0) {\n      return res.status(404).json({\n        success: false,\n        error: 'Tenant nicht gefunden'\n      });\n    }\n    \n    console.log('[ADMIN] Tenant deleted successfully:', id);\n    \n    return res.json({\n      success: true,\n      message: 'Tenant erfolgreich gelöscht'\n    });\n    \n  } catch (error: any) {\n    console.error('[ADMIN] Error deleting tenant:', error);\n    return res.status(500).json({\n      success: false,\n      error: error.message || 'Fehler beim Löschen des Tenants'\n    });\n  }\n});\n\n// PUT /api/admin/tenants/:id/permissions - Customer permissions verwalten\nrouter.put('/tenants/:id/permissions', async (req: Request, res: Response) => {\n  try {\n    const { id } = req.params;\n    const { customerPermissions } = req.body;\n    \n    console.log('[ADMIN] Updating customer permissions for tenant:', id);\n    console.log('[ADMIN] New permissions:', customerPermissions);\n    \n    // Validate permissions structure\n    if (!customerPermissions || typeof customerPermissions !== 'object') {\n      return res.status(400).json({\n        success: false,\n        error: 'Ungültige Berechtigungsstruktur',\n        timestamp: new Date().toISOString()\n      });\n    }\n    \n    // Use Drizzle ORM instead of direct SQL\n    const { db } = await import('../db');\n    const { tenants } = await import('../../shared/schema');\n    const { eq } = await import('drizzle-orm');\n    \n    const result = await db\n      .update(tenants)\n      .set({\n        customerPermissions: customerPermissions,\n        updatedAt: new Date()\n      })\n      .where(eq(tenants.id, id))\n      .returning({\n        id: tenants.id,\n        name: tenants.name,\n        customerPermissions: tenants.customerPermissions\n      });\n    \n    if (result.length === 0) {\n      return res.status(404).json({\n        success: false,\n        error: 'Tenant nicht gefunden'\n      });\n    }\n    \n    console.log('[ADMIN] Customer permissions updated successfully for tenant:', id);\n    \n    return res.json({\n      success: true,\n      data: result[0],\n      message: 'Kundenberechtigungen erfolgreich aktualisiert'\n    });\n    \n  } catch (error: any) {\n    console.error('[ADMIN] Error updating customer permissions:', error);\n    return res.status(500).json({\n      success: false,\n      error: error.message || 'Fehler beim Aktualisieren der Berechtigungen'\n    });\n  }\n});\n\nexport default router;"]}