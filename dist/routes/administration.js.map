{"version":3,"file":"administration.js","sourceRoot":"","sources":["../../server/routes/administration.ts"],"names":[],"mappings":"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","sourcesContent":["import { Router } from 'express';\nimport fs from 'fs/promises';\nimport path from 'path';\nimport archiver from 'archiver';\nimport type { Request, Response } from 'express';\n\nconst router = Router();\n\n// Get development phases\nrouter.get('/development-phases', async (req: Request, res: Response) => {\n  try {\n    // Return development phases data\n    const phases = [\n      {\n        id: 'phase1',\n        name: 'Phase 1: System-Grundlagen',\n        description: 'Grundlegende Systemarchitektur und Core-Funktionalitäten',\n        status: 'completed',\n        progress: 100,\n        startDate: '2025-07-15T00:00:00Z',\n        completedDate: '2025-07-31T00:00:00Z',\n        estimatedDuration: '2 Wochen',\n        tasks: [\n          {\n            id: 'p1-t1',\n            name: 'Datenbank-Schema erstellen',\n            description: 'PostgreSQL Schema für Knowledge Base, Legal Cases und Regulatory Updates',\n            status: 'completed',\n            category: 'database',\n            priority: 'high'\n          },\n          {\n            id: 'p1-t2',\n            name: 'Backend API Grundgerüst',\n            description: 'Express.js Server mit TypeScript und Drizzle ORM',\n            status: 'completed',\n            category: 'backend',\n            priority: 'high'\n          },\n          {\n            id: 'p1-t3',\n            name: 'Frontend Basis-Setup',\n            description: 'React mit TypeScript und Tailwind CSS',\n            status: 'completed',\n            category: 'frontend',\n            priority: 'high'\n          },\n          {\n            id: 'p1-t4',\n            name: 'Authentication System',\n            description: 'Replit OpenID Connect Integration',\n            status: 'completed',\n            category: 'backend',\n            priority: 'medium'\n          }\n        ]\n      },\n      {\n        id: 'phase2',\n        name: 'Phase 2: Data Collection & AI',\n        description: 'Automatisierte Datensammlung und KI-gestützte Analyse',\n        status: 'completed',\n        progress: 95,\n        startDate: '2025-07-31T00:00:00Z',\n        completedDate: '2025-08-01T00:00:00Z',\n        estimatedDuration: '1 Woche',\n        tasks: [\n          {\n            id: 'p2-t1',\n            name: 'Universal Knowledge Extractor',\n            description: '13 internationale Datenquellen Integration',\n            status: 'completed',\n            category: 'backend',\n            priority: 'high'\n          },\n          {\n            id: 'p2-t2',\n            name: 'JAMA Network Integration',\n            description: 'Spezielle Integration für medizinische Fachartikel',\n            status: 'completed',\n            category: 'backend',\n            priority: 'high'\n          },\n          {\n            id: 'p2-t3',\n            name: 'Knowledge Base Frontend',\n            description: 'Benutzeroberfläche für Knowledge Articles',\n            status: 'completed',\n            category: 'frontend',\n            priority: 'medium'\n          },\n          {\n            id: 'p2-t4',\n            name: 'AI Content Analysis',\n            description: 'Automatische Kategorisierung und Bewertung',\n            status: 'in-progress',\n            category: 'backend',\n            priority: 'medium'\n          }\n        ]\n      },\n      {\n        id: 'phase3',\n        name: 'Phase 3: Production & Optimization',\n        description: 'Production-Deployment und Performance-Optimierung',\n        status: 'in-progress',\n        progress: 85,\n        startDate: '2025-08-01T00:00:00Z',\n        estimatedDuration: '1 Woche',\n        tasks: [\n          {\n            id: 'p3-t1',\n            name: 'Production Deployment',\n            description: 'Replit Deployment mit Custom Domain',\n            status: 'completed',\n            category: 'deployment',\n            priority: 'high'\n          },\n          {\n            id: 'p3-t2',\n            name: 'Performance Monitoring',\n            description: 'Winston Logging und Health Checks',\n            status: 'completed',\n            category: 'backend',\n            priority: 'high'\n          },\n          {\n            id: 'p3-t3',\n            name: 'Security Hardening',\n            description: 'Rate Limiting, Input Validation, HTTPS',\n            status: 'completed',\n            category: 'backend',\n            priority: 'high'\n          },\n          {\n            id: 'p3-t4',\n            name: 'Documentation Suite',\n            description: 'Umfassende System-Dokumentation',\n            status: 'completed',\n            category: 'backend',\n            priority: 'medium'\n          },\n          {\n            id: 'p3-t5',\n            name: 'Administration Panel',\n            description: 'Phase-Management und System-Administration',\n            status: 'completed',\n            category: 'frontend',\n            priority: 'medium'\n          },\n          {\n            id: 'p3-t6',\n            name: 'Advanced Analytics',\n            description: 'Dashboard-Optimierung und Reporting',\n            status: 'in-progress',\n            category: 'frontend',\n            priority: 'medium'\n          },\n          {\n            id: 'p3-t7',\n            name: 'User Experience Polish',\n            description: 'UI/UX Verbesserungen und Mobile Optimierung',\n            status: 'pending',\n            category: 'frontend',\n            priority: 'low'\n          }\n        ]\n      }\n    ];\n\n    res.json(phases);\n  } catch (error) {\n    console.error('Error fetching development phases:', error);\n    res.status(500).json({ error: 'Failed to fetch development phases' });\n  }\n});\n\n// Execute phase action\nrouter.post('/phases/:phaseId/:action', async (req: Request, res: Response) => {\n  try {\n    const { phaseId, action } = req.params;\n    \n    console.log(`[ADMIN] Executing phase action: ${action} on phase ${phaseId}`);\n    \n    // Simulate phase action\n    let message = '';\n    switch (action) {\n      case 'start':\n        message = `Phase ${phaseId} wurde gestartet`;\n        break;\n      case 'pause':\n        message = `Phase ${phaseId} wurde pausiert`;\n        break;\n      case 'restart':\n        message = `Phase ${phaseId} wurde neu gestartet`;\n        break;\n      default:\n        return res.status(400).json({ error: 'Invalid action' });\n    }\n\n    res.json({\n      success: true,\n      message,\n      phaseId,\n      action,\n      timestamp: new Date().toISOString()\n    });\n  } catch (error) {\n    console.error('Error executing phase action:', error);\n    res.status(500).json({ error: 'Failed to execute phase action' });\n  }\n});\n\n// Download documentation\nrouter.get('/download-documentation', async (req: Request, res: Response) => {\n  try {\n    const format = req.query.format as string || 'zip';\n    \n    if (format === 'zip') {\n      // Create ZIP archive\n      const archive = archiver('zip', { zlib: { level: 9 } });\n      \n      res.setHeader('Content-Type', 'application/zip');\n      res.setHeader('Content-Disposition', 'attachment; filename=\"helix-documentation.zip\"');\n      \n      archive.pipe(res);\n      \n      // Add documentation files to archive\n      const docFiles = [\n        'SOFTWARE_DOKUMENTATION_HELIX.md',\n        'API_REFERENCE_HELIX.md',\n        'DEPLOYMENT_GUIDE_HELIX.md',\n        'README.md'\n      ];\n      \n      for (const file of docFiles) {\n        try {\n          const filePath = path.join(process.cwd(), file);\n          const content = await fs.readFile(filePath, 'utf8');\n          archive.append(content, { name: file });\n        } catch (error) {\n          console.warn(`Could not add ${file} to archive:`, error);\n        }\n      }\n      \n      // Add package.json for reference\n      try {\n        const packagePath = path.join(process.cwd(), 'package.json');\n        const packageContent = await fs.readFile(packagePath, 'utf8');\n        archive.append(packageContent, { name: 'package.json' });\n      } catch (error) {\n        console.warn('Could not add package.json to archive');\n      }\n      \n      archive.finalize();\n      \n    } else if (format === 'pdf') {\n      // For PDF, we'll return the main documentation as text\n      // In a real implementation, you'd convert to PDF\n      try {\n        const docPath = path.join(process.cwd(), 'SOFTWARE_DOKUMENTATION_HELIX.md');\n        const content = await fs.readFile(docPath, 'utf8');\n        \n        res.setHeader('Content-Type', 'application/json');\n        res.setHeader('Content-Disposition', 'attachment; filename=\"helix-documentation.txt\"');\n        res.json({\n          success: true,\n          content: content,\n          contentType: 'application/json',\n          filename: 'helix-documentation.txt'\n        });\n      } catch (error) {\n        res.status(404).json({ error: 'Documentation file not found' });\n      }\n    } else {\n      res.status(400).json({ error: 'Invalid format. Use zip or pdf' });\n    }\n    \n  } catch (error) {\n    console.error('Error generating documentation download:', error);\n    res.status(500).json({ error: 'Failed to generate documentation download' });\n  }\n});\n\nexport default router;"]}