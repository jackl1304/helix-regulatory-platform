{"version":3,"file":"knowledge-extraction.routes.js","sourceRoot":"","sources":["../../server/routes/knowledge-extraction.routes.ts"],"names":[],"mappings":"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","sourcesContent":["import { Router, Request, Response } from 'express';\nimport { z } from 'zod';\nimport { KnowledgeExtractionService } from '../services/knowledge-extraction.service';\nimport { storage } from '../storage';\nimport { Logger } from '../services/logger.service';\nimport { asyncHandler } from '../middleware/error.middleware';\n// Define createApiResponse locally since @shared/types doesn't exist\nconst createApiResponse = <T = any>(data: T, success: boolean = true, message?: string) => ({\n  success,\n  data,\n  message\n});\n\nconst router = Router();\nconst logger = new Logger('KnowledgeExtractionRoutes');\n// Use type assertion to bypass interface mismatch temporarily\nconst extractionService = new KnowledgeExtractionService(storage as any);\n\n// Schema für spezifische Quellen-Extraktion\nconst SpecificSourcesSchema = z.object({\n  sourceIds: z.array(z.string()).min(1, 'At least one source ID is required')\n});\n\n/**\n * GET /api/knowledge-extraction/status\n * Überprüft den aktuellen Status der Knowledge Base\n */\nrouter.get('/status', asyncHandler(async (req: Request, res: Response) => {\n  logger.info('Fetching knowledge extraction status');\n  \n  try {\n    const [articles, regulatoryUpdates, legalCases] = await Promise.all([\n      storage.getAllKnowledgeArticles(),\n      storage.getAllRegulatoryUpdates(),\n      storage.getAllLegalCases()\n    ]);\n\n    const autoExtractedArticles = articles.filter(article => \n      article.tags.includes('auto-extracted')\n    );\n\n    const needsReviewArticles = articles.filter(article => \n      article.tags.includes('needs-review')\n    );\n\n    const status = {\n      totalArticles: articles.length,\n      autoExtractedArticles: autoExtractedArticles.length,\n      needsReviewArticles: needsReviewArticles.length,\n      publishedArticles: articles.filter(a => a.isPublished).length,\n      draftArticles: articles.filter(a => !a.isPublished).length,\n      availableSourceData: {\n        regulatoryUpdates: regulatoryUpdates.length,\n        legalCases: legalCases.length,\n        totalSources: regulatoryUpdates.length + legalCases.length\n      },\n      extractionPotential: {\n        unprocessedRegulatory: regulatoryUpdates.filter(update => \n          !articles.some(article => article.title.includes(update.title.substring(0, 50)))\n        ).length,\n        unprocessedLegal: legalCases.filter(legalCase => \n          !articles.some(article => article.title.includes(legalCase.title.substring(0, 50)))\n        ).length\n      }\n    };\n\n    logger.info('Knowledge extraction status retrieved', {\n      totalArticles: status.totalArticles,\n      extractionPotential: status.extractionPotential\n    });\n\n    res.json(status);\n  } catch (error) {\n    logger.error('Failed to fetch knowledge extraction status', { error });\n    res.status(500).json({ \n      error: 'Failed to fetch status',\n      totalArticles: 0,\n      autoExtractedArticles: 0,\n      needsReviewArticles: 0,\n      publishedArticles: 0,\n      draftArticles: 0,\n      availableSourceData: {\n        regulatoryUpdates: 0,\n        legalCases: 0,\n        totalSources: 0\n      },\n      extractionPotential: {\n        unprocessedRegulatory: 0,\n        unprocessedLegal: 0\n      }\n    });\n  }\n}));\n\n/**\n * POST /api/knowledge-extraction/extract-all\n * Startet die vollständige Extraktion aller verfügbaren Artikel\n */\nrouter.post('/extract-all', asyncHandler(async (req: Request, res: Response) => {\n  logger.info('Starting full knowledge article extraction');\n  \n  try {\n    const stats = await extractionService.extractArticlesFromAllSources();\n    \n    logger.info('Full knowledge extraction completed', { \n      totalProcessed: stats.totalProcessed,\n      articlesExtracted: stats.articlesExtracted,\n      duplicatesSkipped: stats.duplicatesSkipped,\n      errorsEncountered: stats.errorsEncountered\n    });\n    \n    res.json(createApiResponse(true, {\n      message: 'Knowledge article extraction completed successfully',\n      stats\n    }));\n  } catch (error) {\n    logger.error('Failed to extract knowledge articles', { error });\n    res.status(500).json(createApiResponse(false, undefined, 'Knowledge extraction failed'));\n  }\n}));\n\n/**\n * POST /api/knowledge-extraction/extract-sources\n * Extrahiert Artikel aus spezifischen Datenquellen\n */\nrouter.post('/extract-sources', asyncHandler(async (req: Request, res: Response) => {\n  logger.info('Starting specific source extraction', { body: req.body });\n  \n  try {\n    const { sourceIds } = SpecificSourcesSchema.parse(req.body);\n    \n    const stats = await extractionService.extractFromSpecificSources(sourceIds);\n    \n    logger.info('Specific source extraction completed', { sourceIds, stats });\n    \n    res.json(createApiResponse(true, {\n      message: `Knowledge article extraction completed for ${sourceIds.length} sources`,\n      sourceIds,\n      stats\n    }));\n  } catch (error) {\n    logger.error('Failed to extract from specific sources', { error });\n    res.status(500).json(createApiResponse(false, undefined, 'Specific source extraction failed'));\n  }\n}));\n\n/**\n * GET /api/knowledge-extraction/preview\n * Zeigt eine Vorschau der extrahierbaren Artikel an\n */\nrouter.get('/preview', asyncHandler(async (req: Request, res: Response) => {\n  logger.info('Generating extraction preview');\n  \n  try {\n    const limit = parseInt(req.query.limit as string) || 10;\n    \n    const [regulatoryUpdates, legalCases, existingArticles] = await Promise.all([\n      storage.getRecentRegulatoryUpdates(limit),\n      storage.getAllLegalCases(),\n      storage.getAllKnowledgeArticles()\n    ]);\n\n    const recentLegalCases = legalCases.slice(0, limit);\n\n    // Extrahierbare Artikel identifizieren\n    const extractableRegulatory = regulatoryUpdates\n      .filter(update => update.url && update.title)\n      .filter(update => !existingArticles.some(article => \n        article.title.includes(update.title.substring(0, 50))\n      ))\n      .map(update => ({\n        id: update.id,\n        title: update.title,\n        source: update.source,\n        region: update.region,\n        type: 'regulatory',\n        url: update.url,\n        category: update.category\n      }));\n\n    const extractableLegal = recentLegalCases\n      .filter(legalCase => legalCase.title)\n      .filter(legalCase => !existingArticles.some(article => \n        article.title.includes(legalCase.title.substring(0, 50))\n      ))\n      .map(legalCase => ({\n        id: legalCase.id,\n        title: legalCase.title,\n        source: legalCase.court,\n        region: legalCase.jurisdiction,\n        type: 'legal',\n        url: `#legal-case-${legalCase.id}`,\n        category: 'Legal Case'\n      }));\n\n    const preview = {\n      extractableCount: extractableRegulatory.length + extractableLegal.length,\n      regulatory: extractableRegulatory,\n      legal: extractableLegal,\n      summary: {\n        totalExtractable: extractableRegulatory.length + extractableLegal.length,\n        regulatoryCount: extractableRegulatory.length,\n        legalCount: extractableLegal.length,\n        existingArticles: existingArticles.length\n      }\n    };\n\n    logger.info('Extraction preview generated', {\n      extractableCount: preview.extractableCount,\n      summary: preview.summary\n    });\n\n    res.json(createApiResponse(true, preview));\n  } catch (error) {\n    logger.error('Failed to generate extraction preview', { error });\n    res.status(500).json(createApiResponse(false, undefined, 'Failed to generate preview'));\n  }\n}));\n\n/**\n * DELETE /api/knowledge-extraction/auto-extracted\n * Löscht alle automatisch extrahierten Artikel (für Reset)\n */\nrouter.delete('/auto-extracted', asyncHandler(async (req: Request, res: Response) => {\n  logger.info('Deleting all auto-extracted knowledge articles');\n  \n  try {\n    const articles = await storage.getAllKnowledgeArticles();\n    const autoExtractedArticles = articles.filter(article => \n      article.tags.includes('auto-extracted')\n    );\n\n    let deletedCount = 0;\n    for (const article of autoExtractedArticles) {\n      await storage.deleteKnowledgeArticle(article.id);\n      deletedCount++;\n    }\n\n    logger.info('Auto-extracted articles deleted', { deletedCount });\n    \n    res.json(createApiResponse(true, {\n      message: `${deletedCount} auto-extracted articles deleted successfully`,\n      deletedCount\n    }));\n  } catch (error) {\n    logger.error('Failed to delete auto-extracted articles', { error });\n    res.status(500).json(createApiResponse(false, undefined, 'Failed to delete auto-extracted articles'));\n  }\n}));\n\nexport default router;"]}