{"version":3,"file":"errors.js","sourceRoot":"","sources":["../../server/routes/errors.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Error Reporting Backend\n * Basierend auf Optimierungsbericht f√ºr robuste Fehlerbehandlung\n */\n\nimport { Router } from 'express';\nimport type { Request, Response } from 'express';\nimport { logger } from '../services/logger.service';\n\nconst router = Router();\n\ninterface ErrorReport {\n  timestamp: string;\n  error: {\n    message: string;\n    stack?: string;\n    name: string;\n  };\n  context: string;\n  userAgent: string;\n  url: string;\n  userId?: string;\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  additionalData?: Record<string, any>;\n}\n\n// Error reporting endpoint\nrouter.post('/report', async (req: Request, res: Response) => {\n  try {\n    const { errors }: { errors: ErrorReport[] } = req.body;\n\n    if (!Array.isArray(errors)) {\n      return res.status(400).json({ \n        success: false, \n        message: 'Invalid error report format' \n      });\n    }\n\n    // Process each error report\n    for (const errorReport of errors) {\n      // Log error with appropriate level\n      const logLevel = getLogLevel(errorReport.severity);\n      logger[logLevel]('Frontend Error Report', {\n        error: errorReport.error,\n        context: errorReport.context,\n        userAgent: errorReport.userAgent,\n        url: errorReport.url,\n        timestamp: errorReport.timestamp,\n        additionalData: errorReport.additionalData\n      });\n\n      // In production, send to external monitoring service\n      if (process.env.NODE_ENV === 'production') {\n        await sendToExternalMonitoring(errorReport);\n      }\n    }\n\n    res.json({ \n      success: true, \n      message: `Processed ${errors.length} error reports` \n    });\n  } catch (error) {\n    logger.error('Failed to process error reports', { error });\n    res.status(500).json({ \n      success: false, \n      message: 'Failed to process error reports' \n    });\n  }\n});\n\n// Get error statistics endpoint\nrouter.get('/stats', async (req: Request, res: Response) => {\n  try {\n    // In production, get from monitoring service\n    // For now, return mock stats\n    const stats = {\n      totalErrors: 0,\n      errorsByType: {\n        javascript: 0,\n        network: 0,\n        react: 0,\n        api: 0\n      },\n      errorsBySeverity: {\n        low: 0,\n        medium: 0,\n        high: 0,\n        critical: 0\n      },\n      lastUpdated: new Date().toISOString()\n    };\n\n    res.json({ success: true, stats });\n  } catch (error) {\n    logger.error('Failed to get error statistics', { error });\n    res.status(500).json({ \n      success: false, \n      message: 'Failed to get error statistics' \n    });\n  }\n});\n\nfunction getLogLevel(severity: string): 'info' | 'warn' | 'error' {\n  switch (severity) {\n    case 'low':\n      return 'info';\n    case 'medium':\n      return 'warn';\n    case 'high':\n    case 'critical':\n      return 'error';\n    default:\n      return 'warn';\n  }\n}\n\nasync function sendToExternalMonitoring(errorReport: ErrorReport): Promise<void> {\n  // Implementation for external monitoring service\n  // Example: Sentry, LogRocket, DataDog, etc.\n  try {\n    // Mock implementation - replace with actual service\n    console.log('[EXTERNAL MONITORING]', errorReport);\n  } catch (error) {\n    logger.warn('Failed to send error to external monitoring', { error });\n  }\n}\n\nexport default router;"]}