{"version":3,"file":"routes-email.js","sourceRoot":"","sources":["../server/routes-email.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Express } from \"express\";\nimport { emailService } from \"./services/emailService\";\n\nexport function registerEmailRoutes(app: Express) {\n  // Gmail Provider API - Only authentic Gmail integration\n  app.get('/api/email/providers', async (req, res) => {\n    try {\n      const gmailProvider = {\n        id: 'gmail_deltaways',\n        name: 'Gmail (deltawayshelixinfo@gmail.com)',\n        host: 'smtp.gmail.com',\n        port: 587,\n        secure: false,\n        user: 'deltawayshelixinfo@gmail.com',\n        status: 'active', // Gmail mit App-Passwort verbunden\n        dailyLimit: 500,\n        usedToday: 0,\n        lastTest: new Date().toISOString()\n      };\n      \n      res.json([gmailProvider]);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to fetch email providers' });\n    }\n  });\n\n  // Gmail Templates API - Professional templates only\n  app.get('/api/email/templates', async (req, res) => {\n    try {\n      const gmailTemplates = [\n        {\n          id: 'customer_onboarding',\n          name: 'Kunden Anmeldung',\n          subject: 'Willkommen bei Helix Regulatory Intelligence!',\n          content: 'Vollständiges Onboarding-Template mit Anmeldedaten',\n          type: 'customer_onboarding',\n          isActive: true,\n          variables: ['customerName', 'subscriptionPlan', 'loginUrl']\n        },\n        {\n          id: 'customer_offboarding',\n          name: 'Kunden Abmeldung',\n          subject: 'Abschied von Helix - Danke für Ihr Vertrauen',\n          content: 'Höfliche Abmeldung mit Reaktivierungsoptionen',\n          type: 'customer_offboarding',\n          isActive: true,\n          variables: ['customerName', 'subscriptionPlan', 'endDate']\n        },\n        {\n          id: 'billing_reminder',\n          name: 'Rechnungserinnerung',\n          subject: 'Zahlungserinnerung - Rechnung fällig',\n          content: 'Freundliche Erinnerung mit Zahlungsoptionen',\n          type: 'billing_reminder',\n          isActive: true,\n          variables: ['customerName', 'amount', 'dueDate', 'invoiceUrl']\n        },\n        {\n          id: 'regulatory_alert',\n          name: 'Regulatory Alert',\n          subject: '🚨 Neues kritisches Update verfügbar',\n          content: 'Alert-Template für wichtige Änderungen',\n          type: 'regulatory_alert',\n          isActive: true,\n          variables: ['alertTitle', 'summary', 'urgency', 'dashboardUrl']\n        },\n        {\n          id: 'weekly_digest',\n          name: 'Wöchentlicher Digest',\n          subject: '📊 Helix Weekly Digest',\n          content: 'Zusammenfassung der Woche mit Statistiken',\n          type: 'weekly_digest',\n          isActive: true,\n          variables: ['updatesCount', 'legalCasesCount', 'dashboardUrl']\n        },\n        {\n          id: 'trial_expiry',\n          name: 'Testphase läuft ab',\n          subject: '⏰ Ihre Helix Testphase endet in 3 Tagen',\n          content: 'Erinnerung mit Upgrade-Optionen',\n          type: 'trial_expiry',\n          isActive: true,\n          variables: ['customerName', 'expiryDate', 'upgradeUrl']\n        }\n      ];\n      \n      res.json(gmailTemplates);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to fetch email templates' });\n    }\n  });\n\n  // Gmail Statistics API\n  app.get('/api/email/statistics', async (req, res) => {\n    try {\n      const stats = {\n        totalSent: 0,\n        totalDelivered: 0,\n        totalFailed: 0,\n        dailySent: 0,\n        weeklyDigestSubscribers: 847,\n        instantAlertSubscribers: 234,\n        lastSent: null\n      };\n      \n      res.json(stats);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to fetch email statistics' });\n    }\n  });\n\n  // Gmail Connection Test\n  app.post('/api/email/test', async (req, res) => {\n    try {\n      const result = await emailService.testConnection();\n      \n      // Service now returns proper JSON object\n      res.json(result);\n    } catch (error) {\n      console.error('[EMAIL] Connection test error:', error);\n      res.json({\n        success: false,\n        connected: false,\n        message: 'Gmail-Verbindung fehlgeschlagen',\n        details: error.message || 'Unbekannter Fehler bei der Verbindung',\n        provider: 'Gmail (deltawayshelixinfo@gmail.com)'\n      });\n    }\n  });\n\n  // Send Email via Gmail\n  app.post('/api/email/send', async (req, res) => {\n    try {\n      const { to, templateId, variables } = req.body;\n      \n      // Generate email content based on template\n      let subject = '';\n      let content = '';\n      \n      switch (templateId) {\n        case 'customer_onboarding':\n          const onboarding = emailService.generateCustomerOnboardingEmail(\n            variables.customerName || 'Kunde',\n            variables.subscriptionPlan || 'Professional',\n            variables.loginUrl || 'https://helix-platform.com/login'\n          );\n          subject = onboarding.subject;\n          content = onboarding.html;\n          break;\n          \n        case 'customer_offboarding':\n          const offboarding = emailService.generateCustomerOffboardingEmail(\n            variables.customerName || 'Kunde',\n            variables.subscriptionPlan || 'Professional',\n            variables.endDate || '31.12.2025'\n          );\n          subject = offboarding.subject;\n          content = offboarding.html;\n          break;\n          \n        case 'billing_reminder':\n          const billing = emailService.generateBillingReminderEmail(\n            variables.customerName || 'Kunde',\n            variables.amount || '299',\n            variables.dueDate || '31.12.2025',\n            variables.invoiceUrl || 'https://helix-platform.com/invoice'\n          );\n          subject = billing.subject;\n          content = billing.html;\n          break;\n          \n        case 'regulatory_alert':\n          const alert = emailService.generateRegulatoryAlertEmail(\n            variables.alertTitle || 'Neue regulatorische Änderung',\n            variables.summary || 'Wichtige Aktualisierung verfügbar',\n            variables.urgency || 'medium',\n            variables.dashboardUrl || 'https://helix-platform.com/dashboard'\n          );\n          subject = alert.subject;\n          content = alert.html;\n          break;\n          \n        case 'weekly_digest':\n          const digest = emailService.generateWeeklyDigestEmail(\n            variables.customerName || 'Kunde',\n            parseInt(variables.updatesCount) || 12,\n            parseInt(variables.legalCasesCount) || 65,\n            variables.dashboardUrl || 'https://helix-platform.com/dashboard'\n          );\n          subject = digest.subject;\n          content = digest.html;\n          break;\n          \n        case 'trial_expiry':\n          const trial = emailService.generateTrialExpiryEmail(\n            variables.customerName || 'Kunde',\n            variables.expiryDate || '31.12.2025',\n            variables.upgradeUrl || 'https://helix-platform.com/upgrade'\n          );\n          subject = trial.subject;\n          content = trial.html;\n          break;\n          \n        default:\n          subject = 'Helix Test-E-Mail';\n          content = '<p>Dies ist eine Test-E-Mail von Helix.</p>';\n      }\n      \n      const result = await emailService.sendEmail(to, subject, content);\n      \n      if (result) {\n        res.json({\n          success: true,\n          messageId: `helix_${Date.now()}`,\n          message: 'E-Mail erfolgreich versendet'\n        });\n      } else {\n        res.status(400).json({\n          success: false,\n          message: 'E-Mail-Versand fehlgeschlagen'\n        });\n      }\n    } catch (error) {\n      res.status(500).json({\n        success: false,\n        message: 'Server-Fehler beim E-Mail-Versand'\n      });\n    }\n  });\n}"]}