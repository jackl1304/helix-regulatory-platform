{"version":3,"file":"duplicateCleanupService.js","sourceRoot":"","sources":["../../server/services/duplicateCleanupService.ts"],"names":[],"mappings":"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","sourcesContent":["import { Logger } from './logger.service';\nimport { storage } from '../storage';\nimport { neon } from \"@neondatabase/serverless\";\n\nconst sql = neon(process.env.DATABASE_URL!);\n\ninterface DuplicateCleanupStats {\n  totalRecords: number;\n  uniqueRecords: number;\n  duplicatesRemoved: number;\n  cleanupTime: number;\n  qualityImprovement: number;\n}\n\nexport class DuplicateCleanupService {\n  private logger = new Logger('DuplicateCleanupService');\n\n  /**\n   * KRITISCHE DUPLIKATE-BEREINIGUNG\n   * Entfernt massive Duplikate basierend auf Title-Hash\n   */\n  async performEmergencyDuplicateCleanup(): Promise<DuplicateCleanupStats> {\n    const startTime = Date.now();\n    this.logger.info('STARTING EMERGENCY DUPLICATE CLEANUP - System has 95.5% duplicates!');\n\n    try {\n      // 1. Aktuelle Situation analysieren\n      const beforeStats = await this.getDuplicateStats();\n      this.logger.info('Before cleanup statistics', beforeStats);\n\n      // 2. Duplikate in Regulatory Updates bereinigen\n      const regulatoryCleanup = await this.cleanupRegulatoryUpdateDuplicates();\n      \n      // 3. Duplikate in Legal Cases bereinigen\n      const legalCleanup = await this.cleanupLegalCaseDuplicates();\n\n      // 4. Nach-Bereinigung Statistiken\n      const afterStats = await this.getDuplicateStats();\n      this.logger.info('After cleanup statistics', afterStats);\n\n      const cleanupTime = Date.now() - startTime;\n      const totalRemoved = regulatoryCleanup.removed + legalCleanup.removed;\n      const qualityImprovement = ((afterStats.uniquenessRatio - beforeStats.uniquenessRatio) * 100);\n\n      const stats: DuplicateCleanupStats = {\n        totalRecords: afterStats.totalRegulatory + afterStats.totalLegal,\n        uniqueRecords: afterStats.uniqueRegulatory + afterStats.uniqueLegal,\n        duplicatesRemoved: totalRemoved,\n        cleanupTime,\n        qualityImprovement\n      };\n\n      this.logger.info('EMERGENCY DUPLICATE CLEANUP COMPLETED', stats);\n      return stats;\n\n    } catch (error: any) {\n      this.logger.error('Emergency duplicate cleanup failed', { error: error.message });\n      throw error;\n    }\n  }\n\n  /**\n   * Bereinigt Duplikate in Regulatory Updates\n   */\n  private async cleanupRegulatoryUpdateDuplicates(): Promise<{ kept: number; removed: number }> {\n    this.logger.info('Cleaning regulatory updates duplicates...');\n\n    // Strategie: Behalte das neueste Update pro eindeutigem Titel\n    const duplicateQuery = `\n      WITH duplicate_groups AS (\n        SELECT \n          id,\n          title,\n          published_at,\n          ROW_NUMBER() OVER (\n            PARTITION BY LOWER(TRIM(title)) \n            ORDER BY published_at DESC, created_at DESC\n          ) as row_num\n        FROM regulatory_updates\n        WHERE title IS NOT NULL AND TRIM(title) != ''\n      ),\n      duplicates_to_delete AS (\n        SELECT id FROM duplicate_groups WHERE row_num > 1\n      )\n      DELETE FROM regulatory_updates \n      WHERE id IN (SELECT id FROM duplicates_to_delete)\n    `;\n\n    const result = await sql(duplicateQuery);\n    const removed = Array.isArray(result) ? result.length : 0;\n\n    // Aktuelle Anzahl nach Bereinigung\n    const remaining = await sql`SELECT COUNT(*) as count FROM regulatory_updates`;\n    const kept = parseInt(remaining[0]?.count || '0');\n\n    this.logger.info('Regulatory updates cleanup completed', { kept, removed });\n    return { kept, removed };\n  }\n\n  /**\n   * Bereinigt Duplikate in Legal Cases\n   */\n  private async cleanupLegalCaseDuplicates(): Promise<{ kept: number; removed: number }> {\n    this.logger.info('Cleaning legal cases duplicates...');\n\n    // Strategie: Behalte den neuesten Case pro eindeutigem Titel\n    const duplicateQuery = `\n      WITH duplicate_groups AS (\n        SELECT \n          id,\n          title,\n          decision_date,\n          ROW_NUMBER() OVER (\n            PARTITION BY LOWER(TRIM(title)) \n            ORDER BY decision_date DESC, created_at DESC\n          ) as row_num\n        FROM legal_cases\n        WHERE title IS NOT NULL AND TRIM(title) != ''\n      ),\n      duplicates_to_delete AS (\n        SELECT id FROM duplicate_groups WHERE row_num > 1\n      )\n      DELETE FROM legal_cases \n      WHERE id IN (SELECT id FROM duplicates_to_delete)\n    `;\n\n    const result = await sql(duplicateQuery);\n    const removed = Array.isArray(result) ? result.length : 0;\n\n    // Aktuelle Anzahl nach Bereinigung\n    const remaining = await sql`SELECT COUNT(*) as count FROM legal_cases`;\n    const kept = parseInt(remaining[0]?.count || '0');\n\n    this.logger.info('Legal cases cleanup completed', { kept, removed });\n    return { kept, removed };\n  }\n\n  /**\n   * Analysiert aktuelle Duplikate-Situation\n   */\n  async getDuplicateStats(): Promise<{\n    totalRegulatory: number;\n    uniqueRegulatory: number;\n    totalLegal: number;\n    uniqueLegal: number;\n    uniquenessRatio: number;\n  }> {\n    const [regulatoryStats, legalStats] = await Promise.all([\n      sql`SELECT \n        COUNT(*) as total_count,\n        COUNT(DISTINCT LOWER(TRIM(title))) as unique_count\n      FROM regulatory_updates\n      WHERE title IS NOT NULL AND TRIM(title) != ''`,\n      sql`SELECT \n        COUNT(*) as total_count,\n        COUNT(DISTINCT LOWER(TRIM(title))) as unique_count\n      FROM legal_cases\n      WHERE title IS NOT NULL AND TRIM(title) != ''`\n    ]);\n\n    const totalRegulatory = parseInt(regulatoryStats[0]?.total_count || '0');\n    const uniqueRegulatory = parseInt(regulatoryStats[0]?.unique_count || '0');\n    const totalLegal = parseInt(legalStats[0]?.total_count || '0');\n    const uniqueLegal = parseInt(legalStats[0]?.unique_count || '0');\n\n    const totalRecords = totalRegulatory + totalLegal;\n    const uniqueRecords = uniqueRegulatory + uniqueLegal;\n    const uniquenessRatio = totalRecords > 0 ? uniqueRecords / totalRecords : 0;\n\n    return {\n      totalRegulatory,\n      uniqueRegulatory,\n      totalLegal,\n      uniqueLegal,\n      uniquenessRatio\n    };\n  }\n\n  /**\n   * Erstellt Duplikate-Bereinigungsbericht\n   */\n  async generateCleanupReport(): Promise<any> {\n    const stats = await this.getDuplicateStats();\n    const duplicateRatio = stats.totalRegulatory > 0 ? \n      ((stats.totalRegulatory - stats.uniqueRegulatory) / stats.totalRegulatory * 100) : 0;\n\n    return {\n      currentStats: stats,\n      duplicatePercentage: Math.round(duplicateRatio * 100) / 100,\n      recommendedAction: duplicateRatio > 10 ? 'IMMEDIATE_CLEANUP_REQUIRED' : 'MONITORING',\n      qualityScore: Math.round((stats.uniquenessRatio * 100) * 100) / 100,\n      generatedAt: new Date().toISOString()\n    };\n  }\n}\n\nexport const duplicateCleanupService = new DuplicateCleanupService();"]}