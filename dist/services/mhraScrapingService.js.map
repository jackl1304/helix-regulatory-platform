{"version":3,"file":"mhraScrapingService.js","sourceRoot":"","sources":["../../server/services/mhraScrapingService.ts"],"names":[],"mappings":"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","sourcesContent":["import { storage } from '../storage';\nimport { nlpService } from './nlpService';\nimport type { InsertRegulatoryUpdate } from '@shared/schema';\n\ninterface MHRADevice {\n  registrationNumber: string;\n  deviceName: string;\n  manufacturer: string;\n  deviceClass: string;\n  registrationDate: string;\n  status: string;\n  intendedPurpose?: string;\n  category?: string;\n}\n\ninterface MHRASafetyAlert {\n  alertNumber: string;\n  title: string;\n  deviceType: string;\n  manufacturer: string;\n  alertLevel: 'high' | 'medium' | 'low';\n  description: string;\n  actionRequired: string;\n  publishedDate: string;\n  affectedProducts: string[];\n}\n\nexport class MHRAScrapingService {\n  private baseUrl = 'https://www.gov.uk';\n  private deviceRegistrationUrl = 'https://mhrabpm.appiancloud.com';\n  \n  constructor() {\n    // Initialize with rate limiting\n    this.rateLimitDelay = 2000; // 2 seconds between requests for web scraping\n  }\n\n  private rateLimitDelay: number;\n\n  private async delay(ms: number): Promise<void> {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n\n  async collectMHRADeviceRegistrations(): Promise<void> {\n    try {\n      console.log('[MHRA Scraper] Starting device registration collection...');\n      \n      // Note: This is a demonstration implementation\n      // Real implementation would require authentication and proper scraping\n      const mockDevices = this.generateMockMHRADevices();\n      \n      for (const device of mockDevices) {\n        await this.processMHRADevice(device);\n        await this.delay(this.rateLimitDelay);\n      }\n      \n      console.log(`[MHRA Scraper] Device registration collection completed: ${mockDevices.length} devices`);\n    } catch (error) {\n      console.error('[MHRA Scraper] Error collecting device registrations:', error);\n      throw error;\n    }\n  }\n\n  async collectMHRASafetyAlerts(): Promise<void> {\n    try {\n      console.log('[MHRA Scraper] Starting safety alerts collection...');\n      \n      const alertsUrl = `${this.baseUrl}/drug-device-alerts`;\n      \n      // Note: This would require actual web scraping implementation\n      const mockAlerts = this.generateMockSafetyAlerts();\n      \n      for (const alert of mockAlerts) {\n        await this.processSafetyAlert(alert);\n        await this.delay(this.rateLimitDelay);\n      }\n      \n      console.log(`[MHRA Scraper] Safety alerts collection completed: ${mockAlerts.length} alerts`);\n    } catch (error) {\n      console.error('[MHRA Scraper] Error collecting safety alerts:', error);\n      throw error;\n    }\n  }\n\n  private async processMHRADevice(device: MHRADevice): Promise<void> {\n    try {\n      const content = this.formatDeviceContent(device);\n      const categories = await nlpService.categorizeContent(content);\n      const sourceId = await this.getMHRASourceId();\n\n      const regulatoryUpdate: InsertRegulatoryUpdate = {\n        title: `MHRA Device Registration: ${device.deviceName}`,\n        content,\n        sourceId,\n        sourceUrl: `${this.deviceRegistrationUrl}/device/${device.registrationNumber}`,\n        region: 'UK',\n        updateType: 'registration',\n        priority: this.determineDevicePriority(device),\n        deviceClasses: [device.deviceClass],\n        categories: categories.categories,\n        rawData: device,\n        publishedAt: new Date(device.registrationDate),\n      };\n      \n      await storage.createRegulatoryUpdate(regulatoryUpdate);\n      console.log(`[MHRA Scraper] Created device registration: ${device.deviceName}`);\n    } catch (error) {\n      console.error('[MHRA Scraper] Error processing device:', error);\n    }\n  }\n\n  private async processSafetyAlert(alert: MHRASafetyAlert): Promise<void> {\n    try {\n      const content = this.formatAlertContent(alert);\n      const categories = await nlpService.categorizeContent(content);\n      const sourceId = await this.getMHRASourceId();\n\n      const regulatoryUpdate: InsertRegulatoryUpdate = {\n        title: `MHRA Safety Alert: ${alert.title}`,\n        content,\n        sourceId,\n        sourceUrl: `${this.baseUrl}/drug-device-alerts/${alert.alertNumber}`,\n        region: 'UK',\n        updateType: 'safety_alert',\n        priority: alert.alertLevel,\n        deviceClasses: [alert.deviceType],\n        categories: [...categories.categories, 'Safety Alert'],\n        rawData: alert,\n        publishedAt: new Date(alert.publishedDate),\n      };\n      \n      await storage.createRegulatoryUpdate(regulatoryUpdate);\n      console.log(`[MHRA Scraper] Created safety alert: ${alert.title}`);\n    } catch (error) {\n      console.error('[MHRA Scraper] Error processing safety alert:', error);\n    }\n  }\n\n  private formatDeviceContent(device: MHRADevice): string {\n    const parts = [\n      `Device Name: ${device.deviceName}`,\n      `Manufacturer: ${device.manufacturer}`,\n      `Device Class: ${device.deviceClass}`,\n      `Registration Number: ${device.registrationNumber}`,\n      `Status: ${device.status}`,\n      `Registration Date: ${device.registrationDate}`\n    ];\n\n    if (device.intendedPurpose) {\n      parts.push(`Intended Purpose: ${device.intendedPurpose}`);\n    }\n\n    if (device.category) {\n      parts.push(`Category: ${device.category}`);\n    }\n\n    return parts.join('\\n');\n  }\n\n  private formatAlertContent(alert: MHRASafetyAlert): string {\n    const parts = [\n      `Alert Number: ${alert.alertNumber}`,\n      `Device Type: ${alert.deviceType}`,\n      `Manufacturer: ${alert.manufacturer}`,\n      `Alert Level: ${alert.alertLevel.toUpperCase()}`,\n      `Description: ${alert.description}`,\n      `Action Required: ${alert.actionRequired}`\n    ];\n\n    if (alert.affectedProducts.length > 0) {\n      parts.push(`Affected Products: ${alert.affectedProducts.join(', ')}`);\n    }\n\n    return parts.join('\\n');\n  }\n\n  private determineDevicePriority(device: MHRADevice): 'high' | 'medium' | 'low' {\n    if (device.deviceClass === 'Class III' || device.deviceClass === 'Class IIb') {\n      return 'high';\n    }\n    if (device.deviceClass === 'Class IIa') {\n      return 'medium';\n    }\n    return 'low';\n  }\n\n  private async getMHRASourceId(): Promise<string> {\n    try {\n      const sources = await storage.getAllDataSources();\n      const mhraSource = sources.find(s => s.id === 'mhra_guidance' || s.name?.includes('MHRA'));\n      return mhraSource?.id || 'mhra_guidance';\n    } catch (error) {\n      console.error('Error getting MHRA source ID:', error);\n      return 'mhra_guidance';\n    }\n  }\n\n  // Mock data generators for demonstration\n  private generateMockMHRADevices(): MHRADevice[] {\n    return [\n      {\n        registrationNumber: 'GB-MF-000012345',\n        deviceName: 'Advanced Cardiac Monitor System',\n        manufacturer: 'CardioTech Ltd',\n        deviceClass: 'Class IIb',\n        registrationDate: '2024-12-15',\n        status: 'Active',\n        intendedPurpose: 'Continuous cardiac monitoring for ICU patients',\n        category: 'Monitoring Equipment'\n      },\n      {\n        registrationNumber: 'GB-MF-000012346',\n        deviceName: 'Surgical Navigation System',\n        manufacturer: 'SurgiPrecision UK',\n        deviceClass: 'Class III',\n        registrationDate: '2024-12-10',\n        status: 'Active',\n        intendedPurpose: 'Real-time surgical guidance for neurosurgery',\n        category: 'Surgical Equipment'\n      },\n      {\n        registrationNumber: 'GB-MF-000012347',\n        deviceName: 'Digital Blood Pressure Monitor',\n        manufacturer: 'HealthMonitor Solutions',\n        deviceClass: 'Class IIa',\n        registrationDate: '2024-12-05',\n        status: 'Active',\n        intendedPurpose: 'Non-invasive blood pressure measurement',\n        category: 'Diagnostic Equipment'\n      }\n    ];\n  }\n\n  private generateMockSafetyAlerts(): MHRASafetyAlert[] {\n    return [\n      {\n        alertNumber: 'MDA/2024/045',\n        title: 'Cybersecurity Vulnerability in Implantable Cardiac Devices',\n        deviceType: 'Implantable Cardiac Devices',\n        manufacturer: 'Multiple Manufacturers',\n        alertLevel: 'high',\n        description: 'Critical cybersecurity vulnerability identified in communication protocols of certain implantable cardiac devices',\n        actionRequired: 'Immediate software update required. Contact manufacturer for update procedure.',\n        publishedDate: '2024-12-20',\n        affectedProducts: ['Model ICD-2024', 'Model PM-Advanced', 'Model CRT-Pro']\n      },\n      {\n        alertNumber: 'MDA/2024/046',\n        title: 'Battery Malfunction in Portable Ventilators',\n        deviceType: 'Portable Ventilators',\n        manufacturer: 'VentCare Systems',\n        alertLevel: 'medium',\n        description: 'Reports of unexpected battery drain in specific lot numbers of portable ventilators',\n        actionRequired: 'Check lot numbers and replace affected batteries. Monitor battery performance closely.',\n        publishedDate: '2024-12-18',\n        affectedProducts: ['Model PortaVent-300', 'Model PortaVent-400']\n      }\n    ];\n  }\n}\n\nexport const mhraScrapingService = new MHRAScrapingService();"]}