{"version":3,"file":"enhancedFdaOpenApiService.js","sourceRoot":"","sources":["../../server/services/enhancedFdaOpenApiService.ts"],"names":[],"mappings":"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","sourcesContent":["import { storage } from '../storage';\nimport { nlpService } from './nlpService';\nimport type { InsertRegulatoryUpdate } from '@shared/schema';\n\ninterface FDADevice {\n  k_number?: string;\n  device_name?: string;\n  applicant?: string;\n  date_received?: string;\n  decision_date?: string;\n  decision?: string;\n  review_advisory_committee?: string;\n  product_code?: string;\n  regulation_number?: string;\n  clearance_type?: string;\n  third_party_flag?: string;\n  expedited_review_flag?: string;\n  statement_or_summary?: string;\n  type?: string;\n  openfda?: {\n    device_name?: string;\n    medical_specialty_description?: string;\n    regulation_number?: string;\n    device_class?: string;\n    fei_number?: string[];\n    registration_number?: string[];\n  };\n}\n\ninterface FDARecall {\n  recall_number?: string;\n  reason_for_recall?: string;\n  status?: string;\n  distribution_pattern?: string;\n  product_description?: string;\n  code_info?: string;\n  product_quantity?: string;\n  recall_initiation_date?: string;\n  state?: string;\n  event_id?: string;\n  product_type?: string;\n  more_code_info?: string;\n  recalling_firm?: string;\n  address_1?: string;\n  address_2?: string;\n  city?: string;\n  state_code?: string;\n  postal_code?: string;\n  country?: string;\n  voluntary_mandated?: string;\n  classification?: string;\n  openfda?: {\n    device_name?: string;\n    medical_specialty_description?: string;\n    regulation_number?: string;\n    device_class?: string;\n    fei_number?: string[];\n    registration_number?: string[];\n  };\n}\n\nexport class EnhancedFDAOpenAPIService {\n  private baseUrl = 'https://api.fda.gov';\n  private rateLimitDelay = 1000; // 1 second between requests\n\n  private async delay(ms: number): Promise<void> {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n\n  private async makeRequest(endpoint: string): Promise<any> {\n    try {\n      console.log(`[Enhanced FDA API] Requesting: ${endpoint}`);\n      \n      const response = await fetch(endpoint);\n      \n      if (!response.ok) {\n        throw new Error(`FDA API error: ${response.status} ${response.statusText}`);\n      }\n      \n      const data = await response.json();\n      \n      // Rate limiting\n      await this.delay(this.rateLimitDelay);\n      \n      return data;\n    } catch (error) {\n      console.error(`[Enhanced FDA API] Request failed:`, error);\n      throw error;\n    }\n  }\n\n  async collect510kDevices(limit: number = 100): Promise<void> {\n    try {\n      console.log(`[Enhanced FDA API] Collecting 510(k) devices (limit: ${limit})`);\n      \n      const endpoint = `${this.baseUrl}/device/510k.json?limit=${limit}&sort=date_received:desc`;\n      const data = await this.makeRequest(endpoint);\n      \n      if (!data.results || !Array.isArray(data.results)) {\n        throw new Error('Invalid FDA 510k response format');\n      }\n      \n      console.log(`[Enhanced FDA API] Found ${data.results.length} 510(k) devices`);\n      \n      for (const device of data.results as FDADevice[]) {\n        await this.process510kDevice(device);\n      }\n      \n      console.log(`[Enhanced FDA API] 510(k) collection completed`);\n    } catch (error) {\n      console.error('[Enhanced FDA API] Error collecting 510k devices:', error);\n      throw error;\n    }\n  }\n\n  private async process510kDevice(device: FDADevice): Promise<void> {\n    try {\n      const content = this.formatDeviceContent(device);\n      const categories = await nlpService.categorizeContent(content);\n      const sourceId = await this.getFDASourceId();\n\n      const regulatoryUpdate: InsertRegulatoryUpdate = {\n        title: `FDA 510(k): ${device.device_name || 'Unknown Device'}${device.k_number ? ` (${device.k_number})` : ''}`,\n        content,\n        sourceId,\n        sourceUrl: device.k_number ? `https://www.accessdata.fda.gov/scripts/cdrh/cfdocs/cfpmn/pmn.cfm?ID=${device.k_number}` : '',\n        region: 'US',\n        updateType: 'approval',\n        priority: this.determinePriority(device),\n        deviceClasses: device.openfda?.device_class ? [device.openfda.device_class] : [],\n        categories: categories.categories,\n        rawData: device,\n        publishedAt: this.parseDate(device.date_received) || new Date(),\n      };\n      \n      await storage.createRegulatoryUpdate(regulatoryUpdate);\n      console.log(`[Enhanced FDA API] Successfully created regulatory update: ${regulatoryUpdate.title}`);\n    } catch (error) {\n      console.error('[Enhanced FDA API] Error processing 510k device:', error);\n    }\n  }\n\n  async collectRecalls(limit: number = 100): Promise<void> {\n    try {\n      console.log(`[Enhanced FDA API] Collecting device recalls (limit: ${limit})`);\n      \n      const endpoint = `${this.baseUrl}/device/recall.json?limit=${limit}&sort=recall_initiation_date:desc`;\n      const data = await this.makeRequest(endpoint);\n      \n      if (!data.results || !Array.isArray(data.results)) {\n        throw new Error('Invalid FDA recall response format');\n      }\n      \n      console.log(`[Enhanced FDA API] Found ${data.results.length} recalls`);\n      \n      for (const recall of data.results as FDARecall[]) {\n        await this.processRecall(recall);\n      }\n      \n      console.log(`[Enhanced FDA API] Recall collection completed`);\n    } catch (error) {\n      console.error('[Enhanced FDA API] Error collecting recalls:', error);\n      throw error;\n    }\n  }\n\n  private async processRecall(recall: FDARecall): Promise<void> {\n    try {\n      const content = this.formatRecallContent(recall);\n      const categories = await nlpService.categorizeContent(content);\n      const sourceId = await this.getFDASourceId();\n\n      const regulatoryUpdate: InsertRegulatoryUpdate = {\n        title: `FDA Recall: ${recall.product_description || 'Medical Device Recall'}`,\n        content,\n        sourceId,\n        sourceUrl: recall.recall_number ? `https://www.fda.gov/medical-devices/medical-device-recalls/${recall.recall_number}` : '',\n        region: 'US',\n        updateType: 'recall',\n        priority: this.determineRecallPriority(recall),\n        deviceClasses: recall.openfda?.device_class ? [recall.openfda.device_class] : [],\n        categories: categories.categories,\n        rawData: recall,\n        publishedAt: this.parseDate(recall.recall_initiation_date) || new Date(),\n      };\n      \n      await storage.createRegulatoryUpdate(regulatoryUpdate);\n      console.log(`[Enhanced FDA API] Successfully created recall update: ${regulatoryUpdate.title}`);\n    } catch (error) {\n      console.error('[Enhanced FDA API] Error processing recall:', error);\n    }\n  }\n\n  private formatDeviceContent(device: FDADevice): string {\n    const parts = [];\n    \n    if (device.device_name) parts.push(`Device: ${device.device_name}`);\n    if (device.applicant) parts.push(`Applicant: ${device.applicant}`);\n    if (device.decision) parts.push(`Decision: ${device.decision}`);\n    if (device.statement_or_summary) parts.push(`Summary: ${device.statement_or_summary}`);\n    if (device.review_advisory_committee) parts.push(`Review Committee: ${device.review_advisory_committee}`);\n    if (device.product_code) parts.push(`Product Code: ${device.product_code}`);\n    if (device.regulation_number) parts.push(`Regulation: ${device.regulation_number}`);\n    if (device.openfda?.device_class) parts.push(`Device Class: ${device.openfda.device_class}`);\n    if (device.openfda?.medical_specialty_description) parts.push(`Medical Specialty: ${device.openfda.medical_specialty_description}`);\n\n    return parts.join('\\n');\n  }\n\n  private formatRecallContent(recall: FDARecall): string {\n    const parts = [];\n    \n    if (recall.product_description) parts.push(`Product: ${recall.product_description}`);\n    if (recall.reason_for_recall) parts.push(`Reason: ${recall.reason_for_recall}`);\n    if (recall.recalling_firm) parts.push(`Recalling Firm: ${recall.recalling_firm}`);\n    if (recall.distribution_pattern) parts.push(`Distribution: ${recall.distribution_pattern}`);\n    if (recall.product_quantity) parts.push(`Quantity: ${recall.product_quantity}`);\n    if (recall.classification) parts.push(`Classification: ${recall.classification}`);\n    if (recall.voluntary_mandated) parts.push(`Type: ${recall.voluntary_mandated}`);\n    if (recall.status) parts.push(`Status: ${recall.status}`);\n\n    return parts.join('\\n');\n  }\n\n  private determinePriority(device: FDADevice): 'high' | 'medium' | 'low' {\n    if (device.openfda?.device_class === 'Class III' || device.expedited_review_flag === 'Y') {\n      return 'high';\n    }\n    if (device.openfda?.device_class === 'Class II') {\n      return 'medium';\n    }\n    return 'low';\n  }\n\n  private determineRecallPriority(recall: FDARecall): 'high' | 'medium' | 'low' {\n    if (recall.classification === 'Class I') {\n      return 'high';\n    }\n    if (recall.classification === 'Class II') {\n      return 'medium';\n    }\n    return 'low';\n  }\n\n  private parseDate(dateString?: string): Date | null {\n    if (!dateString) return null;\n    try {\n      return new Date(dateString);\n    } catch {\n      return null;\n    }\n  }\n\n  private async getFDASourceId(): Promise<string> {\n    try {\n      const sources = await storage.getAllDataSources();\n      const fdaSource = sources.find(s => s.id === 'fda_510k' || s.name?.includes('FDA'));\n      return fdaSource?.id || 'fda_510k';\n    } catch (error) {\n      console.error('Error getting FDA source ID:', error);\n      return 'fda_510k';\n    }\n  }\n}\n\nexport const enhancedFdaOpenApiService = new EnhancedFDAOpenAPIService();"]}