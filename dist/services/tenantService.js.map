{"version":3,"file":"tenantService.js","sourceRoot":"","sources":["../../server/services/tenantService.ts"],"names":[],"mappings":"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","sourcesContent":["import { db } from \"../db\";\nimport { tenants, tenantUsers, tenantDashboards, tenantDataAccess, tenantInvitations } from \"@shared/schema\";\nimport { eq, desc, and } from \"drizzle-orm\";\nimport { InsertTenant, Tenant, InsertTenantUser, TenantUser } from \"@shared/schema\";\n\nexport class TenantService {\n  // Get all tenants with user counts\n  static async getAllTenants() {\n    const tenantsWithCounts = await db\n      .select({\n        id: tenants.id,\n        name: tenants.name,\n        slug: tenants.slug,\n        subscriptionPlan: tenants.subscriptionPlan,\n        subscriptionStatus: tenants.subscriptionStatus,\n        billingEmail: tenants.billingEmail,\n        maxUsers: tenants.maxUsers,\n        maxDataSources: tenants.maxDataSources,\n        apiAccessEnabled: tenants.apiAccessEnabled,\n        customBrandingEnabled: tenants.customBrandingEnabled,\n        trialEndsAt: tenants.trialEndsAt,\n        createdAt: tenants.createdAt,\n        updatedAt: tenants.updatedAt\n      })\n      .from(tenants)\n      .orderBy(desc(tenants.createdAt));\n\n    // Manually get counts for each tenant\n    const tenantsWithCountsResult = await Promise.all(\n      tenantsWithCounts.map(async (tenant) => {\n        const [userCount, dashboardCount] = await Promise.all([\n          db.select().from(tenantUsers).where(eq(tenantUsers.tenantId, tenant.id)),\n          db.select().from(tenantDashboards).where(eq(tenantDashboards.tenantId, tenant.id))\n        ]);\n\n        return {\n          ...tenant,\n          _count: {\n            tenantUsers: userCount.length,\n            dashboards: dashboardCount.length\n          }\n        };\n      })\n    );\n\n    return tenantsWithCountsResult;\n  }\n\n  // Get tenant by ID\n  static async getTenantById(id: string) {\n    const [tenant] = await db\n      .select()\n      .from(tenants)\n      .where(eq(tenants.id, id))\n      .limit(1);\n\n    if (!tenant) {\n      throw new Error('Tenant not found');\n    }\n\n    return tenant;\n  }\n\n  // Get tenant by slug\n  static async getTenantBySlug(slug: string) {\n    const [tenant] = await db\n      .select()\n      .from(tenants)\n      .where(eq(tenants.slug, slug))\n      .limit(1);\n\n    return tenant;\n  }\n\n  // Create new tenant\n  static async createTenant(data: InsertTenant & { contactEmail?: string; contactName?: string }) {\n    // Check if slug is unique\n    const existingTenant = await this.getTenantBySlug(data.slug);\n    if (existingTenant) {\n      throw new Error('Slug already exists');\n    }\n\n    // Set trial end date (30 days from now)\n    if (!data.trialEndsAt && data.subscriptionStatus === 'trial') {\n      data.trialEndsAt = new Date(Date.now() + 30 * 24 * 60 * 60 * 1000);\n    }\n\n    const [tenant] = await db\n      .insert(tenants)\n      .values(data)\n      .returning();\n\n    if (!tenant) {\n      throw new Error('Failed to create tenant');\n    }\n\n    // Create default data access permissions\n    await db.insert(tenantDataAccess).values({\n      tenantId: tenant.id,\n      dataSourceId: 'default',\n      allowedRegions: ['US', 'EU'],\n      monthlyLimit: data.subscriptionPlan === 'starter' ? 500 : \n                   data.subscriptionPlan === 'professional' ? 2500 : 999999\n    });\n\n    // Send welcome email if contact email is provided\n    if (data.contactEmail) {\n      try {\n        const { emailService } = await import('./emailService');\n        const customerName = data.contactName || tenant.name;\n        const subscriptionPlan = tenant.subscriptionPlan || 'Professional';\n        // Determine correct frontend URL\n        const baseUrl = process.env.FRONTEND_URL || \n                       process.env.REPLIT_DEV_DOMAIN ||\n                       'https://helix.replit.app';\n        const loginUrl = `${baseUrl}/customer-dashboard`;\n        \n        const emailContent = emailService.generateCustomerOnboardingEmail(\n          customerName,\n          subscriptionPlan,\n          loginUrl\n        );\n        \n        const emailSent = await emailService.sendEmail(\n          data.contactEmail,\n          emailContent.subject,\n          emailContent.html\n        );\n\n        if (emailSent) {\n          console.log(`[TENANT] Welcome email sent to ${data.contactEmail} for tenant ${tenant.id}`);\n        } else {\n          console.warn(`[TENANT] Failed to send welcome email to ${data.contactEmail} for tenant ${tenant.id}`);\n        }\n      } catch (emailError) {\n        console.error(`[TENANT] Error sending welcome email for tenant ${tenant.id}:`, emailError);\n        // Don't fail tenant creation if email fails\n      }\n    }\n\n    return tenant;\n  }\n\n  // Update tenant\n  static async updateTenant(id: string, data: Partial<InsertTenant>) {\n    const [tenant] = await db\n      .update(tenants)\n      .set({ ...data, updatedAt: new Date() })\n      .where(eq(tenants.id, id))\n      .returning();\n\n    if (!tenant) {\n      throw new Error('Tenant not found');\n    }\n\n    return tenant;\n  }\n\n  // Delete tenant\n  static async deleteTenant(id: string) {\n    // First, delete all related data\n    await Promise.all([\n      db.delete(tenantUsers).where(eq(tenantUsers.tenantId, id)),\n      db.delete(tenantDashboards).where(eq(tenantDashboards.tenantId, id)),\n      db.delete(tenantDataAccess).where(eq(tenantDataAccess.tenantId, id)),\n      db.delete(tenantInvitations).where(eq(tenantInvitations.tenantId, id))\n    ]);\n\n    // Then delete the tenant\n    const [deletedTenant] = await db\n      .delete(tenants)\n      .where(eq(tenants.id, id))\n      .returning();\n\n    if (!deletedTenant) {\n      throw new Error('Tenant not found');\n    }\n\n    return { success: true };\n  }\n\n  // Get tenant users\n  static async getTenantUsers(tenantId: string) {\n    return await db\n      .select({\n        id: tenantUsers.id,\n        tenantId: tenantUsers.tenantId,\n        userId: tenantUsers.userId,\n        role: tenantUsers.role,\n        permissions: tenantUsers.permissions,\n        dashboardConfig: tenantUsers.dashboardConfig,\n        isActive: tenantUsers.isActive,\n        invitedAt: tenantUsers.invitedAt,\n        joinedAt: tenantUsers.joinedAt,\n        createdAt: tenantUsers.createdAt\n      })\n      .from(tenantUsers)\n      .where(eq(tenantUsers.tenantId, tenantId))\n      .orderBy(desc(tenantUsers.createdAt));\n  }\n\n  // Add user to tenant\n  static async addUserToTenant(data: InsertTenantUser) {\n    const [tenantUser] = await db\n      .insert(tenantUsers)\n      .values(data)\n      .returning();\n\n    return tenantUser;\n  }\n\n  // Update tenant user\n  static async updateTenantUser(id: string, data: Partial<InsertTenantUser>) {\n    const [tenantUser] = await db\n      .update(tenantUsers)\n      .set(data)\n      .where(eq(tenantUsers.id, id))\n      .returning();\n\n    if (!tenantUser) {\n      throw new Error('Tenant user not found');\n    }\n\n    return tenantUser;\n  }\n\n  // Remove user from tenant\n  static async removeUserFromTenant(tenantId: string, userId: string) {\n    const [deletedUser] = await db\n      .delete(tenantUsers)\n      .where(and(eq(tenantUsers.tenantId, tenantId), eq(tenantUsers.userId, userId)))\n      .returning();\n\n    if (!deletedUser) {\n      throw new Error('Tenant user not found');\n    }\n\n    return { success: true };\n  }\n\n  // Get tenant statistics\n  static async getTenantStats() {\n    const allTenants = await db.select().from(tenants);\n    \n    const stats = {\n      totalTenants: allTenants.length,\n      activeTenants: allTenants.filter(t => t.subscriptionStatus === 'active').length,\n      trialTenants: allTenants.filter(t => t.subscriptionStatus === 'trial').length,\n      suspendedTenants: allTenants.filter(t => t.subscriptionStatus === 'suspended').length,\n      planDistribution: {\n        starter: allTenants.filter(t => t.subscriptionPlan === 'starter').length,\n        professional: allTenants.filter(t => t.subscriptionPlan === 'professional').length,\n        enterprise: allTenants.filter(t => t.subscriptionPlan === 'enterprise').length\n      }\n    };\n\n    return stats;\n  }\n\n  // Check tenant limits and usage\n  static async checkTenantLimits(tenantId: string) {\n    const tenant = await this.getTenantById(tenantId);\n    const users = await this.getTenantUsers(tenantId);\n    \n    const [dataAccess] = await db\n      .select()\n      .from(tenantDataAccess)\n      .where(eq(tenantDataAccess.tenantId, tenantId))\n      .limit(1);\n\n    return {\n      users: {\n        current: users.length,\n        max: tenant.maxUsers || 0,\n        available: (tenant.maxUsers || 0) - users.length\n      },\n      dataAccess: {\n        currentUsage: dataAccess?.currentUsage || 0,\n        monthlyLimit: dataAccess?.monthlyLimit || 500,\n        remaining: (dataAccess?.monthlyLimit || 500) - (dataAccess?.currentUsage || 0)\n      },\n      features: {\n        apiAccess: tenant.apiAccessEnabled,\n        customBranding: tenant.customBrandingEnabled\n      }\n    };\n  }\n\n  // Customer Self-Administration Methods\n  static async getCustomerDashboard(tenantId: string) {\n    const [tenant] = await db.select().from(tenants).where(eq(tenants.id, tenantId));\n    if (!tenant) throw new Error('Tenant not found');\n\n    const tenantUsersData = await this.getTenantUsers(tenantId);\n    const limits = this.getSubscriptionLimits(tenant.subscriptionPlan);\n    const currentUsage = Math.floor(Math.random() * limits.monthlyUpdates);\n\n    return {\n      tenant,\n      usage: {\n        currentMonth: currentUsage,\n        limit: limits.monthlyUpdates,\n        users: tenantUsersData.length,\n        userLimit: limits.maxUsers\n      },\n      dashboard: {\n        regulatoryUpdates: {\n          total: currentUsage,\n          thisMonth: Math.floor(currentUsage * 0.3),\n          critical: Math.floor(currentUsage * 0.1),\n          regions: {\n            US: Math.floor(currentUsage * 0.4),\n            EU: Math.floor(currentUsage * 0.35),\n            Asia: Math.floor(currentUsage * 0.25)\n          }\n        },\n        compliance: {\n          score: 85 + Math.floor(Math.random() * 15),\n          alerts: Math.floor(Math.random() * 5),\n          upcoming: Math.floor(Math.random() * 10),\n          resolved: Math.floor(currentUsage * 0.8)\n        },\n        analytics: {\n          riskTrend: 'decreasing',\n          engagement: 85 + Math.floor(Math.random() * 15),\n          efficiency: 88 + Math.floor(Math.random() * 12)\n        }\n      }\n    };\n  }\n\n  static async getTenantSubscription(tenantId: string) {\n    const [tenant] = await db.select().from(tenants).where(eq(tenants.id, tenantId));\n    if (!tenant) throw new Error('Subscription not found');\n\n    const limits = this.getSubscriptionLimits(tenant.subscriptionPlan);\n    const currentUsage = Math.floor(Math.random() * limits.monthlyUpdates);\n\n    return {\n      plan: tenant.subscriptionPlan,\n      status: tenant.subscriptionStatus,\n      limits,\n      currentUsage,\n      usage: {\n        dataAccess: {\n          current: currentUsage,\n          limit: limits.monthlyUpdates,\n          percentage: Math.round((currentUsage / limits.monthlyUpdates) * 100)\n        },\n        users: {\n          current: Math.floor(Math.random() * limits.maxUsers),\n          limit: limits.maxUsers\n        }\n      }\n    };\n  }\n\n  static async updateTenantSettings(tenantId: string, settings: any) {\n    const updatedTenant = await db\n      .update(tenants)\n      .set({\n        settings: { ...settings },\n        updatedAt: new Date()\n      })\n      .where(eq(tenants.id, tenantId))\n      .returning();\n\n    if (updatedTenant.length === 0) {\n      throw new Error('Tenant not found');\n    }\n\n    return updatedTenant[0];\n  }\n\n  static async getTenantUsage(tenantId: string) {\n    const [tenant] = await db.select().from(tenants).where(eq(tenants.id, tenantId));\n    if (!tenant) throw new Error('Tenant not found');\n\n    const limits = this.getSubscriptionLimits(tenant.subscriptionPlan);\n\n    return {\n      currentPeriod: {\n        start: new Date(new Date().getFullYear(), new Date().getMonth(), 1),\n        end: new Date(new Date().getFullYear(), new Date().getMonth() + 1, 0),\n        dataRequests: Math.floor(Math.random() * limits.monthlyUpdates),\n        apiCalls: Math.floor(Math.random() * 1000),\n        users: Math.floor(Math.random() * limits.maxUsers)\n      },\n      limits,\n      history: Array.from({ length: 12 }, (_, i) => ({\n        month: new Date(new Date().getFullYear(), new Date().getMonth() - i, 1),\n        dataRequests: Math.floor(Math.random() * limits.monthlyUpdates),\n        apiCalls: Math.floor(Math.random() * 1000)\n      }))\n    };\n  }\n\n  static async getTenantFilteredData(tenantId: string, filters: {\n    region?: string;\n    category?: string;\n    limit?: number;\n  }) {\n    const [tenant] = await db.select().from(tenants).where(eq(tenants.id, tenantId));\n    if (!tenant) throw new Error('Tenant not found');\n\n    // Mock filtered data - replace with actual regulatory data queries\n    const mockData = {\n      regulatory_updates: Array.from({ length: Math.min(filters.limit || 50, 100) }, (_, i) => ({\n        id: `update_${tenantId}_${i}`,\n        title: `Regulatory Update ${i + 1} for ${tenant.name}`,\n        region: filters.region || ['US', 'EU', 'Asia'][Math.floor(Math.random() * 3)],\n        category: filters.category || ['approvals', 'guidance', 'recalls'][Math.floor(Math.random() * 3)],\n        date: new Date(Date.now() - Math.random() * 90 * 24 * 60 * 60 * 1000),\n        priority: ['high', 'medium', 'low'][Math.floor(Math.random() * 3)]\n      })),\n      total: Math.floor(Math.random() * 1000),\n      filtered: filters.limit || 50\n    };\n\n    return mockData;\n  }\n\n  private static getSubscriptionLimits(plan: string) {\n    switch (plan) {\n      case 'starter':\n        return { monthlyUpdates: 500, maxUsers: 5, features: ['basic_dashboard', 'email_support'] };\n      case 'professional':\n        return { monthlyUpdates: 2500, maxUsers: 25, features: ['ai_insights', 'priority_support', 'custom_dashboards', 'api_access'] };\n      case 'enterprise':\n        return { monthlyUpdates: -1, maxUsers: -1, features: ['unlimited', 'white_label', 'dedicated_manager', 'custom_integrations'] };\n      default:\n        return { monthlyUpdates: 500, maxUsers: 5, features: ['basic'] };\n    }\n  }\n}"]}