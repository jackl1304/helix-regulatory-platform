{"version":3,"file":"crossReferenceService.js","sourceRoot":"","sources":["../../server/services/crossReferenceService.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,OAAO,EAAE,MAAM,YAAY,CAAC;AAkCrC,MAAM,OAAO,qBAAqB;IAAlC;QACU,qBAAgB,GAAG,IAAI,CAAC;IAgZlC,CAAC;IA9YS,KAAK,CAAC,mBAAmB,CAAC,IAAY,EAAE,IAAY;QAC1D,MAAM,SAAS,GAAG,CAAC,CAAS,EAAE,EAAE,CAAC,CAAC,CAAC,WAAW,EAAE;aAC7C,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC;aACvB,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC;aACpB,IAAI,EAAE,CAAC;QAEV,MAAM,EAAE,GAAG,SAAS,CAAC,IAAI,CAAC,CAAC;QAC3B,MAAM,EAAE,GAAG,SAAS,CAAC,IAAI,CAAC,CAAC;QAE3B,IAAI,EAAE,KAAK,EAAE;YAAE,OAAO,GAAG,CAAC;QAG1B,MAAM,MAAM,GAAG,IAAI,GAAG,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;QACtC,MAAM,MAAM,GAAG,IAAI,GAAG,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;QAEtC,MAAM,YAAY,GAAG,IAAI,GAAG,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACrE,MAAM,KAAK,GAAG,IAAI,GAAG,CAAC,CAAC,GAAG,MAAM,EAAE,GAAG,MAAM,CAAC,CAAC,CAAC;QAE9C,OAAO,YAAY,CAAC,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC;IACxC,CAAC;IAEO,8BAA8B,CAAC,OAAe;QAEpD,MAAM,QAAQ,GAAG;YACf,+BAA+B;YAC/B,4BAA4B;YAC5B,0BAA0B;YAC1B,0BAA0B;SAC3B,CAAC;QAEF,KAAK,MAAM,OAAO,IAAI,QAAQ,EAAE,CAAC;YAC/B,MAAM,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;YACrC,IAAI,KAAK,IAAI,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC;gBACtB,OAAO,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;YACzB,CAAC;QACH,CAAC;QAED,OAAO,IAAI,CAAC;IACd,CAAC;IAEO,0BAA0B,CAAC,KAAa;QAE9C,MAAM,UAAU,GAAG,KAAK;aACrB,OAAO,CAAC,yCAAyC,EAAE,EAAE,CAAC;aACtD,OAAO,CAAC,gCAAgC,EAAE,EAAE,CAAC;aAC7C,OAAO,CAAC,2CAA2C,EAAE,EAAE,CAAC,CAAC;QAE5D,OAAO,UAAU,CAAC,IAAI,EAAE,IAAI,IAAI,CAAC;IACnC,CAAC;IAED,KAAK,CAAC,8BAA8B;QAClC,IAAI,CAAC;YACH,OAAO,CAAC,GAAG,CAAC,0DAA0D,CAAC,CAAC;YAExE,MAAM,UAAU,GAAG,MAAM,OAAO,CAAC,uBAAuB,EAAE,CAAC;YAC3D,MAAM,cAAc,GAAoB,EAAE,CAAC;YAC3C,MAAM,SAAS,GAAG,IAAI,GAAG,EAAU,CAAC;YAGpC,MAAM,YAAY,GAA0B,EAAE,CAAC;YAE/C,KAAK,MAAM,MAAM,IAAI,UAAU,EAAE,CAAC;gBAChC,IAAI,SAAS,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC;oBAAE,SAAS;gBAEvC,MAAM,UAAU,GAAG,IAAI,CAAC,0BAA0B,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;gBACjE,MAAM,YAAY,GAAG,IAAI,CAAC,8BAA8B,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;gBAEzE,IAAI,CAAC,UAAU,IAAI,CAAC,YAAY;oBAAE,SAAS;gBAE3C,MAAM,QAAQ,GAAG,GAAG,YAAY,IAAI,SAAS,IAAI,UAAU,IAAI,SAAS,EAAE,CAAC;gBAE3E,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,EAAE,CAAC;oBAC5B,YAAY,CAAC,QAAQ,CAAC,GAAG,EAAE,CAAC;gBAC9B,CAAC;gBACD,YAAY,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YACtC,CAAC;YAGD,KAAK,MAAM,CAAC,QAAQ,EAAE,OAAO,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,YAAY,CAAC,EAAE,CAAC;gBAC/D,IAAI,OAAO,CAAC,MAAM,GAAG,CAAC;oBAAE,SAAS;gBAEjC,MAAM,WAAW,GAAG,IAAI,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;gBAC3D,IAAI,WAAW,CAAC,IAAI,GAAG,CAAC;oBAAE,SAAS;gBAGnC,IAAI,eAAe,GAAG,CAAC,CAAC;gBACxB,IAAI,WAAW,GAAG,CAAC,CAAC;gBAEpB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;oBACxC,KAAK,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;wBAC5C,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,mBAAmB,CAC/C,OAAO,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,GAAG,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,EAC3C,OAAO,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,GAAG,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,CAC5C,CAAC;wBACF,eAAe,IAAI,UAAU,CAAC;wBAC9B,WAAW,EAAE,CAAC;oBAChB,CAAC;gBACH,CAAC;gBAED,MAAM,iBAAiB,GAAG,WAAW,GAAG,CAAC,CAAC,CAAC,CAAC,eAAe,GAAG,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC;gBAE9E,IAAI,iBAAiB,IAAI,IAAI,CAAC,gBAAgB,EAAE,CAAC;oBAC/C,MAAM,OAAO,GAAkB;wBAC7B,SAAS,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC,EAAE;wBACxB,UAAU,EAAE,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC;wBAC3C,WAAW,EAAE,cAAc;wBAC3B,UAAU,EAAE,iBAAiB;wBAC7B,WAAW,EAAE,IAAI,IAAI,EAAE;qBACxB,CAAC;oBAEF,cAAc,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;oBAC7B,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;gBAC5C,CAAC;YACH,CAAC;YAED,OAAO,CAAC,GAAG,CAAC,sBAAsB,cAAc,CAAC,MAAM,kBAAkB,CAAC,CAAC;YAC3E,OAAO,cAAc,CAAC;QACxB,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,CAAC,KAAK,CAAC,mCAAmC,EAAE,KAAK,CAAC,CAAC;YAC1D,MAAM,KAAK,CAAC;QACd,CAAC;IACH,CAAC;IAED,KAAK,CAAC,0BAA0B,CAAC,QAAgB;QAC/C,IAAI,CAAC;YACH,OAAO,CAAC,GAAG,CAAC,yDAAyD,QAAQ,EAAE,CAAC,CAAC;YAEjF,MAAM,UAAU,GAAG,MAAM,OAAO,CAAC,uBAAuB,EAAE,CAAC;YAC3D,MAAM,YAAY,GAAG,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,KAAK,QAAQ,CAAC,CAAC;YAE7D,IAAI,CAAC,YAAY,EAAE,CAAC;gBAClB,OAAO,CAAC,GAAG,CAAC,gCAAgC,QAAQ,EAAE,CAAC,CAAC;gBACxD,OAAO,IAAI,CAAC;YACd,CAAC;YAGD,MAAM,UAAU,GAAG,IAAI,CAAC,0BAA0B,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;YACvE,MAAM,YAAY,GAAG,IAAI,CAAC,8BAA8B,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC;YAE/E,MAAM,cAAc,GAAG,EAAE,CAAC;YAE1B,KAAK,MAAM,MAAM,IAAI,UAAU,EAAE,CAAC;gBAChC,IAAI,MAAM,CAAC,EAAE,KAAK,QAAQ,EAAE,CAAC;oBAC3B,cAAc,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;oBAC5B,SAAS;gBACX,CAAC;gBAED,MAAM,gBAAgB,GAAG,IAAI,CAAC,0BAA0B,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;gBACvE,MAAM,kBAAkB,GAAG,IAAI,CAAC,8BAA8B,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;gBAG/E,MAAM,WAAW,GAAG,UAAU,IAAI,gBAAgB,CAAC,CAAC;oBAClD,MAAM,IAAI,CAAC,mBAAmB,CAAC,UAAU,EAAE,gBAAgB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBACnE,MAAM,iBAAiB,GAAG,YAAY,IAAI,kBAAkB,CAAC,CAAC;oBAC5D,MAAM,IAAI,CAAC,mBAAmB,CAAC,YAAY,EAAE,kBAAkB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBAEvE,IAAI,CAAC,WAAW,IAAI,WAAW,GAAG,GAAG,CAAC,IAAI,CAAC,iBAAiB,IAAI,iBAAiB,GAAG,GAAG,CAAC,EAAE,CAAC;oBACzF,cAAc,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;gBAC9B,CAAC;YACH,CAAC;YAGD,MAAM,cAAc,GAAoB,cAAc,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;gBACpE,IAAI,EAAE,IAAI,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC;gBACnC,KAAK,EAAE,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,IAAI,CAAC;gBACxC,SAAS,EAAE,MAAM,CAAC,SAAS;gBAC3B,MAAM,EAAE,MAAM,CAAC,MAAM,IAAI,SAAS;gBAClC,SAAS,EAAE,CAAC,MAAM,CAAC,EAAE,CAAC;gBACtB,MAAM,EAAE,MAAM,CAAC,QAAQ,KAAK,UAAU,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC;oBACzC,MAAM,CAAC,QAAQ,KAAK,MAAM,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,KAAK;aACtD,CAAC,CAAC,CAAC;YAGJ,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC;YAEnE,MAAM,QAAQ,GAAuB;gBACnC,QAAQ;gBACR,QAAQ,EAAE,cAAc;gBACxB,YAAY,EAAE,YAAY,CAAC,MAAM;gBACjC,aAAa,EAAE,IAAI,CAAC,sBAAsB,CAAC,cAAc,CAAC;aAC3D,CAAC;YAEF,OAAO,CAAC,GAAG,CAAC,sCAAsC,cAAc,CAAC,MAAM,SAAS,CAAC,CAAC;YAClF,OAAO,QAAQ,CAAC;QAClB,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,CAAC,KAAK,CAAC,uCAAuC,EAAE,KAAK,CAAC,CAAC;YAC9D,OAAO,IAAI,CAAC;QACd,CAAC;IACH,CAAC;IAEO,eAAe,CAAC,IAAY;QAClC,MAAM,QAAQ,GAA2B;YACvC,sBAAsB,EAAE,sBAAsB;YAC9C,kBAAkB,EAAE,qBAAqB;YACzC,mBAAmB,EAAE,eAAe;YACpC,SAAS,EAAE,qBAAqB;YAChC,4BAA4B,EAAE,cAAc;YAC5C,wBAAwB,EAAE,eAAe;YACzC,gBAAgB,EAAE,mBAAmB;YACrC,YAAY,EAAE,oBAAoB;SACnC,CAAC;QAEF,OAAO,QAAQ,CAAC,IAAI,CAAC,IAAI,mBAAmB,CAAC;IAC/C,CAAC;IAEO,sBAAsB,CAAC,MAAuB;QACpD,IAAI,MAAM,CAAC,MAAM,KAAK,CAAC;YAAE,OAAO,SAAS,CAAC;QAE1C,MAAM,WAAW,GAAG,MAAM,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;QAE9C,IAAI,WAAW,CAAC,KAAK,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,WAAW,CAAC,KAAK,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE,CAAC;YACjF,OAAO,qBAAqB,CAAC;QAC/B,CAAC;QAED,IAAI,WAAW,CAAC,KAAK,CAAC,QAAQ,CAAC,UAAU,CAAC,IAAI,WAAW,CAAC,KAAK,CAAC,QAAQ,CAAC,WAAW,CAAC,EAAE,CAAC;YACtF,OAAO,UAAU,CAAC;QACpB,CAAC;QAED,IAAI,WAAW,CAAC,KAAK,CAAC,QAAQ,CAAC,cAAc,CAAC,EAAE,CAAC;YAC/C,OAAO,YAAY,CAAC;QACtB,CAAC;QAED,OAAO,QAAQ,CAAC;IAClB,CAAC;IAED,KAAK,CAAC,yBAAyB;QAC7B,IAAI,CAAC;YACH,OAAO,CAAC,GAAG,CAAC,6CAA6C,CAAC,CAAC;YAE3D,MAAM,UAAU,GAAG,MAAM,OAAO,CAAC,uBAAuB,EAAE,CAAC;YAC3D,MAAM,gBAAgB,GAAsB,EAAE,CAAC;YAG/C,MAAM,cAAc,GAAG;gBACrB;oBACE,EAAE,EAAE,gBAAgB;oBACpB,IAAI,EAAE,4BAA4B;oBAClC,QAAQ,EAAE,CAAC,oBAAoB,EAAE,KAAK,EAAE,WAAW,CAAC;oBACpD,WAAW,EAAE,CAAC,QAAQ,EAAE,SAAS,EAAE,YAAY,CAAC;oBAChD,UAAU,EAAE,CAAC,qBAAqB,CAAC;iBACpC;gBACD;oBACE,EAAE,EAAE,WAAW;oBACf,IAAI,EAAE,uBAAuB;oBAC7B,QAAQ,EAAE,CAAC,kBAAkB,EAAE,uBAAuB,EAAE,WAAW,CAAC;oBACpE,WAAW,EAAE,CAAC,gBAAgB,EAAE,sBAAsB,CAAC;oBACvD,UAAU,EAAE,CAAC,qBAAqB,EAAE,iBAAiB,CAAC;iBACvD;gBACD;oBACE,EAAE,EAAE,gBAAgB;oBACpB,IAAI,EAAE,iBAAiB;oBACvB,QAAQ,EAAE,CAAC,iBAAiB,EAAE,eAAe,EAAE,WAAW,CAAC;oBAC3D,WAAW,EAAE,CAAC,mBAAmB,EAAE,qBAAqB,CAAC;oBACzD,UAAU,EAAE,CAAC,qBAAqB,CAAC;iBACpC;gBACD;oBACE,EAAE,EAAE,WAAW;oBACf,IAAI,EAAE,yBAAyB;oBAC/B,QAAQ,EAAE,CAAC,UAAU,EAAE,yBAAyB,EAAE,WAAW,CAAC;oBAC9D,WAAW,EAAE,CAAC,gBAAgB,EAAE,uBAAuB,CAAC;oBACxD,UAAU,EAAE,CAAC,4BAA4B,EAAE,sBAAsB,CAAC;iBACnE;aACF,CAAC;YAEF,KAAK,MAAM,QAAQ,IAAI,cAAc,EAAE,CAAC;gBACtC,MAAM,iBAAiB,GAAG,UAAU,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE;oBACnD,MAAM,OAAO,GAAG,CAAC,MAAM,CAAC,KAAK,GAAG,GAAG,GAAG,MAAM,CAAC,OAAO,CAAC,CAAC,WAAW,EAAE,CAAC;oBACpE,OAAO,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,OAAO,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC;gBACtE,CAAC,CAAC,CAAC;gBAEH,MAAM,qBAAqB,GAAG,CAAC,GAAG,IAAI,GAAG,CACvC,iBAAiB,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,SAAS,MAAM,MAAM,CAAC,IAAI,EAAE,CAAC,CACxE,CAAC,CAAC;gBAEH,IAAI,iBAAiB,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;oBACjC,MAAM,OAAO,GAAoB;wBAC/B,UAAU,EAAE,QAAQ,CAAC,EAAE;wBACvB,qBAAqB;wBACrB,gBAAgB,EAAE,QAAQ,CAAC,UAAU;wBACrC,YAAY,EAAE,QAAQ,CAAC,WAAW;wBAClC,WAAW,EAAE,IAAI,IAAI,EAAE;qBACxB,CAAC;oBAEF,gBAAgB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;gBACjC,CAAC;YACH,CAAC;YAED,OAAO,CAAC,GAAG,CAAC,sBAAsB,gBAAgB,CAAC,MAAM,oBAAoB,CAAC,CAAC;YAC/E,OAAO,gBAAgB,CAAC;QAC1B,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,CAAC,KAAK,CAAC,qCAAqC,EAAE,KAAK,CAAC,CAAC;YAC5D,MAAM,KAAK,CAAC;QACd,CAAC;IACH,CAAC;IAED,KAAK,CAAC,8BAA8B;QAClC,IAAI,CAAC;YACH,OAAO,CAAC,GAAG,CAAC,kDAAkD,CAAC,CAAC;YAEhE,MAAM,UAAU,GAAG,MAAM,OAAO,CAAC,uBAAuB,EAAE,CAAC;YAC3D,MAAM,gBAAgB,GAAoB,EAAE,CAAC;YAG7C,MAAM,eAAe,GAAG,UAAU,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,CACjD,MAAM,CAAC,IAAI,EAAE,WAAW,EAAE,CAAC,QAAQ,CAAC,UAAU,CAAC;gBAC/C,MAAM,CAAC,OAAO,CAAC,WAAW,EAAE,CAAC,QAAQ,CAAC,gBAAgB,CAAC;gBACvD,MAAM,CAAC,OAAO,CAAC,WAAW,EAAE,CAAC,QAAQ,CAAC,gBAAgB,CAAC,CACxD,CAAC;YAGF,MAAM,SAAS,GAAG,UAAU,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,CAC3C,MAAM,CAAC,IAAI,EAAE,QAAQ,CAAC,QAAQ,CAAC;gBAC/B,MAAM,CAAC,IAAI,EAAE,QAAQ,CAAC,KAAK,CAAC;gBAC5B,MAAM,CAAC,IAAI,EAAE,QAAQ,CAAC,SAAS,CAAC;gBAChC,MAAM,CAAC,IAAI,EAAE,QAAQ,CAAC,UAAU,CAAC;gBACjC,MAAM,CAAC,IAAI,EAAE,QAAQ,CAAC,WAAW,CAAC,CACnC,CAAC;YAEF,KAAK,MAAM,KAAK,IAAI,eAAe,EAAE,CAAC;gBACpC,MAAM,eAAe,GAAG,IAAI,CAAC,0BAA0B,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;gBACrE,MAAM,iBAAiB,GAAG,IAAI,CAAC,8BAA8B,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;gBAE7E,IAAI,CAAC,eAAe,IAAI,CAAC,iBAAiB;oBAAE,SAAS;gBAErD,MAAM,gBAAgB,GAAG,EAAE,CAAC;gBAE5B,KAAK,MAAM,QAAQ,IAAI,SAAS,EAAE,CAAC;oBACjC,MAAM,kBAAkB,GAAG,IAAI,CAAC,0BAA0B,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;oBAC3E,MAAM,oBAAoB,GAAG,IAAI,CAAC,8BAA8B,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;oBAEnF,IAAI,UAAU,GAAG,CAAC,CAAC;oBAEnB,IAAI,eAAe,IAAI,kBAAkB,EAAE,CAAC;wBAC1C,UAAU,GAAG,IAAI,CAAC,GAAG,CAAC,UAAU,EAC9B,MAAM,IAAI,CAAC,mBAAmB,CAAC,eAAe,EAAE,kBAAkB,CAAC,CAAC,CAAC;oBACzE,CAAC;oBAED,IAAI,iBAAiB,IAAI,oBAAoB,EAAE,CAAC;wBAC9C,UAAU,GAAG,IAAI,CAAC,GAAG,CAAC,UAAU,EAC9B,MAAM,IAAI,CAAC,mBAAmB,CAAC,iBAAiB,EAAE,oBAAoB,CAAC,CAAC,CAAC;oBAC7E,CAAC;oBAED,IAAI,UAAU,IAAI,IAAI,CAAC,gBAAgB,EAAE,CAAC;wBACxC,gBAAgB,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;oBACrC,CAAC;gBACH,CAAC;gBAED,IAAI,gBAAgB,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;oBAChC,MAAM,OAAO,GAAkB;wBAC7B,SAAS,EAAE,KAAK,CAAC,EAAE;wBACnB,UAAU,EAAE,gBAAgB;wBAC5B,WAAW,EAAE,gBAAgB;wBAC7B,UAAU,EAAE,GAAG;wBACf,WAAW,EAAE,IAAI,IAAI,EAAE;qBACxB,CAAC;oBAEF,gBAAgB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;gBACjC,CAAC;YACH,CAAC;YAED,OAAO,CAAC,GAAG,CAAC,sBAAsB,gBAAgB,CAAC,MAAM,0BAA0B,CAAC,CAAC;YACrF,OAAO,gBAAgB,CAAC;QAC1B,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,CAAC,KAAK,CAAC,4CAA4C,EAAE,KAAK,CAAC,CAAC;YACnE,MAAM,KAAK,CAAC;QACd,CAAC;IACH,CAAC;IAED,KAAK,CAAC,mCAAmC;QAMvC,IAAI,CAAC;YACH,OAAO,CAAC,GAAG,CAAC,8DAA8D,CAAC,CAAC;YAE5E,MAAM,CAAC,cAAc,EAAE,gBAAgB,EAAE,gBAAgB,CAAC,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC;gBAC7E,IAAI,CAAC,8BAA8B,EAAE;gBACrC,IAAI,CAAC,yBAAyB,EAAE;gBAChC,IAAI,CAAC,8BAA8B,EAAE;aACtC,CAAC,CAAC;YAEH,MAAM,aAAa,GAAG,cAAc,CAAC,MAAM,GAAG,gBAAgB,CAAC,MAAM,GAAG,gBAAgB,CAAC,MAAM,CAAC;YAEhG,OAAO,CAAC,GAAG,CAAC,2DAA2D,aAAa,iBAAiB,CAAC,CAAC;YAEvG,OAAO;gBACL,cAAc;gBACd,gBAAgB;gBAChB,gBAAgB;gBAChB,aAAa;aACd,CAAC;QACJ,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,CAAC,KAAK,CAAC,8CAA8C,EAAE,KAAK,CAAC,CAAC;YACrE,MAAM,KAAK,CAAC;QACd,CAAC;IACH,CAAC;CACF","sourcesContent":["import { storage } from '../storage';\n\ninterface DeviceMapping {\n  primaryId: string;\n  relatedIds: string[];\n  mappingType: 'manufacturer' | 'device_name' | 'regulation' | 'clinical_study';\n  confidence: number; // 0-1\n  lastUpdated: Date;\n}\n\ninterface RegulatoryTimeline {\n  deviceId: string;\n  timeline: TimelineEvent[];\n  jurisdiction: string;\n  currentStatus: string;\n}\n\ninterface TimelineEvent {\n  date: Date;\n  event: string;\n  authority: string;\n  status: string;\n  documents: string[];\n  impact: 'low' | 'medium' | 'high';\n}\n\ninterface StandardMapping {\n  standardId: string;\n  applicableRegulations: string[];\n  deviceCategories: string[];\n  requirements: string[];\n  lastUpdated: Date;\n}\n\nexport class CrossReferenceService {\n  private mappingThreshold = 0.75; // Minimum confidence for auto-mapping\n  \n  private async calculateSimilarity(str1: string, str2: string): Promise<number> {\n    const normalize = (s: string) => s.toLowerCase()\n      .replace(/[^\\w\\s]/g, '')\n      .replace(/\\s+/g, ' ')\n      .trim();\n    \n    const s1 = normalize(str1);\n    const s2 = normalize(str2);\n    \n    if (s1 === s2) return 1.0;\n    \n    // Jaccard similarity for text comparison\n    const words1 = new Set(s1.split(' '));\n    const words2 = new Set(s2.split(' '));\n    \n    const intersection = new Set([...words1].filter(x => words2.has(x)));\n    const union = new Set([...words1, ...words2]);\n    \n    return intersection.size / union.size;\n  }\n\n  private extractManufacturerFromContent(content: string): string | null {\n    // Extract manufacturer from various content formats\n    const patterns = [\n      /manufacturer[:\\s]+([^,\\n.]+)/i,\n      /applicant[:\\s]+([^,\\n.]+)/i,\n      /company[:\\s]+([^,\\n.]+)/i,\n      /sponsor[:\\s]+([^,\\n.]+)/i\n    ];\n    \n    for (const pattern of patterns) {\n      const match = content.match(pattern);\n      if (match && match[1]) {\n        return match[1].trim();\n      }\n    }\n    \n    return null;\n  }\n\n  private extractDeviceNameFromTitle(title: string): string | null {\n    // Extract device name from title, removing regulatory prefixes\n    const cleanTitle = title\n      .replace(/^(FDA|EMA|BfArM|MHRA|Swissmedic)[\\s:]+/i, '')\n      .replace(/^(510\\(k\\)|PMA|CE Mark)[\\s:]+/i, '')\n      .replace(/^(Clearance|Approval|Registration)[\\s:]+/i, '');\n    \n    return cleanTitle.trim() || null;\n  }\n\n  async mapDevicesBetweenJurisdictions(): Promise<DeviceMapping[]> {\n    try {\n      console.log('[CrossRef] Starting device mapping between jurisdictions');\n      \n      const allUpdates = await storage.getAllRegulatoryUpdates();\n      const deviceMappings: DeviceMapping[] = [];\n      const processed = new Set<string>();\n      \n      // Group updates by potential device categories\n      const deviceGroups: Record<string, any[]> = {};\n      \n      for (const update of allUpdates) {\n        if (processed.has(update.id)) continue;\n        \n        const deviceName = this.extractDeviceNameFromTitle(update.title);\n        const manufacturer = this.extractManufacturerFromContent(update.content);\n        \n        if (!deviceName && !manufacturer) continue;\n        \n        const groupKey = `${manufacturer || 'unknown'}_${deviceName || 'unknown'}`;\n        \n        if (!deviceGroups[groupKey]) {\n          deviceGroups[groupKey] = [];\n        }\n        deviceGroups[groupKey].push(update);\n      }\n      \n      // Create mappings for devices found in multiple jurisdictions\n      for (const [groupKey, updates] of Object.entries(deviceGroups)) {\n        if (updates.length < 2) continue;\n        \n        const authorities = new Set(updates.map(u => u.authority));\n        if (authorities.size < 2) continue; // Must be cross-jurisdictional\n        \n        // Calculate confidence based on similarity\n        let totalConfidence = 0;\n        let comparisons = 0;\n        \n        for (let i = 0; i < updates.length; i++) {\n          for (let j = i + 1; j < updates.length; j++) {\n            const similarity = await this.calculateSimilarity(\n              updates[i].title + ' ' + updates[i].content,\n              updates[j].title + ' ' + updates[j].content\n            );\n            totalConfidence += similarity;\n            comparisons++;\n          }\n        }\n        \n        const averageConfidence = comparisons > 0 ? totalConfidence / comparisons : 0;\n        \n        if (averageConfidence >= this.mappingThreshold) {\n          const mapping: DeviceMapping = {\n            primaryId: updates[0].id,\n            relatedIds: updates.slice(1).map(u => u.id),\n            mappingType: 'manufacturer',\n            confidence: averageConfidence,\n            lastUpdated: new Date()\n          };\n          \n          deviceMappings.push(mapping);\n          updates.forEach(u => processed.add(u.id));\n        }\n      }\n      \n      console.log(`[CrossRef] Created ${deviceMappings.length} device mappings`);\n      return deviceMappings;\n    } catch (error) {\n      console.error('[CrossRef] Error mapping devices:', error);\n      throw error;\n    }\n  }\n\n  async generateRegulatoryTimeline(deviceId: string): Promise<RegulatoryTimeline | null> {\n    try {\n      console.log(`[CrossRef] Generating regulatory timeline for device: ${deviceId}`);\n      \n      const allUpdates = await storage.getAllRegulatoryUpdates();\n      const deviceUpdate = allUpdates.find(u => u.id === deviceId);\n      \n      if (!deviceUpdate) {\n        console.log(`[CrossRef] Device not found: ${deviceId}`);\n        return null;\n      }\n      \n      // Find related updates for the same device/manufacturer\n      const deviceName = this.extractDeviceNameFromTitle(deviceUpdate.title);\n      const manufacturer = this.extractManufacturerFromContent(deviceUpdate.content);\n      \n      const relatedUpdates = [];\n      \n      for (const update of allUpdates) {\n        if (update.id === deviceId) {\n          relatedUpdates.push(update);\n          continue;\n        }\n        \n        const updateDeviceName = this.extractDeviceNameFromTitle(update.title);\n        const updateManufacturer = this.extractManufacturerFromContent(update.content);\n        \n        // Match by device name or manufacturer\n        const deviceMatch = deviceName && updateDeviceName ? \n          await this.calculateSimilarity(deviceName, updateDeviceName) : 0;\n        const manufacturerMatch = manufacturer && updateManufacturer ? \n          await this.calculateSimilarity(manufacturer, updateManufacturer) : 0;\n        \n        if ((deviceMatch && deviceMatch > 0.7) || (manufacturerMatch && manufacturerMatch > 0.8)) {\n          relatedUpdates.push(update);\n        }\n      }\n      \n      // Convert to timeline events\n      const timelineEvents: TimelineEvent[] = relatedUpdates.map(update => ({\n        date: new Date(update.published_at),\n        event: this.categorizeEvent(update.type),\n        authority: update.authority,\n        status: update.status || 'Unknown',\n        documents: [update.id],\n        impact: update.priority === 'critical' ? 'high' : \n                update.priority === 'high' ? 'medium' : 'low'\n      }));\n      \n      // Sort by date\n      timelineEvents.sort((a, b) => a.date.getTime() - b.date.getTime());\n      \n      const timeline: RegulatoryTimeline = {\n        deviceId,\n        timeline: timelineEvents,\n        jurisdiction: deviceUpdate.region,\n        currentStatus: this.determineCurrentStatus(timelineEvents)\n      };\n      \n      console.log(`[CrossRef] Generated timeline with ${timelineEvents.length} events`);\n      return timeline;\n    } catch (error) {\n      console.error('[CrossRef] Error generating timeline:', error);\n      return null;\n    }\n  }\n\n  private categorizeEvent(type: string): string {\n    const eventMap: Record<string, string> = {\n      'FDA 510(k) Clearance': 'Pre-market Clearance',\n      'FDA PMA Approval': 'Pre-market Approval',\n      'FDA Device Recall': 'Safety Action',\n      'CE Mark': 'European Conformity',\n      'EU MDR Device Registration': 'Registration',\n      'EU MDR Incident Report': 'Safety Report',\n      'Clinical Study': 'Clinical Evidence',\n      'RSS Update': 'Information Update'\n    };\n    \n    return eventMap[type] || 'Regulatory Update';\n  }\n\n  private determineCurrentStatus(events: TimelineEvent[]): string {\n    if (events.length === 0) return 'Unknown';\n    \n    const latestEvent = events[events.length - 1];\n    \n    if (latestEvent.event.includes('Recall') || latestEvent.event.includes('Safety')) {\n      return 'Under Safety Review';\n    }\n    \n    if (latestEvent.event.includes('Approval') || latestEvent.event.includes('Clearance')) {\n      return 'Approved';\n    }\n    \n    if (latestEvent.event.includes('Registration')) {\n      return 'Registered';\n    }\n    \n    return 'Active';\n  }\n\n  async mapStandardsToRegulations(): Promise<StandardMapping[]> {\n    try {\n      console.log('[CrossRef] Mapping standards to regulations');\n      \n      const allUpdates = await storage.getAllRegulatoryUpdates();\n      const standardMappings: StandardMapping[] = [];\n      \n      // Common medical device standards and their regulatory contexts\n      const knownStandards = [\n        {\n          id: 'ISO 13485:2016',\n          name: 'Quality Management Systems',\n          keywords: ['quality management', 'qms', 'iso 13485'],\n          regulations: ['EU MDR', 'FDA QSR', '21 CFR 820'],\n          categories: ['All Medical Devices']\n        },\n        {\n          id: 'ISO 10993',\n          name: 'Biological Evaluation',\n          keywords: ['biocompatibility', 'biological evaluation', 'iso 10993'],\n          regulations: ['EU MDR Annex I', 'FDA Biocompatibility'],\n          categories: ['Implantable Devices', 'Contact Devices']\n        },\n        {\n          id: 'ISO 14971:2019',\n          name: 'Risk Management',\n          keywords: ['risk management', 'risk analysis', 'iso 14971'],\n          regulations: ['EU MDR Article 10', 'FDA Risk Management'],\n          categories: ['All Medical Devices']\n        },\n        {\n          id: 'IEC 62304',\n          name: 'Medical Device Software',\n          keywords: ['software', 'medical device software', 'iec 62304'],\n          regulations: ['EU MDR Annex I', 'FDA Software Guidance'],\n          categories: ['Software as Medical Device', 'Device with Software']\n        }\n      ];\n      \n      for (const standard of knownStandards) {\n        const applicableUpdates = allUpdates.filter(update => {\n          const content = (update.title + ' ' + update.content).toLowerCase();\n          return standard.keywords.some(keyword => content.includes(keyword));\n        });\n        \n        const applicableRegulations = [...new Set(\n          applicableUpdates.map(update => `${update.authority} - ${update.type}`)\n        )];\n        \n        if (applicableUpdates.length > 0) {\n          const mapping: StandardMapping = {\n            standardId: standard.id,\n            applicableRegulations,\n            deviceCategories: standard.categories,\n            requirements: standard.regulations,\n            lastUpdated: new Date()\n          };\n          \n          standardMappings.push(mapping);\n        }\n      }\n      \n      console.log(`[CrossRef] Created ${standardMappings.length} standard mappings`);\n      return standardMappings;\n    } catch (error) {\n      console.error('[CrossRef] Error mapping standards:', error);\n      throw error;\n    }\n  }\n\n  async linkClinicalStudiesToApprovals(): Promise<DeviceMapping[]> {\n    try {\n      console.log('[CrossRef] Linking clinical studies to approvals');\n      \n      const allUpdates = await storage.getAllRegulatoryUpdates();\n      const clinicalMappings: DeviceMapping[] = [];\n      \n      // Find clinical studies\n      const clinicalStudies = allUpdates.filter(update => \n        update.type?.toLowerCase().includes('clinical') ||\n        update.content.toLowerCase().includes('clinical study') ||\n        update.content.toLowerCase().includes('clinical trial')\n      );\n      \n      // Find approvals/clearances\n      const approvals = allUpdates.filter(update =>\n        update.type?.includes('510(k)') ||\n        update.type?.includes('PMA') ||\n        update.type?.includes('CE Mark') ||\n        update.type?.includes('Approval') ||\n        update.type?.includes('Clearance')\n      );\n      \n      for (const study of clinicalStudies) {\n        const studyDeviceName = this.extractDeviceNameFromTitle(study.title);\n        const studyManufacturer = this.extractManufacturerFromContent(study.content);\n        \n        if (!studyDeviceName && !studyManufacturer) continue;\n        \n        const relatedApprovals = [];\n        \n        for (const approval of approvals) {\n          const approvalDeviceName = this.extractDeviceNameFromTitle(approval.title);\n          const approvalManufacturer = this.extractManufacturerFromContent(approval.content);\n          \n          let confidence = 0;\n          \n          if (studyDeviceName && approvalDeviceName) {\n            confidence = Math.max(confidence, \n              await this.calculateSimilarity(studyDeviceName, approvalDeviceName));\n          }\n          \n          if (studyManufacturer && approvalManufacturer) {\n            confidence = Math.max(confidence,\n              await this.calculateSimilarity(studyManufacturer, approvalManufacturer));\n          }\n          \n          if (confidence >= this.mappingThreshold) {\n            relatedApprovals.push(approval.id);\n          }\n        }\n        \n        if (relatedApprovals.length > 0) {\n          const mapping: DeviceMapping = {\n            primaryId: study.id,\n            relatedIds: relatedApprovals,\n            mappingType: 'clinical_study',\n            confidence: 0.8, // Base confidence for clinical study links\n            lastUpdated: new Date()\n          };\n          \n          clinicalMappings.push(mapping);\n        }\n      }\n      \n      console.log(`[CrossRef] Created ${clinicalMappings.length} clinical study mappings`);\n      return clinicalMappings;\n    } catch (error) {\n      console.error('[CrossRef] Error linking clinical studies:', error);\n      throw error;\n    }\n  }\n\n  async generateComprehensiveCrossReference(): Promise<{\n    deviceMappings: DeviceMapping[];\n    standardMappings: StandardMapping[];\n    clinicalMappings: DeviceMapping[];\n    totalMappings: number;\n  }> {\n    try {\n      console.log('[CrossRef] Generating comprehensive cross-reference database');\n      \n      const [deviceMappings, standardMappings, clinicalMappings] = await Promise.all([\n        this.mapDevicesBetweenJurisdictions(),\n        this.mapStandardsToRegulations(),\n        this.linkClinicalStudiesToApprovals()\n      ]);\n      \n      const totalMappings = deviceMappings.length + standardMappings.length + clinicalMappings.length;\n      \n      console.log(`[CrossRef] Generated comprehensive cross-reference with ${totalMappings} total mappings`);\n      \n      return {\n        deviceMappings,\n        standardMappings,\n        clinicalMappings,\n        totalMappings\n      };\n    } catch (error) {\n      console.error('[CrossRef] Error generating cross-reference:', error);\n      throw error;\n    }\n  }\n}"]}