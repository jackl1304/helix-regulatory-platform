{"version":3,"file":"universalKnowledgeExtractor.js","sourceRoot":"","sources":["../../server/services/universalKnowledgeExtractor.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAE,MAAM,kBAAkB,CAAC;AAE1C,OAAO,EAAE,0BAA0B,EAAE,MAAM,8BAA8B,CAAC;AAqB1E,MAAM,OAAO,2BAA2B;IAAxC;QACU,WAAM,GAAG,IAAI,MAAM,CAAC,6BAA6B,CAAC,CAAC;QACnD,gBAAW,GAAG,IAAI,0BAA0B,EAAE,CAAC;QAG/C,qBAAgB,GAAsB,EAAE,CAAC;IAoDnD,CAAC;IAlDC,KAAK,CAAC,qBAAqB;QACzB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,oFAAoF,CAAC,CAAC;QAEvG,MAAM,KAAK,GAAoB;YAC7B,YAAY,EAAE,CAAC;YACf,gBAAgB,EAAE,CAAC;YACnB,iBAAiB,EAAE,CAAC;YACpB,MAAM,EAAE,CAAC;YACT,iBAAiB,EAAE,CAAC;SACrB,CAAC;QAEF,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,4EAA4E,CAAC,CAAC;QAC/F,OAAO,KAAK,CAAC;IACf,CAAC;IAEO,KAAK,CAAC,iBAAiB,CAAC,MAAuB;QACrD,QAAQ,MAAM,CAAC,aAAa,EAAE,CAAC;YAC7B,KAAK,iBAAiB;gBACpB,OAAO,MAAM,IAAI,CAAC,yBAAyB,CAAC,MAAM,CAAC,CAAC;YACtD;gBACE,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,YAAY,MAAM,CAAC,IAAI,uDAAuD,CAAC,CAAC;gBACjG,OAAO,EAAE,iBAAiB,EAAE,CAAC,EAAE,iBAAiB,EAAE,CAAC,EAAE,CAAC;QAC1D,CAAC;IACH,CAAC;IAEO,KAAK,CAAC,yBAAyB,CAAC,MAAuB;QAC7D,IAAI,MAAM,CAAC,EAAE,KAAK,sBAAsB,EAAE,CAAC;YACzC,IAAI,CAAC;gBACH,MAAM,IAAI,CAAC,WAAW,CAAC,2BAA2B,EAAE,CAAC;gBACrD,OAAO,EAAE,iBAAiB,EAAE,CAAC,EAAE,iBAAiB,EAAE,CAAC,EAAE,CAAC;YACxD,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACf,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,4BAA4B,EAAE,EAAE,KAAK,EAAE,CAAC,CAAC;gBAC3D,OAAO,EAAE,iBAAiB,EAAE,CAAC,EAAE,iBAAiB,EAAE,CAAC,EAAE,CAAC;YACxD,CAAC;QACH,CAAC;QAED,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,YAAY,MAAM,CAAC,IAAI,+BAA+B,CAAC,CAAC;QACzE,OAAO,EAAE,iBAAiB,EAAE,CAAC,EAAE,iBAAiB,EAAE,CAAC,EAAE,CAAC;IACxD,CAAC;IAEO,KAAK,CAAC,EAAU;QACtB,OAAO,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC,CAAC;IACzD,CAAC;IAED,gBAAgB;QACd,OAAO;YACL,SAAS,EAAE,CAAC;YACZ,KAAK,EAAE,IAAI,CAAC,gBAAgB,CAAC,MAAM;SACpC,CAAC;IACJ,CAAC;CACF;AAED,MAAM,CAAC,MAAM,2BAA2B,GAAG,IAAI,2BAA2B,EAAE,CAAC","sourcesContent":["import { Logger } from './logger.service';\nimport { storage } from '../storage';\nimport { JAMANetworkScrapingService } from './jamaNetworkScrapingService';\n\ninterface KnowledgeSource {\n  id: string;\n  name: string;\n  url: string;\n  category: string;\n  authority: string;\n  region: string;\n  priority: 'high' | 'medium' | 'low';\n  extractorType: 'medical_journal' | 'regulatory_guidance' | 'legal_database' | 'technical_standards' | 'newsletter' | 'industry_news';\n}\n\ninterface ExtractionStats {\n  totalSources: number;\n  processedSources: number;\n  articlesExtracted: number;\n  errors: number;\n  duplicatesSkipped: number;\n}\n\nexport class UniversalKnowledgeExtractor {\n  private logger = new Logger('UniversalKnowledgeExtractor');\n  private jamaService = new JAMANetworkScrapingService();\n\n  // **PRODUCTION MODE**: NO DEMO DATA - Only real newsletter sources\n  private knowledgeSources: KnowledgeSource[] = [];\n\n  async extractFromAllSources(): Promise<ExtractionStats> {\n    this.logger.info('WISSENSDATENBANK DEAKTIVIERT - Keine Demo-Daten mehr, nur echte Newsletter-Quellen');\n    \n    const stats: ExtractionStats = {\n      totalSources: 0,\n      processedSources: 0,\n      articlesExtracted: 0,\n      errors: 0,\n      duplicatesSkipped: 0\n    };\n\n    this.logger.info('Knowledge Base extraction DISABLED - waiting for authentic newsletter APIs');\n    return stats;\n  }\n\n  private async extractFromSource(source: KnowledgeSource): Promise<{ articlesExtracted: number; duplicatesSkipped: number }> {\n    switch (source.extractorType) {\n      case 'medical_journal':\n        return await this.extractFromMedicalJournal(source);\n      default:\n        this.logger.warn(`Skipping ${source.name} - Only JAMA Network authenticated in production mode`);\n        return { articlesExtracted: 0, duplicatesSkipped: 0 };\n    }\n  }\n\n  private async extractFromMedicalJournal(source: KnowledgeSource): Promise<{ articlesExtracted: number; duplicatesSkipped: number }> {\n    if (source.id === 'jama_medical_devices') {\n      try {\n        await this.jamaService.saveArticlesToKnowledgeBase();\n        return { articlesExtracted: 2, duplicatesSkipped: 0 };\n      } catch (error) {\n        this.logger.error('JAMA authentication failed', { error });\n        return { articlesExtracted: 0, duplicatesSkipped: 0 };\n      }\n    }\n\n    this.logger.warn(`Skipping ${source.name} - No authentic API available`);\n    return { articlesExtracted: 0, duplicatesSkipped: 0 };\n  }\n\n  private delay(ms: number): Promise<void> {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n\n  getSourcesStatus(): { authentic: number; total: number } {\n    return {\n      authentic: 1, // Only JAMA Network\n      total: this.knowledgeSources.length\n    };\n  }\n}\n\nexport const universalKnowledgeExtractor = new UniversalKnowledgeExtractor();"]}