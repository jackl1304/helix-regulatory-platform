{"version":3,"file":"realNewsletterScraper.js","sourceRoot":"","sources":["../../server/services/realNewsletterScraper.ts"],"names":[],"mappings":"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","sourcesContent":["import { Logger } from './logger.service';\nimport * as cheerio from 'cheerio';\nimport axios from 'axios';\n\nconst logger = new Logger('RealNewsletterScraper');\n\nexport interface NewsletterSource {\n  id: string;\n  name: string;\n  url: string;\n  description: string;\n  requiresAuth: boolean;\n  category: 'industry_newsletter' | 'regulatory_newsletter' | 'market_analysis';\n  status: 'active' | 'configured';\n  credentials?: {\n    email?: string;\n    password?: string;\n  };\n}\n\nexport interface ScrapedArticle {\n  source_name: string;\n  article_title: string;\n  article_url: string;\n  publication_date: string;\n  author?: string;\n  content_text: string;\n  content_html?: string;\n  keywords?: string[];\n  is_gated: boolean;\n  scrape_timestamp: string;\n}\n\nexport class RealNewsletterScraper {\n  private sources: NewsletterSource[] = [\n    {\n      id: 'medtech_dive',\n      name: 'MedTech Dive',\n      url: 'https://www.medtechdive.com/',\n      description: 'Tägliche Nachrichten und Einblicke in die Medizintechnikbranche',\n      requiresAuth: false,\n      category: 'industry_newsletter',\n      status: 'active'\n    },\n    {\n      id: 'medtech_europe',\n      name: 'MedTech Europe Newsletter',\n      url: 'https://www.medtecheurope.org/medtech-views/newsletters/',\n      description: 'Monatliche Newsletter mit umfassender Berichterstattung über den Medizintechniksektor',\n      requiresAuth: true,\n      category: 'regulatory_newsletter',\n      status: 'active',\n      credentials: {\n        email: 'helix@medtech-intelligence.com',\n        password: '[configured]'\n      }\n    },\n    {\n      id: 'medical_device_network',\n      name: 'Medical Device Network Newsletter',\n      url: 'https://www.medicaldevice-network.com/all-newsletters/',\n      description: 'Tägliche Nachrichten-Digest über medizinische Geräte',\n      requiresAuth: true,\n      category: 'industry_newsletter',\n      status: 'configured'\n    },\n    {\n      id: 'medtech_strategist',\n      name: 'MedTech Strategist Newsletter',\n      url: 'https://www.medtechstrategist.com/medtech-strategist-newsletter',\n      description: 'Umfassende globale Berichterstattung über Trends im Bereich der medizinischen Geräte',\n      requiresAuth: true,\n      category: 'market_analysis',\n      status: 'configured'\n    },\n    {\n      id: 'bioworld',\n      name: 'BioWorld Newsletter',\n      url: 'https://www.bioworld.com/',\n      description: 'Nachrichten und Analysen für die globale Biotechnologie-, Pharma- und Medizintechnikindustrie',\n      requiresAuth: true,\n      category: 'market_analysis',\n      status: 'configured'\n    },\n    {\n      id: 'medtech_insights',\n      name: 'Med-Tech Insights Newsletter',\n      url: 'https://med-techinsights.com/',\n      description: 'Neueste Nachrichten, Expertenanalysen und Branchentrends in der Medizintechnik',\n      requiresAuth: true,\n      category: 'industry_newsletter',\n      status: 'active',\n      credentials: {\n        email: 'helix@medtech-intelligence.com'\n      }\n    },\n    {\n      id: 'citeline_medtech',\n      name: 'Citeline Medtech Insight Newsletter',\n      url: 'https://insights.citeline.com/medtech-insight/',\n      description: 'Globale Medtech-Nachrichten und Einblicke, Trends und Marktinformationen',\n      requiresAuth: true,\n      category: 'market_analysis',\n      status: 'active',\n      credentials: {\n        email: 'helix@medtech-intelligence.com'\n      }\n    }\n  ];\n\n  // Add expanded premium sources based on your comprehensive newsletter analysis\n  private expandedSources: NewsletterSource[] = [\n    {\n      id: 'emergo_ul',\n      name: 'Emergo by UL Newsletter',\n      url: 'https://www.emergobyul.com/services/newsletters',\n      description: 'Regulatorische Updates und Markteinblicke für Medizinprodukte-Hersteller',\n      requiresAuth: true,\n      category: 'regulatory_newsletter',\n      status: 'configured',\n      credentials: { email: 'helix@medtech-intelligence.com' }\n    },\n    {\n      id: 'kpmg_medtech',\n      name: 'KPMG MedTech Newsletter',\n      url: 'https://home.kpmg/xx/en/home/industries/healthcare/medtech.html',\n      description: 'Strategische Einblicke und Marktanalysen von KPMG für MedTech-Unternehmen',\n      requiresAuth: true,\n      category: 'market_analysis',\n      status: 'configured',\n      credentials: { email: 'helix@medtech-intelligence.com' }\n    },\n    {\n      id: 'mckinsey_health',\n      name: 'McKinsey Health Tech Newsletter',\n      url: 'https://www.mckinsey.com/industries/healthcare-systems-and-services',\n      description: 'Strategische Gesundheitstechnologie-Insights von McKinsey & Company',\n      requiresAuth: true,\n      category: 'market_analysis',\n      status: 'configured',\n      credentials: { email: 'helix@medtech-intelligence.com' }\n    },\n    {\n      id: 'pwc_health',\n      name: 'PwC Health Services Newsletter',\n      url: 'https://www.pwc.com/gx/en/industries/healthcare.html',\n      description: 'Gesundheitswesen und MedTech-Trends von PricewaterhouseCoopers',\n      requiresAuth: true,\n      category: 'market_analysis',\n      status: 'configured',\n      credentials: { email: 'helix@medtech-intelligence.com' }\n    },\n    {\n      id: 'fiercebiotech',\n      name: 'FierceBiotech Newsletter',\n      url: 'https://www.fiercebiotech.com/',\n      description: 'Tägliche Biotechnologie- und MedTech-Nachrichten für Führungskräfte',\n      requiresAuth: true,\n      category: 'industry_newsletter',\n      status: 'configured',\n      credentials: { email: 'helix@medtech-intelligence.com' }\n    },\n    {\n      id: 'massdevice',\n      name: 'MassDevice Newsletter',\n      url: 'https://www.massdevice.com/',\n      description: 'Medizinprodukte-Industrie News, Analysis und Intelligence',\n      requiresAuth: true,\n      category: 'industry_newsletter',\n      status: 'configured',\n      credentials: { email: 'helix@medtech-intelligence.com' }\n    },\n    {\n      id: 'regulatory_focus',\n      name: 'Regulatory Focus Newsletter',\n      url: 'https://www.raps.org/news-and-articles/news-articles',\n      description: 'Regulatorische Nachrichten und Analysen für Life Sciences',\n      requiresAuth: true,\n      category: 'regulatory_newsletter',\n      status: 'configured',\n      credentials: { email: 'helix@medtech-intelligence.com' }\n    },\n    {\n      id: 'devicetalks',\n      name: 'DeviceTalks Newsletter',\n      url: 'https://www.devicetalks.com/',\n      description: 'Medizinprodukte-Engineering und Business Intelligence',\n      requiresAuth: false,\n      category: 'industry_newsletter',\n      status: 'configured'\n    },\n    {\n      id: 'mdt_magazine',\n      name: 'Medical Design & Technology Magazine',\n      url: 'https://www.mdtmag.com/',\n      description: 'Design, Entwicklung und Herstellung von Medizinprodukten',\n      requiresAuth: false,\n      category: 'industry_newsletter',\n      status: 'configured'\n    },\n    {\n      id: 'meddeviceonline',\n      name: 'Medical Device Online Newsletter',\n      url: 'https://www.meddeviceonline.com/',\n      description: 'Umfassende Medizinprodukte-Ressourcen und Branchennachrichten',\n      requiresAuth: false,\n      category: 'industry_newsletter',\n      status: 'configured'\n    },\n    {\n      id: 'qmed',\n      name: 'Qmed Newsletter',\n      url: 'https://www.qmed.com/',\n      description: 'Qualität und Compliance in der Medizinprodukte-Branche',\n      requiresAuth: true,\n      category: 'regulatory_newsletter',\n      status: 'configured',\n      credentials: { email: 'helix@medtech-intelligence.com' }\n    },\n    {\n      id: 'medtechbreakthrough',\n      name: 'MedTech Breakthrough Newsletter',\n      url: 'https://medtechbreakthrough.com/',\n      description: 'Innovationen und Durchbrüche in der Medizintechnologie',\n      requiresAuth: false,\n      category: 'industry_newsletter',\n      status: 'configured'\n    },\n    {\n      id: 'dotmed',\n      name: 'DOTmed Newsletter',\n      url: 'https://www.dotmed.com/',\n      description: 'Medizinische Ausrüstung, Service und Handelsnachrichten',\n      requiresAuth: false,\n      category: 'industry_newsletter',\n      status: 'configured'\n    },\n    {\n      id: 'healthcareitnews',\n      name: 'Healthcare IT News MedTech',\n      url: 'https://www.healthcareitnews.com/',\n      description: 'Digital Health und Health IT Innovations',\n      requiresAuth: false,\n      category: 'industry_newsletter',\n      status: 'configured'\n    },\n    {\n      id: 'mobihealthnews',\n      name: 'MobiHealthNews Newsletter',\n      url: 'https://www.mobihealthnews.com/',\n      description: 'Mobile Health und Digital Health Technologien',\n      requiresAuth: false,\n      category: 'industry_newsletter',\n      status: 'configured'\n    },\n    {\n      id: 'mpo_magazine',\n      name: 'Medical Product Outsourcing Magazine',\n      url: 'https://www.mpo-mag.com/',\n      description: 'Outsourcing und Lieferketten-Management in der MedTech-Branche',\n      requiresAuth: false,\n      category: 'industry_newsletter',\n      status: 'configured'\n    }\n  ];\n\n  getAllSources(): NewsletterSource[] {\n    return [...this.sources, ...this.expandedSources];\n  }\n\n  async scrapeAllSources(): Promise<ScrapedArticle[]> {\n    const articles: ScrapedArticle[] = [];\n    const allSources = this.getAllSources();\n    const activeSources = allSources.filter(source => source.status === 'active');\n\n    for (const source of activeSources) {\n      try {\n        logger.info(`Scraping source: ${source.name} (Auth required: ${source.requiresAuth})`);\n        const sourceArticles = await this.scrapeSource(source);\n        articles.push(...sourceArticles);\n        \n        // Rate limiting - wait between sources\n        await new Promise(resolve => setTimeout(resolve, 2000));\n      } catch (error: any) {\n        logger.error(`Error scraping ${source.name}:`, error);\n      }\n    }\n\n    return articles;\n  }\n\n  async scrapePublicSources(): Promise<ScrapedArticle[]> {\n    const articles: ScrapedArticle[] = [];\n    const allSources = this.getAllSources();\n    const publicSources = allSources.filter(source => !source.requiresAuth && source.status === 'active');\n\n    for (const source of publicSources) {\n      try {\n        logger.info(`Scraping public source: ${source.name}`);\n        const sourceArticles = await this.scrapeSource(source);\n        articles.push(...sourceArticles);\n        \n        // Rate limiting\n        await new Promise(resolve => setTimeout(resolve, 1500));\n      } catch (error: any) {\n        logger.error(`Error scraping ${source.name}:`, error);\n      }\n    }\n\n    return articles;\n  }\n\n  private async scrapeSource(source: NewsletterSource): Promise<ScrapedArticle[]> {\n    switch (source.id) {\n      case 'medtech_dive':\n        return this.scrapeMedTechDive(source);\n      case 'medtech_europe':\n        return this.scrapeMedTechEurope(source);\n      case 'medical_device_network':\n        return this.scrapeMedicalDeviceNetwork(source);\n      case 'medtech_insights':\n        return this.scrapeMedTechInsights(source);\n      case 'citeline_medtech':\n        return this.scrapeCitelineMedtech(source);\n      case 'medtech_strategist':\n        return this.scrapeMedTechStrategist(source);\n      case 'bioworld':\n        return this.scrapeBioWorld(source);\n      default:\n        logger.warn(`No scraper implemented for source: ${source.id}`);\n        return this.generateFallbackArticles(source);\n    }\n  }\n\n  private async scrapeMedTechDive(source: NewsletterSource): Promise<ScrapedArticle[]> {\n    const articles: ScrapedArticle[] = [];\n    \n    try {\n      // Headers to appear as a regular browser\n      const headers = {\n        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',\n        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',\n        'Accept-Language': 'en-US,en;q=0.5',\n        'Accept-Encoding': 'gzip, deflate',\n        'Connection': 'keep-alive',\n      };\n\n      const response = await axios.get(source.url, { \n        headers,\n        timeout: 30000,\n        maxRedirects: 5\n      });\n\n      const $ = cheerio.load(response.data);\n      \n      // MedTech Dive article selectors (these would need to be refined based on actual site structure)\n      const articleSelectors = [\n        '.feed__item',\n        '.story-item',\n        'article',\n        '.news-item'\n      ];\n\n      let foundArticles = false;\n\n      for (const selector of articleSelectors) {\n        const articleElements = $(selector);\n        \n        if (articleElements.length > 0) {\n          foundArticles = true;\n          logger.info(`Found ${articleElements.length} articles using selector: ${selector}`);\n\n          articleElements.each((index, element) => {\n            if (index >= 10) return false; // Limit to 10 articles per source\n\n            const $article = $(element);\n            \n            // Extract article data\n            const title = $article.find('h1, h2, h3, .title, .headline').first().text().trim();\n            const url = $article.find('a').first().attr('href');\n            const dateText = $article.find('.date, .published, time').first().text().trim();\n            const author = $article.find('.author, .byline').first().text().trim();\n            const summary = $article.find('.summary, .excerpt, p').first().text().trim();\n\n            if (title && title.length > 10) {\n              // Construct full URL if relative\n              let articleUrl = url || source.url;\n              if (url && !url.startsWith('http')) {\n                const baseUrl = new URL(source.url).origin;\n                articleUrl = baseUrl + (url.startsWith('/') ? url : '/' + url);\n              }\n\n              // Parse date or use current date\n              let publicationDate = new Date().toISOString();\n              if (dateText) {\n                const parsedDate = new Date(dateText);\n                if (!isNaN(parsedDate.getTime())) {\n                  publicationDate = parsedDate.toISOString();\n                }\n              }\n\n              articles.push({\n                source_name: source.name,\n                article_title: title,\n                article_url: articleUrl,\n                publication_date: publicationDate,\n                author: author || undefined,\n                content_text: summary || title,\n                keywords: this.extractKeywords(title + ' ' + summary, source.category),\n                is_gated: false,\n                scrape_timestamp: new Date().toISOString()\n              });\n            }\n          });\n          break; // Stop after finding articles with first working selector\n        }\n      }\n\n      if (!foundArticles) {\n        logger.warn(`No articles found for ${source.name} with any selector`);\n        // Generate fallback articles based on source category to ensure we have content\n        articles.push(...this.generateFallbackArticles(source));\n      }\n\n    } catch (error: any) {\n      logger.error(`Error scraping ${source.name}:`, error.message);\n      // Generate fallback articles on error\n      articles.push(...this.generateFallbackArticles(source));\n    }\n\n    return articles;\n  }\n\n  private async scrapeMedTechEurope(source: NewsletterSource): Promise<ScrapedArticle[]> {\n    const articles: ScrapedArticle[] = [];\n    \n    try {\n      const headers = {\n        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',\n        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',\n        'Accept-Language': 'en-US,en;q=0.5',\n        'Accept-Encoding': 'gzip, deflate, br',\n        'DNT': '1',\n        'Connection': 'keep-alive',\n        'Upgrade-Insecure-Requests': '1',\n      };\n\n      const response = await axios.get(source.url, { \n        headers,\n        timeout: 30000,\n        maxRedirects: 5\n      });\n\n      const $ = cheerio.load(response.data);\n      \n      // MedTech Europe newsletter selectors\n      const articleSelectors = [\n        '.newsletter-item',\n        '.news-item',\n        '.content-item',\n        'article.post',\n        '.entry-content'\n      ];\n\n      let foundArticles = false;\n\n      for (const selector of articleSelectors) {\n        const articleElements = $(selector);\n        \n        if (articleElements.length > 0) {\n          foundArticles = true;\n          logger.info(`Found ${articleElements.length} articles from MedTech Europe using selector: ${selector}`);\n\n          articleElements.each((index, element) => {\n            if (index >= 8) return false;\n\n            const $article = $(element);\n            \n            const title = $article.find('h1, h2, h3, .title, .headline').first().text().trim();\n            const url = $article.find('a').first().attr('href');\n            const dateText = $article.find('.date, .published, time').first().text().trim();\n            const summary = $article.find('.summary, .excerpt, p').first().text().trim();\n\n            if (title && title.length > 10) {\n              let articleUrl = url || source.url;\n              if (url && !url.startsWith('http')) {\n                const baseUrl = new URL(source.url).origin;\n                articleUrl = baseUrl + (url.startsWith('/') ? url : '/' + url);\n              }\n\n              let publicationDate = new Date().toISOString();\n              if (dateText) {\n                const parsedDate = new Date(dateText);\n                if (!isNaN(parsedDate.getTime())) {\n                  publicationDate = parsedDate.toISOString();\n                }\n              }\n\n              articles.push({\n                source_name: source.name,\n                article_title: title,\n                article_url: articleUrl,\n                publication_date: publicationDate,\n                content_text: summary || title,\n                keywords: this.extractKeywords(title + ' ' + summary, source.category),\n                is_gated: source.requiresAuth,\n                scrape_timestamp: new Date().toISOString()\n              });\n            }\n          });\n          break;\n        }\n      }\n\n      if (!foundArticles) {\n        logger.info(`No articles found for MedTech Europe, generating fallback content`);\n        articles.push(...this.generateFallbackArticles(source));\n      }\n\n    } catch (error: any) {\n      logger.error(`Error scraping MedTech Europe:`, error.message);\n      articles.push(...this.generateFallbackArticles(source));\n    }\n\n    return articles;\n  }\n\n  private async scrapeMedicalDeviceNetwork(source: NewsletterSource): Promise<ScrapedArticle[]> {\n    const articles: ScrapedArticle[] = [];\n    \n    try {\n      const headers = {\n        'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',\n        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',\n        'Accept-Language': 'en-GB,en;q=0.5',\n        'Cache-Control': 'no-cache',\n        'Pragma': 'no-cache'\n      };\n\n      const response = await axios.get(source.url, { \n        headers,\n        timeout: 25000,\n        maxRedirects: 3\n      });\n\n      const $ = cheerio.load(response.data);\n      \n      // Medical Device Network selectors\n      const articleSelectors = [\n        '.newsletter-archive-item',\n        '.archive-item',\n        '.news-list-item',\n        '.content-block',\n        'article'\n      ];\n\n      let foundArticles = false;\n\n      for (const selector of articleSelectors) {\n        const articleElements = $(selector);\n        \n        if (articleElements.length > 0) {\n          foundArticles = true;\n          logger.info(`Found ${articleElements.length} articles from Medical Device Network`);\n\n          articleElements.each((index, element) => {\n            if (index >= 6) return false;\n\n            const $article = $(element);\n            \n            const title = $article.find('h1, h2, h3, .title').first().text().trim();\n            const url = $article.find('a').first().attr('href');\n            const dateText = $article.find('.date, time, .published').first().text().trim();\n            const summary = $article.find('p, .excerpt, .description').first().text().trim();\n\n            if (title && title.length > 15) {\n              let articleUrl = url || source.url;\n              if (url && !url.startsWith('http')) {\n                const baseUrl = new URL(source.url).origin;\n                articleUrl = baseUrl + (url.startsWith('/') ? url : '/' + url);\n              }\n\n              articles.push({\n                source_name: source.name,\n                article_title: title,\n                article_url: articleUrl,\n                publication_date: this.parseDate(dateText),\n                content_text: summary || title,\n                keywords: this.extractKeywords(title + ' ' + summary, source.category),\n                is_gated: source.requiresAuth,\n                scrape_timestamp: new Date().toISOString()\n              });\n            }\n          });\n          break;\n        }\n      }\n\n      if (!foundArticles) {\n        articles.push(...this.generateFallbackArticles(source));\n      }\n\n    } catch (error: any) {\n      logger.error(`Error scraping Medical Device Network:`, error.message);\n      articles.push(...this.generateFallbackArticles(source));\n    }\n\n    return articles;\n  }\n\n  private async scrapeMedTechInsights(source: NewsletterSource): Promise<ScrapedArticle[]> {\n    const articles: ScrapedArticle[] = [];\n    \n    try {\n      const headers = {\n        'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',\n        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8'\n      };\n\n      const response = await axios.get(source.url, { \n        headers,\n        timeout: 20000,\n        maxRedirects: 5\n      });\n\n      const $ = cheerio.load(response.data);\n      \n      const articleSelectors = [\n        '.post',\n        '.blog-post',\n        '.insight-item',\n        '.article-item',\n        'article'\n      ];\n\n      let foundArticles = false;\n\n      for (const selector of articleSelectors) {\n        const articleElements = $(selector);\n        \n        if (articleElements.length > 0) {\n          foundArticles = true;\n          logger.info(`Found ${articleElements.length} articles from Med-Tech Insights`);\n\n          articleElements.each((index, element) => {\n            if (index >= 7) return false;\n\n            const $article = $(element);\n            \n            const title = $article.find('h1, h2, h3, .post-title, .title').first().text().trim();\n            const url = $article.find('a').first().attr('href');\n            const dateText = $article.find('.date, .post-date, time').first().text().trim();\n            const author = $article.find('.author, .by-author').first().text().trim();\n            const summary = $article.find('.excerpt, .summary, p').first().text().trim();\n\n            if (title && title.length > 10) {\n              let articleUrl = url || source.url;\n              if (url && !url.startsWith('http')) {\n                const baseUrl = new URL(source.url).origin;\n                articleUrl = baseUrl + (url.startsWith('/') ? url : '/' + url);\n              }\n\n              articles.push({\n                source_name: source.name,\n                article_title: title,\n                article_url: articleUrl,\n                publication_date: this.parseDate(dateText),\n                author: author || undefined,\n                content_text: summary || title,\n                keywords: this.extractKeywords(title + ' ' + summary, source.category),\n                is_gated: source.requiresAuth,\n                scrape_timestamp: new Date().toISOString()\n              });\n            }\n          });\n          break;\n        }\n      }\n\n      if (!foundArticles) {\n        articles.push(...this.generateFallbackArticles(source));\n      }\n\n    } catch (error: any) {\n      logger.error(`Error scraping Med-Tech Insights:`, error.message);\n      articles.push(...this.generateFallbackArticles(source));\n    }\n\n    return articles;\n  }\n\n  private async scrapeCitelineMedtech(source: NewsletterSource): Promise<ScrapedArticle[]> {\n    const articles: ScrapedArticle[] = [];\n    \n    try {\n      const headers = {\n        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/120.0',\n        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8',\n        'Accept-Language': 'en-US,en;q=0.5',\n        'Accept-Encoding': 'gzip, deflate, br'\n      };\n\n      const response = await axios.get(source.url, { \n        headers,\n        timeout: 30000\n      });\n\n      const $ = cheerio.load(response.data);\n      \n      const articleSelectors = [\n        '.insight-article',\n        '.medtech-article',\n        '.news-article',\n        '.content-item',\n        'article'\n      ];\n\n      let foundArticles = false;\n\n      for (const selector of articleSelectors) {\n        const articleElements = $(selector);\n        \n        if (articleElements.length > 0) {\n          foundArticles = true;\n          logger.info(`Found ${articleElements.length} articles from Citeline Medtech`);\n\n          articleElements.each((index, element) => {\n            if (index >= 5) return false;\n\n            const $article = $(element);\n            \n            const title = $article.find('h1, h2, h3, .article-title').first().text().trim();\n            const url = $article.find('a').first().attr('href');\n            const dateText = $article.find('.published-date, .date, time').first().text().trim();\n            const summary = $article.find('.article-summary, .excerpt, p').first().text().trim();\n\n            if (title && title.length > 12) {\n              let articleUrl = url || source.url;\n              if (url && !url.startsWith('http')) {\n                const baseUrl = new URL(source.url).origin;\n                articleUrl = baseUrl + (url.startsWith('/') ? url : '/' + url);\n              }\n\n              articles.push({\n                source_name: source.name,\n                article_title: title,\n                article_url: articleUrl,\n                publication_date: this.parseDate(dateText),\n                content_text: summary || title,\n                keywords: this.extractKeywords(title + ' ' + summary, source.category),\n                is_gated: source.requiresAuth,\n                scrape_timestamp: new Date().toISOString()\n              });\n            }\n          });\n          break;\n        }\n      }\n\n      if (!foundArticles) {\n        articles.push(...this.generateFallbackArticles(source));\n      }\n\n    } catch (error: any) {\n      logger.error(`Error scraping Citeline Medtech:`, error.message);\n      articles.push(...this.generateFallbackArticles(source));\n    }\n\n    return articles;\n  }\n\n  private async scrapeMedTechStrategist(source: NewsletterSource): Promise<ScrapedArticle[]> {\n    const articles: ScrapedArticle[] = [];\n    \n    try {\n      const headers = {\n        'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.1 Safari/605.1.15',\n        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8'\n      };\n\n      const response = await axios.get(source.url, { \n        headers,\n        timeout: 25000\n      });\n\n      const $ = cheerio.load(response.data);\n      \n      const articleSelectors = [\n        '.newsletter-item',\n        '.strategy-article',\n        '.medtech-news',\n        '.content-block',\n        'article'\n      ];\n\n      let foundArticles = false;\n\n      for (const selector of articleSelectors) {\n        const articleElements = $(selector);\n        \n        if (articleElements.length > 0) {\n          foundArticles = true;\n          logger.info(`Found ${articleElements.length} articles from MedTech Strategist`);\n\n          articleElements.each((index, element) => {\n            if (index >= 4) return false;\n\n            const $article = $(element);\n            \n            const title = $article.find('h1, h2, h3, .title').first().text().trim();\n            const url = $article.find('a').first().attr('href');\n            const dateText = $article.find('.date, time').first().text().trim();\n            const summary = $article.find('.summary, p').first().text().trim();\n\n            if (title && title.length > 15) {\n              let articleUrl = url || source.url;\n              if (url && !url.startsWith('http')) {\n                const baseUrl = new URL(source.url).origin;\n                articleUrl = baseUrl + (url.startsWith('/') ? url : '/' + url);\n              }\n\n              articles.push({\n                source_name: source.name,\n                article_title: title,\n                article_url: articleUrl,\n                publication_date: this.parseDate(dateText),\n                content_text: summary || title,\n                keywords: this.extractKeywords(title + ' ' + summary, source.category),\n                is_gated: source.requiresAuth,\n                scrape_timestamp: new Date().toISOString()\n              });\n            }\n          });\n          break;\n        }\n      }\n\n      if (!foundArticles) {\n        articles.push(...this.generateFallbackArticles(source));\n      }\n\n    } catch (error: any) {\n      logger.error(`Error scraping MedTech Strategist:`, error.message);\n      articles.push(...this.generateFallbackArticles(source));\n    }\n\n    return articles;\n  }\n\n  private async scrapeBioWorld(source: NewsletterSource): Promise<ScrapedArticle[]> {\n    const articles: ScrapedArticle[] = [];\n    \n    try {\n      const headers = {\n        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36 Edg/120.0.0.0',\n        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8'\n      };\n\n      const response = await axios.get(source.url, { \n        headers,\n        timeout: 30000\n      });\n\n      const $ = cheerio.load(response.data);\n      \n      const articleSelectors = [\n        '.bioworld-article',\n        '.medtech-news',\n        '.news-item',\n        '.article-preview',\n        'article'\n      ];\n\n      let foundArticles = false;\n\n      for (const selector of articleSelectors) {\n        const articleElements = $(selector);\n        \n        if (articleElements.length > 0) {\n          foundArticles = true;\n          logger.info(`Found ${articleElements.length} articles from BioWorld`);\n\n          articleElements.each((index, element) => {\n            if (index >= 6) return false;\n\n            const $article = $(element);\n            \n            const title = $article.find('h1, h2, h3, .headline').first().text().trim();\n            const url = $article.find('a').first().attr('href');\n            const dateText = $article.find('.publish-date, .date, time').first().text().trim();\n            const author = $article.find('.author, .byline').first().text().trim();\n            const summary = $article.find('.summary, .excerpt, p').first().text().trim();\n\n            if (title && title.length > 10) {\n              let articleUrl = url || source.url;\n              if (url && !url.startsWith('http')) {\n                const baseUrl = new URL(source.url).origin;\n                articleUrl = baseUrl + (url.startsWith('/') ? url : '/' + url);\n              }\n\n              articles.push({\n                source_name: source.name,\n                article_title: title,\n                article_url: articleUrl,\n                publication_date: this.parseDate(dateText),\n                author: author || undefined,\n                content_text: summary || title,\n                keywords: this.extractKeywords(title + ' ' + summary, source.category),\n                is_gated: source.requiresAuth,\n                scrape_timestamp: new Date().toISOString()\n              });\n            }\n          });\n          break;\n        }\n      }\n\n      if (!foundArticles) {\n        articles.push(...this.generateFallbackArticles(source));\n      }\n\n    } catch (error: any) {\n      logger.error(`Error scraping BioWorld:`, error.message);\n      articles.push(...this.generateFallbackArticles(source));\n    }\n\n    return articles;\n  }\n\n  private parseDate(dateText: string): string {\n    if (!dateText) {\n      return new Date().toISOString();\n    }\n\n    const cleanedDate = dateText.replace(/Published:|Posted:|Date:/gi, '').trim();\n    const parsedDate = new Date(cleanedDate);\n    \n    if (!isNaN(parsedDate.getTime())) {\n      return parsedDate.toISOString();\n    }\n\n    // Try common date patterns\n    const patterns = [\n      /(\\d{1,2})\\/(\\d{1,2})\\/(\\d{4})/,  // MM/DD/YYYY\n      /(\\d{1,2})-(\\d{1,2})-(\\d{4})/,   // MM-DD-YYYY\n      /(\\d{4})-(\\d{1,2})-(\\d{1,2})/,   // YYYY-MM-DD\n    ];\n\n    for (const pattern of patterns) {\n      const match = cleanedDate.match(pattern);\n      if (match) {\n        const testDate = new Date(match[0]);\n        if (!isNaN(testDate.getTime())) {\n          return testDate.toISOString();\n        }\n      }\n    }\n\n    // Default to current date if parsing fails\n    return new Date().toISOString();\n  }\n\n  private generateFallbackArticles(source: NewsletterSource): ScrapedArticle[] {\n    const categoryArticles = {\n      industry_newsletter: [\n        'KI-Revolution in der Medizintechnik: Neue FDA-Genehmigungen für ML-Algorithmen',\n        'Digital Health Funding erreicht Rekordhoch von $8.2 Milliarden im Q3 2024',\n        'Wearable Medical Devices: Marktprognose zeigt 15% CAGR bis 2028',\n        'Robotik-Chirurgie: Da Vinci Xi System erhält erweiterte EU-Zulassung',\n        'Implantierbare Sensoren revolutionieren Diabetes-Management'\n      ],\n      regulatory_newsletter: [\n        'FDA veröffentlicht neue Guidance für Software als Medizinprodukt (SaMD)',\n        'EU MDR: Neue Anforderungen für klinische Studien ab Januar 2025',\n        'Swissmedic harmonisiert Zulassungsverfahren mit EU-Standards',\n        'MHRA Brexit-Update: Neue Anforderungen für Medizinprodukte-Import',\n        'ISO 13485:2024 - Wichtige Änderungen im Qualitätsmanagement'\n      ],\n      market_analysis: [\n        'Global MedTech Market: $595 Milliarden Volumen bis 2025 prognostiziert',\n        'Venture Capital Investment in Digital Health steigt um 23%',\n        'M&A-Aktivitäten im MedTech-Sektor erreichen 5-Jahres-Hoch',\n        'Supply Chain Resilience: Neue Strategien nach COVID-19',\n        'Emerging Markets: Asien-Pazifik führt MedTech-Wachstum an'\n      ]\n    };\n\n    const titles = categoryArticles[source.category] || categoryArticles.industry_newsletter;\n    const articlesToGenerate = 0; // MOCK DATA ENTFERNT - Keine automatische Artikel-Generierung\n\n    return titles.slice(0, articlesToGenerate).map(title => ({\n      source_name: source.name,\n      article_title: title,\n      article_url: source.url,\n      publication_date: new Date().toISOString(), // MOCK DATA ENTFERNT - Feste Zeit statt random\n      content_text: this.generateArticleContent(title, source),\n      keywords: this.extractKeywords(title, source.category),\n      is_gated: source.requiresAuth,\n      scrape_timestamp: new Date().toISOString()\n    }));\n  }\n\n  private generateArticleContent(title: string, source: NewsletterSource): string {\n    const premiumContent = source.requiresAuth ? \n      \"Premium-Inhalt basierend auf Branchenexpertise und verifizierten Quellen. \" : \n      \"Öffentlich verfügbare Informationen aus vertrauenswürdigen Industriequellen. \";\n      \n    return `${premiumContent}${title}\n\nDieser Artikel stammt aus ${source.name} und behandelt wichtige Entwicklungen im MedTech-Bereich. \n\nDie Inhalte basieren auf authentischen Newsletter-Quellen und bieten Einblicke in:\n- Aktuelle Markttrends und Entwicklungen\n- Regulatorische Änderungen und Compliance-Anforderungen  \n- Technologische Innovationen und deren Auswirkungen\n- Strategische Geschäftsentscheidungen der Branche\n\nQuelle: ${source.name} (${source.category})\nAuthentifizierung erforderlich: ${source.requiresAuth ? 'Ja' : 'Nein'}\nURL: ${source.url}\n\nFür vollständige Details und weitere Analysen besuchen Sie die ursprüngliche Quelle.`;\n  }\n\n  private extractKeywords(text: string, category: string): string[] {\n    const keywordMap = {\n      industry_newsletter: ['MedTech', 'Innovation', 'Branche', 'Technologie', 'Digital Health'],\n      regulatory_newsletter: ['Regulatorik', 'Compliance', 'FDA', 'EU MDR', 'Zulassung'],\n      market_analysis: ['Marktanalyse', 'Investment', 'Trends', 'Prognosen', 'M&A']\n    };\n    \n    const baseKeywords = keywordMap[category as keyof typeof keywordMap] || ['MedTech'];\n    \n    // Extract additional keywords from title\n    const additionalKeywords = text.toLowerCase()\n      .split(/\\s+/)\n      .filter(word => word.length > 4)\n      .filter(word => ['medtech', 'medical', 'device', 'health', 'digital', 'innovation'].includes(word))\n      .slice(0, 3);\n    \n    return [...baseKeywords, ...additionalKeywords].slice(0, 5);\n  }\n\n  getSources(): NewsletterSource[] {\n    return this.getAllSources();\n  }\n\n  getStats() {\n    const allSources = this.getAllSources();\n    const activeSources = allSources.filter(s => s.status === 'active').length;\n    const configuredSources = allSources.filter(s => s.status === 'configured').length;\n    const authRequired = allSources.filter(s => s.requiresAuth).length;\n    \n    const categories = allSources.reduce((acc, source) => {\n      acc[source.category] = (acc[source.category] || 0) + 1;\n      return acc;\n    }, {} as Record<string, number>);\n\n    return {\n      totalSources: allSources.length,\n      activeSources,\n      configuredSources,\n      authRequired,\n      categories\n    };\n  }\n}\n\nexport const realNewsletterScraper = new RealNewsletterScraper();"]}