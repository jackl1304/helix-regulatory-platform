{"version":3,"file":"apiManagementService.js","sourceRoot":"","sources":["../../server/services/apiManagementService.ts"],"names":[],"mappings":"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","sourcesContent":["import { storage } from '../storage';\nimport type { InsertRegulatoryUpdate } from '@shared/schema';\n\n/**\n * Zentrales API-Management-System für alle Datenquellen\n * Basierend auf der Deep Search Analyse der verfügbaren APIs\n */\n\nexport interface DataSource {\n  id: string;\n  name: string;\n  type: 'official_api' | 'web_scraping' | 'partner_api';\n  endpoint?: string;\n  requiresAuth: boolean;\n  priority: 'high' | 'medium' | 'low';\n  region: string;\n  status: 'active' | 'inactive' | 'testing';\n  lastSync?: Date;\n  errorCount: number;\n}\n\nexport interface APIResponse {\n  success: boolean;\n  data?: any[];\n  error?: string;\n  rateLimitRemaining?: number;\n  nextSyncTime?: Date;\n}\n\nexport class APIManagementService {\n  private dataSources: Map<string, DataSource> = new Map();\n  private rateLimits: Map<string, { requests: number; resetTime: Date }> = new Map();\n\n  constructor() {\n    this.initializeDataSources();\n  }\n\n  private initializeDataSources() {\n    // Priorität 1: Offizielle APIs mit direktem Zugang\n    this.registerDataSource({\n      id: 'fda_openfda',\n      name: 'FDA OpenFDA API',\n      type: 'official_api',\n      endpoint: 'https://api.fda.gov',\n      requiresAuth: false, // API Key empfohlen aber nicht erforderlich\n      priority: 'high',\n      region: 'United States',\n      status: 'active',\n      errorCount: 0\n    });\n\n    // Priorität 2: APIs mit Registrierungsanforderung\n    this.registerDataSource({\n      id: 'ema_pms',\n      name: 'EMA Product Management Service',\n      type: 'official_api',\n      endpoint: 'https://api.ema.europa.eu',\n      requiresAuth: true, // Erfordert EMA-Benutzerkonto\n      priority: 'high',\n      region: 'European Union',\n      status: 'testing', // Benötigt Zugangsdaten\n      errorCount: 0\n    });\n\n    this.registerDataSource({\n      id: 'mhra_more',\n      name: 'MHRA MORE Platform API',\n      type: 'official_api',\n      endpoint: 'https://www.gov.uk/api/more',\n      requiresAuth: true, // Erfordert MORE Portal Registrierung\n      priority: 'medium',\n      region: 'United Kingdom',\n      status: 'testing', // Benötigt Zugangsdaten\n      errorCount: 0\n    });\n\n    // Priorität 3: Web Scraping für Behörden ohne APIs\n    this.registerDataSource({\n      id: 'bfarm_scraping',\n      name: 'BfArM Web Scraping',\n      type: 'web_scraping',\n      endpoint: 'https://www.bfarm.de',\n      requiresAuth: false,\n      priority: 'medium',\n      region: 'Germany',\n      status: 'active',\n      errorCount: 0\n    });\n\n    this.registerDataSource({\n      id: 'swissmedic_scraping',\n      name: 'Swissmedic Web Scraping',\n      type: 'web_scraping',\n      endpoint: 'https://www.swissmedic.ch',\n      requiresAuth: false,\n      priority: 'medium',\n      region: 'Switzerland',\n      status: 'active',\n      errorCount: 0\n    });\n\n    this.registerDataSource({\n      id: 'health_canada_scraping',\n      name: 'Health Canada Web Scraping',\n      type: 'web_scraping',\n      endpoint: 'https://www.canada.ca/en/health-canada',\n      requiresAuth: false,\n      priority: 'medium',\n      region: 'Canada',\n      status: 'active',\n      errorCount: 0\n    });\n  }\n\n  private registerDataSource(source: DataSource) {\n    this.dataSources.set(source.id, source);\n    console.log(`[API Management] Registered data source: ${source.name} (${source.type})`);\n  }\n\n  /**\n   * Rate Limiting Management\n   */\n  private async checkRateLimit(sourceId: string): Promise<boolean> {\n    const limit = this.rateLimits.get(sourceId);\n    if (!limit) return true;\n\n    if (limit.resetTime < new Date()) {\n      this.rateLimits.delete(sourceId);\n      return true;\n    }\n\n    return limit.requests > 0;\n  }\n\n  private updateRateLimit(sourceId: string, requestsRemaining: number, resetTime: Date) {\n    this.rateLimits.set(sourceId, {\n      requests: requestsRemaining,\n      resetTime\n    });\n  }\n\n  /**\n   * Zentrale API-Aufruf-Methode mit einheitlichem Error Handling\n   */\n  async callAPI(sourceId: string, endpoint: string, options?: any): Promise<APIResponse> {\n    const source = this.dataSources.get(sourceId);\n    if (!source) {\n      return { success: false, error: `Unknown data source: ${sourceId}` };\n    }\n\n    // Rate Limit Check\n    if (!(await this.checkRateLimit(sourceId))) {\n      return { \n        success: false, \n        error: 'Rate limit exceeded',\n        nextSyncTime: this.rateLimits.get(sourceId)?.resetTime || new Date()\n      };\n    }\n\n    try {\n      const response = await this.executeAPICall(source, endpoint, options);\n      \n      // Success - Reset error count\n      source.errorCount = 0;\n      source.lastSync = new Date();\n      \n      return {\n        success: true,\n        data: response.data,\n        rateLimitRemaining: response.rateLimitRemaining\n      };\n\n    } catch (error) {\n      source.errorCount++;\n      \n      // Automatic deactivation after 5 consecutive errors\n      if (source.errorCount >= 5) {\n        source.status = 'inactive';\n        console.error(`[API Management] Deactivating source ${sourceId} due to repeated errors`);\n      }\n\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error'\n      };\n    }\n  }\n\n  private async executeAPICall(source: DataSource, endpoint: string, options?: any): Promise<any> {\n    const fullUrl = `${source.endpoint}${endpoint}`;\n    \n    switch (source.type) {\n      case 'official_api':\n        return await this.callOfficialAPI(fullUrl, source, options);\n      case 'web_scraping':\n        return await this.scrapeWebsite(fullUrl, source, options);\n      case 'partner_api':\n        return await this.callPartnerAPI(fullUrl, source, options);\n      default:\n        throw new Error(`Unsupported source type: ${source.type}`);\n    }\n  }\n\n  private async callOfficialAPI(url: string, source: DataSource, options?: any): Promise<any> {\n    const headers: Record<string, string> = {\n      'User-Agent': 'Helix-Regulatory-Intelligence/1.0',\n      'Accept': 'application/json'\n    };\n\n    // Add authentication headers if required\n    if (source.requiresAuth && options?.apiKey) {\n      headers['Authorization'] = `Bearer ${options.apiKey}`;\n    }\n\n    const response = await fetch(url, {\n      method: options?.method || 'GET',\n      headers,\n      body: options?.body ? JSON.stringify(options.body) : undefined,\n    });\n\n    if (!response.ok) {\n      throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n    }\n\n    // Extract rate limit info from headers\n    const rateLimitRemaining = response.headers.get('X-RateLimit-Remaining');\n    const rateLimitReset = response.headers.get('X-RateLimit-Reset');\n\n    if (rateLimitRemaining && rateLimitReset) {\n      this.updateRateLimit(\n        source.id,\n        parseInt(rateLimitRemaining),\n        new Date(parseInt(rateLimitReset) * 1000)\n      );\n    }\n\n    return {\n      data: await response.json(),\n      rateLimitRemaining: rateLimitRemaining ? parseInt(rateLimitRemaining) : undefined\n    };\n  }\n\n  private async scrapeWebsite(url: string, source: DataSource, options?: any): Promise<any> {\n    // 🔴 MOCK DATA - Web Scraping Implementation würde hier erfolgen\n    // 🔴 MOCK DATA - Für jetzt Placeholder mit Logging - AUTHENTIC SCRAPER REQUIRED\n    console.log(`[API Management] Web scraping ${url} - Implementation needed`);\n    \n    // Return structured data format\n    return {\n      data: [],\n      rateLimitRemaining: undefined\n    };\n  }\n\n  private async callPartnerAPI(url: string, source: DataSource, options?: any): Promise<any> {\n    // Partner API calls (wie GRIP) würden hier implementiert\n    console.log(`[API Management] Partner API call to ${url}`);\n    \n    return {\n      data: [],\n      rateLimitRemaining: undefined\n    };\n  }\n\n  /**\n   * Get all active data sources\n   */\n  getActiveDataSources(): DataSource[] {\n    return Array.from(this.dataSources.values()).filter(source => source.status === 'active');\n  }\n\n  /**\n   * Get data sources by region\n   */\n  getDataSourcesByRegion(region: string): DataSource[] {\n    return Array.from(this.dataSources.values()).filter(source => source.region === region);\n  }\n\n  /**\n   * Get data sources requiring authentication\n   */\n  getUnauthenticatedSources(): DataSource[] {\n    return Array.from(this.dataSources.values()).filter(\n      source => source.requiresAuth && source.status === 'testing'\n    );\n  }\n\n  /**\n   * Health check for all data sources\n   */\n  async performHealthCheck(): Promise<{ healthy: number; unhealthy: number; details: any[] }> {\n    const results = [];\n    let healthy = 0;\n    let unhealthy = 0;\n\n    for (const source of this.dataSources.values()) {\n      try {\n        // Simple health check endpoint\n        const result = await this.callAPI(source.id, '/health', { timeout: 5000 });\n        if (result.success) {\n          healthy++;\n          results.push({ sourceId: source.id, status: 'healthy', lastSync: source.lastSync });\n        } else {\n          unhealthy++;\n          results.push({ sourceId: source.id, status: 'unhealthy', error: result.error });\n        }\n      } catch (error) {\n        unhealthy++;\n        results.push({ \n          sourceId: source.id, \n          status: 'unhealthy', \n          error: error instanceof Error ? error.message : 'Unknown error' \n        });\n      }\n    }\n\n    return { healthy, unhealthy, details: results };\n  }\n}\n\nexport const apiManagementService = new APIManagementService();"]}