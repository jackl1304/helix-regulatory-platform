{"version":3,"file":"predictiveAnalyticsService.js","sourceRoot":"","sources":["../../server/services/predictiveAnalyticsService.ts"],"names":[],"mappings":"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","sourcesContent":["import { storage } from '../storage';\n\ninterface PredictionRequest {\n  deviceCategory?: string;\n  manufacturer?: string;\n  jurisdiction?: string;\n  timeHorizon: '30d' | '90d' | '180d' | '1y';\n  predictionType: 'safety_alerts' | 'approvals' | 'regulatory_changes' | 'market_trends';\n}\n\ninterface PredictionResult {\n  id: string;\n  predictionType: string;\n  targetPeriod: string;\n  confidence: number;\n  predictions: Prediction[];\n  riskFactors: RiskFactor[];\n  recommendations: string[];\n  basedOnDataPoints: number;\n  generatedAt: Date;\n}\n\ninterface Prediction {\n  event: string;\n  probability: number;\n  timeframe: string;\n  impactLevel: 'low' | 'medium' | 'high' | 'critical';\n  confidence: number;\n  supportingData: string[];\n}\n\ninterface RiskFactor {\n  factor: string;\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  likelihood: number;\n  mitigationStrategies: string[];\n}\n\ninterface ComplianceRisk {\n  jurisdiction: string;\n  riskLevel: 'low' | 'medium' | 'high' | 'critical';\n  factors: string[];\n  timeline: string;\n  recommendations: string[];\n}\n\ninterface MarketOpportunity {\n  region: string;\n  deviceCategory: string;\n  opportunityScore: number;\n  timeline: string;\n  requirements: string[];\n  competitiveFactors: string[];\n}\n\nexport class PredictiveAnalyticsService {\n  private readonly minimumDataPoints = 10;\n  private readonly confidenceThreshold = 0.6;\n  \n  async generatePredictions(request: PredictionRequest): Promise<PredictionResult> {\n    try {\n      console.log(`[Predictive] Generating ${request.predictionType} predictions for ${request.timeHorizon}`);\n      \n      // Get historical data for analysis\n      const historicalData = await this.getHistoricalData(request);\n      \n      if (historicalData.length < this.minimumDataPoints) {\n        throw new Error(`Insufficient data for prediction (${historicalData.length} points, minimum ${this.minimumDataPoints})`);\n      }\n      \n      // Generate predictions based on type\n      const predictions = await this.analyzePredictionType(request, historicalData);\n      const riskFactors = await this.identifyRiskFactors(request, historicalData);\n      const recommendations = this.generateRecommendations(predictions, riskFactors);\n      \n      const result: PredictionResult = {\n        id: `prediction-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n        predictionType: request.predictionType,\n        targetPeriod: request.timeHorizon,\n        confidence: this.calculateOverallConfidence(predictions),\n        predictions,\n        riskFactors,\n        recommendations,\n        basedOnDataPoints: historicalData.length,\n        generatedAt: new Date()\n      };\n      \n      console.log(`[Predictive] Generated ${predictions.length} predictions with ${result.confidence}% confidence`);\n      return result;\n    } catch (error) {\n      console.error('[Predictive] Error generating predictions:', error);\n      throw error;\n    }\n  }\n\n  private async getHistoricalData(request: PredictionRequest): Promise<any[]> {\n    try {\n      const allUpdates = await storage.getAllRegulatoryUpdates();\n      const allLegalCases = await storage.getAllLegalCases();\n      \n      let filteredData = [...allUpdates];\n      \n      // Apply filters\n      if (request.deviceCategory) {\n        filteredData = filteredData.filter(item => \n          this.matchesDeviceCategory(item, request.deviceCategory!)\n        );\n      }\n      \n      if (request.manufacturer) {\n        filteredData = filteredData.filter(item => \n          this.matchesManufacturer(item, request.manufacturer!)\n        );\n      }\n      \n      if (request.jurisdiction) {\n        filteredData = filteredData.filter(item => \n          item.region?.toLowerCase().includes(request.jurisdiction!.toLowerCase()) ||\n          item.authority?.toLowerCase().includes(request.jurisdiction!.toLowerCase())\n        );\n      }\n      \n      // Include relevant legal cases for safety predictions\n      if (request.predictionType === 'safety_alerts') {\n        const relevantLegalCases = allLegalCases.filter(legalCase => {\n          if (request.deviceCategory) {\n            return this.matchesDeviceCategory(legalCase, request.deviceCategory);\n          }\n          return true;\n        });\n        filteredData.push(...relevantLegalCases);\n      }\n      \n      // Sort by date (most recent first)\n      return filteredData.sort((a, b) => \n        new Date(b.published_at || b.filed_date || 0).getTime() - \n        new Date(a.published_at || a.filed_date || 0).getTime()\n      );\n    } catch (error) {\n      console.error('[Predictive] Error getting historical data:', error);\n      return [];\n    }\n  }\n\n  private matchesDeviceCategory(item: any, category: string): boolean {\n    const content = (item.title + ' ' + item.content + ' ' + (item.device_type || '')).toLowerCase();\n    const categoryLower = category.toLowerCase();\n    \n    // Device category mapping\n    const categoryKeywords: Record<string, string[]> = {\n      'cardiac': ['cardiac', 'heart', 'pacemaker', 'defibrillator', 'stent'],\n      'orthopedic': ['orthopedic', 'bone', 'joint', 'hip', 'knee', 'spine'],\n      'diabetes': ['diabetes', 'insulin', 'glucose', 'cgm', 'blood sugar'],\n      'imaging': ['imaging', 'mri', 'ct', 'ultrasound', 'x-ray', 'scan'],\n      'software': ['software', 'ai', 'algorithm', 'digital', 'app'],\n      'ivd': ['diagnostic', 'test', 'assay', 'laboratory', 'biomarker']\n    };\n    \n    const keywords = categoryKeywords[categoryLower] || [categoryLower];\n    return keywords.some(keyword => content.includes(keyword));\n  }\n\n  private matchesManufacturer(item: any, manufacturer: string): boolean {\n    const content = (item.title + ' ' + item.content).toLowerCase();\n    return content.includes(manufacturer.toLowerCase());\n  }\n\n  private async analyzePredictionType(request: PredictionRequest, data: any[]): Promise<Prediction[]> {\n    switch (request.predictionType) {\n      case 'safety_alerts':\n        return this.predictSafetyAlerts(data, request.timeHorizon);\n      case 'approvals':\n        return this.predictApprovals(data, request.timeHorizon);\n      case 'regulatory_changes':\n        return this.predictRegulatoryChanges(data, request.timeHorizon);\n      case 'market_trends':\n        return this.predictMarketTrends(data, request.timeHorizon);\n      default:\n        throw new Error(`Unknown prediction type: ${request.predictionType}`);\n    }\n  }\n\n  private predictSafetyAlerts(data: any[], timeHorizon: string): Prediction[] {\n    const predictions: Prediction[] = [];\n    \n    // Analyze safety alert patterns\n    const safetyAlerts = data.filter(item => \n      this.isSafetyRelated(item.title + ' ' + item.content)\n    );\n    \n    const alertFrequency = this.calculateFrequency(safetyAlerts, timeHorizon);\n    \n    if (alertFrequency.trend === 'increasing') {\n      predictions.push({\n        event: 'Increased safety alert activity',\n        probability: Math.min(0.9, alertFrequency.rate * 1.2),\n        timeframe: this.getTimeframeFromHorizon(timeHorizon),\n        impactLevel: 'high',\n        confidence: 0.75,\n        supportingData: [\n          `${safetyAlerts.length} safety alerts in historical data`,\n          `${alertFrequency.rate.toFixed(2)} alerts per month trend`,\n          'Pattern analysis shows increasing regulatory scrutiny'\n        ]\n      });\n    }\n    \n    // Device-specific safety predictions\n    const deviceTypes = this.extractDeviceTypes(data);\n    for (const deviceType of deviceTypes.slice(0, 3)) { // Top 3 device types\n      const deviceAlerts = safetyAlerts.filter(alert => \n        this.matchesDeviceCategory(alert, deviceType)\n      );\n      \n      if (deviceAlerts.length >= 2) {\n        predictions.push({\n          event: `Potential safety concern for ${deviceType} devices`,\n          probability: Math.min(0.8, deviceAlerts.length / safetyAlerts.length + 0.3),\n          timeframe: this.getTimeframeFromHorizon(timeHorizon),\n          impactLevel: this.assessDeviceSafetyImpact(deviceType),\n          confidence: 0.65,\n          supportingData: [\n            `${deviceAlerts.length} historical alerts for ${deviceType}`,\n            'Similar device categories showing regulatory patterns',\n            'Post-market surveillance data indicates increased scrutiny'\n          ]\n        });\n      }\n    }\n    \n    return predictions;\n  }\n\n  private predictApprovals(data: any[], timeHorizon: string): Prediction[] {\n    const predictions: Prediction[] = [];\n    \n    // Analyze approval patterns\n    const approvals = data.filter(item => \n      this.isApprovalRelated(item.title + ' ' + item.content)\n    );\n    \n    const approvalFrequency = this.calculateFrequency(approvals, timeHorizon);\n    \n    predictions.push({\n      event: 'Device approval rate projection',\n      probability: 0.85,\n      timeframe: this.getTimeframeFromHorizon(timeHorizon),\n      impactLevel: 'medium',\n      confidence: 0.7,\n      supportingData: [\n        `${approvals.length} approvals in historical data`,\n        `Average ${approvalFrequency.rate.toFixed(1)} approvals per month`,\n        'Regulatory pathway analysis shows consistent patterns'\n      ]\n    });\n    \n    // Jurisdiction-specific approval predictions\n    const jurisdictions = Array.from(new Set(data.map(item => item.authority)));\n    for (const jurisdiction of jurisdictions.slice(0, 3)) {\n      const jurisdictionApprovals = approvals.filter(approval => \n        approval.authority === jurisdiction\n      );\n      \n      if (jurisdictionApprovals.length >= 3) {\n        predictions.push({\n          event: `${jurisdiction} approval timeline changes`,\n          probability: 0.6,\n          timeframe: this.getTimeframeFromHorizon(timeHorizon),\n          impactLevel: 'medium',\n          confidence: 0.6,\n          supportingData: [\n            `${jurisdictionApprovals.length} historical approvals`,\n            'Regulatory harmonization trends',\n            'Authority workload and priority shifts'\n          ]\n        });\n      }\n    }\n    \n    return predictions;\n  }\n\n  private predictRegulatoryChanges(data: any[], timeHorizon: string): Prediction[] {\n    const predictions: Prediction[] = [];\n    \n    // Analyze regulatory update patterns\n    const regulatoryUpdates = data.filter(item => \n      this.isRegulatoryChange(item.title + ' ' + item.content)\n    );\n    \n    const changeFrequency = this.calculateFrequency(regulatoryUpdates, timeHorizon);\n    \n    if (changeFrequency.trend === 'increasing') {\n      predictions.push({\n        event: 'Accelerated regulatory framework updates',\n        probability: 0.75,\n        timeframe: this.getTimeframeFromHorizon(timeHorizon),\n        impactLevel: 'high',\n        confidence: 0.8,\n        supportingData: [\n          `${regulatoryUpdates.length} regulatory changes identified`,\n          'Increasing frequency of framework updates',\n          'Global harmonization efforts driving changes'\n        ]\n      });\n    }\n    \n    // Technology-specific regulatory predictions\n    const emergingTechs = ['AI/ML', 'Digital Therapeutics', 'Personalized Medicine'];\n    for (const tech of emergingTechs) {\n      const techUpdates = data.filter(item => \n        this.matchesTechnology(item, tech)\n      );\n      \n      if (techUpdates.length >= 2) {\n        predictions.push({\n          event: `New ${tech} regulatory guidance`,\n          probability: 0.7,\n          timeframe: this.getTimeframeFromHorizon(timeHorizon),\n          impactLevel: 'high',\n          confidence: 0.65,\n          supportingData: [\n            `${techUpdates.length} related regulatory activities`,\n            'Technology adoption driving regulatory need',\n            'Industry stakeholder engagement increasing'\n          ]\n        });\n      }\n    }\n    \n    return predictions;\n  }\n\n  private predictMarketTrends(data: any[], timeHorizon: string): Prediction[] {\n    const predictions: Prediction[] = [];\n    \n    // Analyze market-impacting events\n    const marketEvents = data.filter(item => \n      this.hasMarketImpact(item.title + ' ' + item.content)\n    );\n    \n    predictions.push({\n      event: 'Market consolidation in regulated segments',\n      probability: 0.6,\n      timeframe: this.getTimeframeFromHorizon(timeHorizon),\n      impactLevel: 'medium',\n      confidence: 0.55,\n      supportingData: [\n        `${marketEvents.length} market-impacting regulatory events`,\n        'Regulatory complexity driving consolidation',\n        'Compliance cost pressures on smaller players'\n      ]\n    });\n    \n    // Regional market predictions\n    const regions = Array.from(new Set(data.map(item => item.region))).filter(Boolean);\n    for (const region of regions.slice(0, 3)) {\n      const regionData = data.filter(item => item.region === region);\n      \n      if (regionData.length >= 5) {\n        predictions.push({\n          event: `${region} market access opportunities`,\n          probability: 0.65,\n          timeframe: this.getTimeframeFromHorizon(timeHorizon),\n          impactLevel: 'medium',\n          confidence: 0.6,\n          supportingData: [\n            `${regionData.length} regulatory activities in ${region}`,\n            'Regulatory pathway clarity improving',\n            'Market access barriers being addressed'\n          ]\n        });\n      }\n    }\n    \n    return predictions;\n  }\n\n  private isSafetyRelated(content: string): boolean {\n    const safetyKeywords = ['safety', 'recall', 'alert', 'warning', 'adverse', 'incident', 'malfunction'];\n    return safetyKeywords.some(keyword => content.toLowerCase().includes(keyword));\n  }\n\n  private isApprovalRelated(content: string): boolean {\n    const approvalKeywords = ['approval', 'clearance', 'authorized', 'approved', '510(k)', 'pma', 'ce mark'];\n    return approvalKeywords.some(keyword => content.toLowerCase().includes(keyword));\n  }\n\n  private isRegulatoryChange(content: string): boolean {\n    const changeKeywords = ['guidance', 'regulation', 'standard', 'requirement', 'framework', 'policy'];\n    return changeKeywords.some(keyword => content.toLowerCase().includes(keyword));\n  }\n\n  private hasMarketImpact(content: string): boolean {\n    const marketKeywords = ['market', 'competition', 'industry', 'economic', 'commercial', 'business'];\n    return marketKeywords.some(keyword => content.toLowerCase().includes(keyword));\n  }\n\n  private matchesTechnology(item: any, tech: string): boolean {\n    const content = (item.title + ' ' + item.content).toLowerCase();\n    const techKeywords: Record<string, string[]> = {\n      'AI/ML': ['artificial intelligence', 'machine learning', 'ai', 'ml', 'algorithm'],\n      'Digital Therapeutics': ['digital therapeutic', 'dtx', 'app', 'software treatment'],\n      'Personalized Medicine': ['personalized', 'precision', 'genomic', 'biomarker', 'companion diagnostic']\n    };\n    \n    const keywords = techKeywords[tech] || [tech.toLowerCase()];\n    return keywords.some(keyword => content.includes(keyword));\n  }\n\n  private calculateFrequency(data: any[], timeHorizon: string): { rate: number; trend: 'increasing' | 'stable' | 'decreasing' } {\n    if (data.length === 0) return { rate: 0, trend: 'stable' };\n    \n    // Calculate monthly rate\n    const months = this.getMonthsFromHorizon(timeHorizon);\n    const rate = data.length / months;\n    \n    // Simple trend analysis\n    const sortedData = data.sort((a, b) => \n      new Date(a.published_at || a.filed_date || 0).getTime() - \n      new Date(b.published_at || b.filed_date || 0).getTime()\n    );\n    \n    const midpoint = Math.floor(sortedData.length / 2);\n    const firstHalf = sortedData.slice(0, midpoint);\n    const secondHalf = sortedData.slice(midpoint);\n    \n    let trend: 'increasing' | 'stable' | 'decreasing' = 'stable';\n    if (secondHalf.length > firstHalf.length * 1.2) trend = 'increasing';\n    else if (firstHalf.length > secondHalf.length * 1.2) trend = 'decreasing';\n    \n    return { rate, trend };\n  }\n\n  private extractDeviceTypes(data: any[]): string[] {\n    const deviceTypes: Record<string, number> = {};\n    \n    for (const item of data) {\n      const content = (item.title + ' ' + item.content).toLowerCase();\n      \n      // Extract common device types\n      const types = ['cardiac', 'orthopedic', 'diabetes', 'imaging', 'software', 'ivd'];\n      for (const type of types) {\n        if (this.matchesDeviceCategory(item, type)) {\n          deviceTypes[type] = (deviceTypes[type] || 0) + 1;\n        }\n      }\n    }\n    \n    return Object.entries(deviceTypes)\n      .sort(([,a], [,b]) => b - a)\n      .map(([type]) => type);\n  }\n\n  private assessDeviceSafetyImpact(deviceType: string): 'low' | 'medium' | 'high' | 'critical' {\n    const highRiskDevices = ['cardiac', 'implantable', 'life support'];\n    const mediumRiskDevices = ['orthopedic', 'surgical', 'diabetes'];\n    \n    if (highRiskDevices.some(risk => deviceType.includes(risk))) return 'critical';\n    if (mediumRiskDevices.some(risk => deviceType.includes(risk))) return 'high';\n    return 'medium';\n  }\n\n  private getTimeframeFromHorizon(horizon: string): string {\n    const timeframes: Record<string, string> = {\n      '30d': 'Next 30 days',\n      '90d': 'Next 3 months',\n      '180d': 'Next 6 months',\n      '1y': 'Next 12 months'\n    };\n    return timeframes[horizon] || 'Future period';\n  }\n\n  private getMonthsFromHorizon(horizon: string): number {\n    const months: Record<string, number> = {\n      '30d': 1,\n      '90d': 3,\n      '180d': 6,\n      '1y': 12\n    };\n    return months[horizon] || 3;\n  }\n\n  private async identifyRiskFactors(request: PredictionRequest, data: any[]): Promise<RiskFactor[]> {\n    const riskFactors: RiskFactor[] = [];\n    \n    // High-priority items risk\n    const highPriorityItems = data.filter(item => \n      item.priority === 'high' || item.priority === 'critical'\n    );\n    \n    if (highPriorityItems.length > data.length * 0.2) {\n      riskFactors.push({\n        factor: 'High volume of critical regulatory activity',\n        severity: 'high',\n        likelihood: 0.8,\n        mitigationStrategies: [\n          'Implement enhanced monitoring protocols',\n          'Increase regulatory affairs staffing',\n          'Establish rapid response procedures'\n        ]\n      });\n    }\n    \n    // Jurisdiction concentration risk\n    const authorities = data.map(item => item.authority);\n    const authorityFreq = authorities.reduce((acc: Record<string, number>, auth) => {\n      acc[auth] = (acc[auth] || 0) + 1;\n      return acc;\n    }, {});\n    \n    const maxAuthorityShare = Math.max(...Object.values(authorityFreq)) / data.length;\n    if (maxAuthorityShare > 0.6) {\n      riskFactors.push({\n        factor: 'Over-concentration in single jurisdiction',\n        severity: 'medium',\n        likelihood: 0.7,\n        mitigationStrategies: [\n          'Diversify regulatory portfolio across jurisdictions',\n          'Develop regional expertise',\n          'Monitor regulatory harmonization trends'\n        ]\n      });\n    }\n    \n    return riskFactors;\n  }\n\n  private calculateOverallConfidence(predictions: Prediction[]): number {\n    if (predictions.length === 0) return 0;\n    \n    const avgConfidence = predictions.reduce((sum, pred) => sum + pred.confidence, 0) / predictions.length;\n    return Math.round(avgConfidence * 100);\n  }\n\n  private generateRecommendations(predictions: Prediction[], riskFactors: RiskFactor[]): string[] {\n    const recommendations: string[] = [];\n    \n    // High-probability predictions\n    const highProbPredictions = predictions.filter(p => p.probability > 0.7);\n    if (highProbPredictions.length > 0) {\n      recommendations.push('Prioritize preparation for high-probability regulatory events');\n    }\n    \n    // High-impact predictions\n    const highImpactPredictions = predictions.filter(p => \n      p.impactLevel === 'high' || p.impactLevel === 'critical'\n    );\n    if (highImpactPredictions.length > 0) {\n      recommendations.push('Develop contingency plans for high-impact regulatory scenarios');\n    }\n    \n    // Risk factor mitigation\n    const highSeverityRisks = riskFactors.filter(r => r.severity === 'high' || r.severity === 'critical');\n    if (highSeverityRisks.length > 0) {\n      recommendations.push('Implement immediate risk mitigation strategies for identified factors');\n    }\n    \n    // General recommendations\n    recommendations.push('Maintain continuous monitoring of regulatory landscape');\n    recommendations.push('Regular review and update of predictive models based on new data');\n    \n    return recommendations;\n  }\n\n  async generateComplianceRiskAssessment(jurisdiction?: string): Promise<ComplianceRisk[]> {\n    try {\n      console.log('[Predictive] Generating compliance risk assessment');\n      \n      const allUpdates = await storage.getAllRegulatoryUpdates();\n      const jurisdictions = jurisdiction ? [jurisdiction] : \n        Array.from(new Set(allUpdates.map(u => u.authority))).slice(0, 5);\n      \n      const risks: ComplianceRisk[] = [];\n      \n      for (const juris of jurisdictions) {\n        const jurisdictionData = allUpdates.filter(u => u.authority === juris);\n        const riskLevel = this.assessJurisdictionRisk(jurisdictionData);\n        \n        risks.push({\n          jurisdiction: juris,\n          riskLevel,\n          factors: this.identifyJurisdictionRiskFactors(jurisdictionData),\n          timeline: 'Next 6 months',\n          recommendations: this.generateJurisdictionRecommendations(juris, riskLevel)\n        });\n      }\n      \n      console.log(`[Predictive] Generated compliance risk assessment for ${risks.length} jurisdictions`);\n      return risks;\n    } catch (error) {\n      console.error('[Predictive] Error generating compliance risk assessment:', error);\n      throw error;\n    }\n  }\n\n  private assessJurisdictionRisk(data: any[]): 'low' | 'medium' | 'high' | 'critical' {\n    const recentData = data.filter(item => {\n      const itemDate = new Date(item.published_at || 0);\n      const sixMonthsAgo = new Date(Date.now() - 6 * 30 * 24 * 60 * 60 * 1000);\n      return itemDate > sixMonthsAgo;\n    });\n    \n    const highPriorityCount = recentData.filter(item => \n      item.priority === 'high' || item.priority === 'critical'\n    ).length;\n    \n    if (highPriorityCount > 5) return 'critical';\n    if (highPriorityCount > 2) return 'high';\n    if (recentData.length > 10) return 'medium';\n    return 'low';\n  }\n\n  private identifyJurisdictionRiskFactors(data: any[]): string[] {\n    const factors: string[] = [];\n    \n    const safetyCount = data.filter(item => this.isSafetyRelated(item.title + ' ' + item.content)).length;\n    if (safetyCount > data.length * 0.3) {\n      factors.push('High volume of safety-related regulatory activity');\n    }\n    \n    const recentChanges = data.filter(item => {\n      const itemDate = new Date(item.published_at || 0);\n      const threeMonthsAgo = new Date(Date.now() - 3 * 30 * 24 * 60 * 60 * 1000);\n      return itemDate > threeMonthsAgo && this.isRegulatoryChange(item.title + ' ' + item.content);\n    }).length;\n    \n    if (recentChanges > 3) {\n      factors.push('Frequent regulatory framework updates');\n    }\n    \n    return factors;\n  }\n\n  private generateJurisdictionRecommendations(jurisdiction: string, riskLevel: string): string[] {\n    const recommendations: string[] = [];\n    \n    switch (riskLevel) {\n      case 'critical':\n        recommendations.push('Immediate compliance audit recommended');\n        recommendations.push('Dedicated regulatory specialist assignment');\n        break;\n      case 'high':\n        recommendations.push('Enhanced monitoring and quarterly reviews');\n        recommendations.push('Proactive engagement with regulatory consultants');\n        break;\n      case 'medium':\n        recommendations.push('Regular compliance checks and updates');\n        recommendations.push('Monitor for emerging regulatory trends');\n        break;\n      case 'low':\n        recommendations.push('Maintain standard monitoring protocols');\n        break;\n    }\n    \n    recommendations.push(`Stay informed on ${jurisdiction} regulatory developments`);\n    return recommendations;\n  }\n}"]}