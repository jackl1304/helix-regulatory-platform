{"version":3,"file":"performanceMonitor.js","sourceRoot":"","sources":["../../server/services/performanceMonitor.ts"],"names":[],"mappings":"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","sourcesContent":["import { Logger } from './logger.service';\nimport { cachingService } from './cachingService';\n\nconst logger = new Logger('PerformanceMonitor');\n\ninterface PerformanceMetrics {\n  endpoint: string;\n  method: string;\n  duration: number;\n  statusCode: number;\n  timestamp: Date;\n  cacheHit?: boolean;\n  memoryUsage?: number;\n}\n\n/**\n * Production-ready performance monitoring service\n * Tracks API response times, cache effectiveness, and system health\n */\nexport class PerformanceMonitor {\n  private static instance: PerformanceMonitor;\n  private metrics: PerformanceMetrics[] = [];\n  private readonly maxMetricsHistory = 1000;\n\n  private constructor() {\n    // Clean up old metrics every 10 minutes\n    setInterval(() => {\n      this.cleanupOldMetrics();\n    }, 10 * 60 * 1000);\n  }\n\n  static getInstance(): PerformanceMonitor {\n    if (!PerformanceMonitor.instance) {\n      PerformanceMonitor.instance = new PerformanceMonitor();\n    }\n    return PerformanceMonitor.instance;\n  }\n\n  /**\n   * Track API endpoint performance\n   */\n  trackApiCall(\n    endpoint: string,\n    method: string,\n    duration: number,\n    statusCode: number,\n    cacheHit: boolean = false\n  ): void {\n    const metric: PerformanceMetrics = {\n      endpoint,\n      method,\n      duration,\n      statusCode,\n      timestamp: new Date(),\n      cacheHit,\n      memoryUsage: this.getMemoryUsage()\n    };\n\n    this.metrics.push(metric);\n\n    // Log slow requests\n    if (duration > 2000) {\n      logger.warn('Slow API request detected', {\n        endpoint,\n        method,\n        duration,\n        statusCode,\n        cacheHit\n      });\n    }\n\n    // Keep metrics array manageable\n    if (this.metrics.length > this.maxMetricsHistory) {\n      this.metrics = this.metrics.slice(-this.maxMetricsHistory);\n    }\n  }\n\n  /**\n   * Get performance statistics for the last N minutes\n   */\n  getPerformanceStats(lastMinutes: number = 60) {\n    const cutoffTime = new Date(Date.now() - lastMinutes * 60 * 1000);\n    const recentMetrics = this.metrics.filter(m => m.timestamp > cutoffTime);\n\n    if (recentMetrics.length === 0) {\n      return {\n        totalRequests: 0,\n        averageResponseTime: 0,\n        cacheHitRate: 0,\n        errorRate: 0,\n        slowRequestCount: 0,\n        endpoints: {}\n      };\n    }\n\n    const totalRequests = recentMetrics.length;\n    const averageResponseTime = recentMetrics.reduce((sum, m) => sum + m.duration, 0) / totalRequests;\n    const cacheHits = recentMetrics.filter(m => m.cacheHit).length;\n    const cacheHitRate = (cacheHits / totalRequests) * 100;\n    const errors = recentMetrics.filter(m => m.statusCode >= 400).length;\n    const errorRate = (errors / totalRequests) * 100;\n    const slowRequestCount = recentMetrics.filter(m => m.duration > 2000).length;\n\n    // Group by endpoint\n    const endpointStats = recentMetrics.reduce((acc, metric) => {\n      if (!acc[metric.endpoint]) {\n        acc[metric.endpoint] = {\n          count: 0,\n          totalDuration: 0,\n          errors: 0,\n          cacheHits: 0\n        };\n      }\n      acc[metric.endpoint].count++;\n      acc[metric.endpoint].totalDuration += metric.duration;\n      if (metric.statusCode >= 400) acc[metric.endpoint].errors++;\n      if (metric.cacheHit) acc[metric.endpoint].cacheHits++;\n      return acc;\n    }, {} as Record<string, any>);\n\n    // Calculate averages for each endpoint\n    const endpoints = Object.entries(endpointStats).reduce((acc, [endpoint, stats]: [string, any]) => {\n      acc[endpoint] = {\n        count: stats.count,\n        averageResponseTime: Math.round(stats.totalDuration / stats.count),\n        errorRate: Math.round((stats.errors / stats.count) * 100),\n        cacheHitRate: Math.round((stats.cacheHits / stats.count) * 100)\n      };\n      return acc;\n    }, {} as Record<string, any>);\n\n    return {\n      totalRequests,\n      averageResponseTime: Math.round(averageResponseTime),\n      cacheHitRate: Math.round(cacheHitRate),\n      errorRate: Math.round(errorRate),\n      slowRequestCount,\n      currentMemoryUsage: this.getMemoryUsage(),\n      endpoints\n    };\n  }\n\n  /**\n   * Get system health summary\n   */\n  getHealthSummary() {\n    const stats = this.getPerformanceStats(15); // Last 15 minutes\n    const cacheStats = cachingService.getStats();\n    \n    let healthScore = 100;\n    const issues: string[] = [];\n\n    // Deduct points for performance issues\n    if (stats.averageResponseTime > 1000) {\n      healthScore -= 20;\n      issues.push('High average response time');\n    }\n    \n    if (stats.errorRate > 5) {\n      healthScore -= 25;\n      issues.push('High error rate');\n    }\n    \n    if (stats.slowRequestCount > 0) {\n      healthScore -= 10;\n      issues.push('Slow requests detected');\n    }\n    \n    if (cacheStats.size > cacheStats.maxSize * 0.9) {\n      healthScore -= 5;\n      issues.push('Cache nearly full');\n    }\n\n    const memoryUsage = this.getMemoryUsage();\n    if (memoryUsage > 80) {\n      healthScore -= 15;\n      issues.push('High memory usage');\n    }\n\n    return {\n      healthScore: Math.max(0, healthScore),\n      status: healthScore >= 90 ? 'excellent' : \n              healthScore >= 70 ? 'good' : \n              healthScore >= 50 ? 'fair' : 'poor',\n      issues,\n      performance: stats,\n      cache: cacheStats,\n      uptime: process.uptime(),\n      memoryUsage\n    };\n  }\n\n  /**\n   * Create Express middleware for automatic performance tracking\n   */\n  createMiddleware() {\n    return (req: any, res: any, next: any) => {\n      const startTime = Date.now();\n      \n      res.on('finish', () => {\n        const duration = Date.now() - startTime;\n        const cacheHit = res.getHeader('X-Cache-Hit') === 'true';\n        \n        this.trackApiCall(\n          req.path,\n          req.method,\n          duration,\n          res.statusCode,\n          cacheHit\n        );\n      });\n      \n      next();\n    };\n  }\n\n  private getMemoryUsage(): number {\n    const usage = process.memoryUsage();\n    return Math.round((usage.heapUsed / usage.heapTotal) * 100);\n  }\n\n  private cleanupOldMetrics(): void {\n    const oneHourAgo = new Date(Date.now() - 60 * 60 * 1000);\n    const initialCount = this.metrics.length;\n    this.metrics = this.metrics.filter(m => m.timestamp > oneHourAgo);\n    \n    const cleaned = initialCount - this.metrics.length;\n    if (cleaned > 0) {\n      logger.debug('Cleaned up old performance metrics', { \n        cleaned, \n        remaining: this.metrics.length \n      });\n    }\n  }\n}\n\nexport const performanceMonitor = PerformanceMonitor.getInstance();"]}