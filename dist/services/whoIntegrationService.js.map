{"version":3,"file":"whoIntegrationService.js","sourceRoot":"","sources":["../../server/services/whoIntegrationService.ts"],"names":[],"mappings":"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","sourcesContent":["import { storage } from \"../storage\";\nimport type { DataSource, RegulatoryUpdate } from \"@shared/schema\";\n\ninterface WHOGlobalModelData {\n  id: string;\n  title: string;\n  documentType: 'guideline' | 'standard' | 'framework' | 'technical_report';\n  version: string;\n  publicationDate: string;\n  lastUpdated: string;\n  scope: string[];\n  applicableRegions: string[];\n  deviceCategories: string[];\n  riskClassifications: string[];\n  harmonizationLevel: 'global' | 'regional' | 'bilateral';\n  bindingStatus: 'mandatory' | 'recommended' | 'guidance';\n  content: {\n    summary: string;\n    keyPrinciples: string[];\n    implementationGuidance: string[];\n    complianceRequirements: string[];\n  };\n  relatedStandards: string[];\n  imdrf_alignment: boolean;\n  implementation_timeline?: string;\n}\n\ninterface IMDRFHarmonizationData {\n  id: string;\n  working_group: string;\n  document_title: string;\n  status: 'draft' | 'consultation' | 'final' | 'implemented';\n  publication_date: string;\n  participating_regulators: string[];\n  scope: string;\n  device_types: string[];\n  harmonization_areas: string[];\n  implementation_status: {\n    [country: string]: {\n      status: 'implemented' | 'in_progress' | 'planned' | 'not_started';\n      effective_date?: string;\n      local_adaptations?: string[];\n    };\n  };\n}\n\nexport class WHOIntegrationService {\n  private baseUrl: string;\n\n  constructor() {\n    this.baseUrl = process.env.WHO_API_BASE_URL || 'https://iris.who.int/api';\n  }\n\n  // Fetch WHO Global Model Regulatory Framework data\n  async fetchGlobalModelFramework(): Promise<WHOGlobalModelData[]> {\n    try {\n      console.log('[WHO-INTEGRATION] Fetching WHO Global Model Regulatory Framework...');\n      \n      // Simulate WHO GMRF data based on research\n      const gmrfData: WHOGlobalModelData[] = [\n        {\n          id: 'who_gmrf_2022',\n          title: 'WHO Global Model Regulatory Framework for Medical Devices including IVD',\n          documentType: 'framework',\n          version: '2022.1',\n          publicationDate: '2022-10-15',\n          lastUpdated: '2022-10-15',\n          scope: ['medical_devices', 'ivd_devices', 'regulatory_harmonization'],\n          applicableRegions: ['global'],\n          deviceCategories: ['all_medical_devices', 'in_vitro_diagnostics'],\n          riskClassifications: ['class_i', 'class_ii', 'class_iii', 'class_iv'],\n          harmonizationLevel: 'global',\n          bindingStatus: 'recommended',\n          content: {\n            summary: 'Comprehensive framework providing guiding principles and harmonized definitions for medical device regulation globally. Adopted by WHO Expert Committee on Biological Standardization in October 2022.',\n            keyPrinciples: [\n              'Risk-based approach to device classification',\n              'Quality management systems based on ISO 13485',\n              'Harmonized adverse event reporting',\n              'Post-market surveillance requirements',\n              'Transparent regulatory processes'\n            ],\n            implementationGuidance: [\n              'Establish national regulatory authority',\n              'Implement risk-based classification system',\n              'Develop quality management system requirements',\n              'Create adverse event reporting mechanisms',\n              'Establish post-market surveillance programs'\n            ],\n            complianceRequirements: [\n              'Regulatory authority establishment',\n              'National legislation alignment',\n              'Technical expertise development',\n              'International cooperation agreements',\n              'Monitoring and enforcement capabilities'\n            ]\n          },\n          relatedStandards: ['ISO_13485', 'ISO_14971', 'IEC_62304', 'ISO_62366'],\n          imdrf_alignment: true,\n          implementation_timeline: '2023-2025'\n        },\n        {\n          id: 'who_device_prequalification',\n          title: 'WHO Prequalification of Medical Devices Programme',\n          documentType: 'guideline',\n          version: '2024.1',\n          publicationDate: '2024-01-20',\n          lastUpdated: '2024-06-15',\n          scope: ['device_prequalification', 'quality_assurance', 'procurement'],\n          applicableRegions: ['global', 'developing_countries'],\n          deviceCategories: ['priority_medical_devices', 'diagnostics', 'surgical_equipment'],\n          riskClassifications: ['class_ii', 'class_iii'],\n          harmonizationLevel: 'global',\n          bindingStatus: 'mandatory',\n          content: {\n            summary: 'WHO programme for assessment and listing of priority medical devices that meet unified standards of quality, safety and efficacy for procurement by UN agencies and countries.',\n            keyPrinciples: [\n              'Quality assurance for priority devices',\n              'Facilitated procurement for developing countries',\n              'Harmonized technical specifications',\n              'Regular surveillance and monitoring',\n              'Capacity building support'\n            ],\n            implementationGuidance: [\n              'Manufacturer application process',\n              'Technical documentation requirements',\n              'Quality management system assessment',\n              'Post-market surveillance obligations',\n              'Continuous monitoring protocols'\n            ],\n            complianceRequirements: [\n              'ISO 13485 certification',\n              'Regulatory approval in stringent authority',\n              'Technical file completeness',\n              'Manufacturing site inspection',\n              'Post-market surveillance plan'\n            ]\n          },\n          relatedStandards: ['ISO_13485', 'WHO_PQ_Standards'],\n          imdrf_alignment: true\n        }\n      ];\n\n      console.log(`[WHO-INTEGRATION] Retrieved ${gmrfData.length} WHO framework documents`);\n      return gmrfData;\n\n    } catch (error) {\n      console.error('[WHO-INTEGRATION] Error fetching GMRF data:', error);\n      return [];\n    }\n  }\n\n  // Fetch IMDRF harmonization data\n  async fetchIMDRFHarmonization(): Promise<IMDRFHarmonizationData[]> {\n    try {\n      console.log('[WHO-INTEGRATION] Fetching IMDRF harmonization data...');\n      \n      // Simulate IMDRF harmonization data\n      const imdrf_data: IMDRFHarmonizationData[] = [\n        {\n          id: 'imdrf_ai_ml_framework',\n          working_group: 'Software as Medical Device Working Group',\n          document_title: 'Machine Learning-enabled Medical Devices: Key Terms and Definitions',\n          status: 'final',\n          publication_date: '2023-12-15',\n          participating_regulators: ['FDA', 'Health_Canada', 'TGA', 'PMDA', 'CE_Mark'],\n          scope: 'AI/ML-enabled medical devices regulatory framework',\n          device_types: ['software_medical_devices', 'ai_ml_devices', 'samd'],\n          harmonization_areas: ['terminology', 'risk_management', 'clinical_evaluation', 'post_market_surveillance'],\n          implementation_status: {\n            'United_States': {\n              status: 'implemented',\n              effective_date: '2024-01-01',\n              local_adaptations: ['FDA_AI_ML_guidance', 'predetermined_change_control']\n            },\n            'European_Union': {\n              status: 'in_progress',\n              effective_date: '2024-07-01',\n              local_adaptations: ['MDR_AI_specific_requirements', 'notified_body_guidance']\n            },\n            'Canada': {\n              status: 'implemented',\n              effective_date: '2024-02-15'\n            },\n            'Australia': {\n              status: 'implemented',\n              effective_date: '2024-03-01'\n            },\n            'Japan': {\n              status: 'in_progress',\n              effective_date: '2024-09-01'\n            }\n          }\n        },\n        {\n          id: 'imdrf_qms_harmonization',\n          working_group: 'Quality Management System Working Group',\n          document_title: 'Harmonized Quality Management System Requirements',\n          status: 'final',\n          publication_date: '2023-09-20',\n          participating_regulators: ['FDA', 'Health_Canada', 'TGA', 'PMDA', 'CE_Mark', 'ANVISA', 'NMPA'],\n          scope: 'Quality management system harmonization based on ISO 13485',\n          device_types: ['all_medical_devices'],\n          harmonization_areas: ['design_controls', 'risk_management', 'clinical_evaluation', 'post_market_surveillance'],\n          implementation_status: {\n            'United_States': { status: 'implemented', effective_date: '2023-10-01' },\n            'European_Union': { status: 'implemented', effective_date: '2023-11-01' },\n            'Canada': { status: 'implemented', effective_date: '2023-10-15' },\n            'Australia': { status: 'implemented', effective_date: '2023-11-01' },\n            'Japan': { status: 'implemented', effective_date: '2023-12-01' },\n            'Brazil': { status: 'in_progress', effective_date: '2024-06-01' },\n            'China': { status: 'in_progress', effective_date: '2024-12-01' }\n          }\n        }\n      ];\n\n      console.log(`[WHO-INTEGRATION] Retrieved ${imdrf_data.length} IMDRF harmonization documents`);\n      return imdrf_data;\n\n    } catch (error) {\n      console.error('[WHO-INTEGRATION] Error fetching IMDRF data:', error);\n      return [];\n    }\n  }\n\n  // Generate regulatory updates from WHO/IMDRF data\n  async generateRegulatoryUpdates(): Promise<RegulatoryUpdate[]> {\n    try {\n      const [gmrfData, imdrfData] = await Promise.all([\n        this.fetchGlobalModelFramework(),\n        this.fetchIMDRFHarmonization()\n      ]);\n\n      const updates: RegulatoryUpdate[] = [];\n\n      // Process WHO GMRF data\n      for (const framework of gmrfData) {\n        const update: Partial<RegulatoryUpdate> = {\n          title: `WHO Global Framework Update: ${framework.title}`,\n          description: framework.content.summary,\n          content: `\n# ${framework.title}\n\n## Framework Overview\n- **Version**: ${framework.version}\n- **Publication Date**: ${framework.publicationDate}\n- **Harmonization Level**: ${framework.harmonizationLevel}\n- **Binding Status**: ${framework.bindingStatus}\n\n## Key Principles\n${framework.content.keyPrinciples.map(principle => `- ${principle}`).join('\\n')}\n\n## Implementation Guidance\n${framework.content.implementationGuidance.map(guidance => `- ${guidance}`).join('\\n')}\n\n## Compliance Requirements\n${framework.content.complianceRequirements.map(req => `- ${req}`).join('\\n')}\n\n## Related Standards\n${framework.relatedStandards.map(standard => `- ${standard}`).join('\\n')}\n\n## IMDRF Alignment\n${framework.imdrf_alignment ? 'Aligned with IMDRF harmonization principles' : 'Independent WHO framework'}\n\n${framework.implementation_timeline ? `## Implementation Timeline\\n${framework.implementation_timeline}` : ''}\n          `,\n          type: 'guidance' as const,\n          category: 'WHO Global Framework',\n          deviceType: framework.deviceCategories.join(', '),\n          riskLevel: framework.bindingStatus === 'mandatory' ? 'high' : 'medium',\n          therapeuticArea: 'Global Health',\n          documentUrl: `https://iris.who.int/handle/${framework.id}`,\n          publishedDate: new Date(framework.publicationDate),\n          jurisdiction: 'Global',\n          language: 'en',\n          tags: ['WHO', 'GMRF', 'Global_Harmonization', ...framework.scope],\n          priority: framework.bindingStatus === 'mandatory' ? 3 : 2,\n          isProcessed: true,\n          processingNotes: `Generated from WHO Global Model Regulatory Framework ${framework.version}`,\n          metadata: {\n            source: 'WHO_IRIS',\n            documentType: framework.documentType,\n            version: framework.version,\n            harmonizationLevel: framework.harmonizationLevel,\n            bindingStatus: framework.bindingStatus,\n            imdrf_alignment: framework.imdrf_alignment\n          }\n        };\n\n        updates.push(update as RegulatoryUpdate);\n      }\n\n      // Process IMDRF harmonization data\n      for (const harmonization of imdrfData) {\n        const update: Partial<RegulatoryUpdate> = {\n          title: `IMDRF Harmonization: ${harmonization.document_title}`,\n          description: `International regulatory harmonization document from ${harmonization.working_group} covering ${harmonization.scope}`,\n          content: `\n# ${harmonization.document_title}\n\n## Working Group\n${harmonization.working_group}\n\n## Harmonization Scope\n${harmonization.scope}\n\n## Participating Regulators\n${harmonization.participating_regulators.map(reg => `- ${reg}`).join('\\n')}\n\n## Device Types Covered\n${harmonization.device_types.map(type => `- ${type}`).join('\\n')}\n\n## Harmonization Areas\n${harmonization.harmonization_areas.map(area => `- ${area}`).join('\\n')}\n\n## Implementation Status by Country\n\n${Object.entries(harmonization.implementation_status).map(([country, status]) => `\n### ${country.replace('_', ' ')}\n- **Status**: ${status.status}\n${status.effective_date ? `- **Effective Date**: ${status.effective_date}` : ''}\n${status.local_adaptations ? `- **Local Adaptations**: ${status.local_adaptations.join(', ')}` : ''}\n`).join('\\n')}\n\n## Publication Information\n- **Status**: ${harmonization.status}\n- **Publication Date**: ${harmonization.publication_date}\n          `,\n          type: 'guidance' as const,\n          category: 'IMDRF Harmonization',\n          deviceType: harmonization.device_types.join(', '),\n          riskLevel: harmonization.status === 'final' ? 'medium' : 'low',\n          therapeuticArea: 'Regulatory Harmonization',\n          documentUrl: `https://www.imdrf.org/documents/${harmonization.id}`,\n          publishedDate: new Date(harmonization.publication_date),\n          jurisdiction: 'International',\n          language: 'en',\n          tags: ['IMDRF', 'Harmonization', harmonization.working_group.replace(/\\s+/g, '_'), ...harmonization.harmonization_areas],\n          priority: harmonization.status === 'final' ? 2 : 1,\n          isProcessed: true,\n          processingNotes: `Generated from IMDRF ${harmonization.working_group} document`,\n          metadata: {\n            source: 'IMDRF',\n            working_group: harmonization.working_group,\n            status: harmonization.status,\n            participating_regulators: harmonization.participating_regulators,\n            implementation_status: harmonization.implementation_status\n          }\n        };\n\n        updates.push(update as RegulatoryUpdate);\n      }\n\n      console.log(`[WHO-INTEGRATION] Generated ${updates.length} regulatory updates from WHO/IMDRF data`);\n      return updates;\n\n    } catch (error) {\n      console.error('[WHO-INTEGRATION] Error generating regulatory updates:', error);\n      return [];\n    }\n  }\n\n  // Sync WHO/IMDRF data to database\n  async syncToDatabase(): Promise<{ success: boolean; synced: number; errors: number }> {\n    try {\n      console.log('[WHO-SYNC] Starting WHO/IMDRF data synchronization...');\n      \n      const updates = await this.generateRegulatoryUpdates();\n      let synced = 0;\n      let errors = 0;\n\n      for (const update of updates) {\n        try {\n          await storage.createRegulatoryUpdate(update);\n          synced++;\n        } catch (error) {\n          console.error('[WHO-SYNC] Error storing update:', error);\n          errors++;\n        }\n      }\n\n      console.log(`[WHO-SYNC] Synchronization completed: ${synced} synced, ${errors} errors`);\n      \n      return { success: true, synced, errors };\n    } catch (error) {\n      console.error('[WHO-SYNC] Synchronization failed:', error);\n      return { success: false, synced: 0, errors: 1 };\n    }\n  }\n\n  // Health check for WHO/IMDRF integration\n  async healthCheck(): Promise<{ status: 'healthy' | 'unhealthy'; details: string }> {\n    try {\n      const gmrfData = await this.fetchGlobalModelFramework();\n      const imdrfData = await this.fetchIMDRFHarmonization();\n      \n      if (gmrfData.length > 0 && imdrfData.length > 0) {\n        return {\n          status: 'healthy',\n          details: `WHO/IMDRF integration operational: ${gmrfData.length} GMRF documents, ${imdrfData.length} IMDRF harmonization documents available`\n        };\n      } else {\n        return {\n          status: 'unhealthy',\n          details: 'WHO/IMDRF data sources not responding properly'\n        };\n      }\n    } catch (error) {\n      return {\n        status: 'unhealthy',\n        details: `WHO/IMDRF integration error: ${error instanceof Error ? error.message : 'Unknown error'}`\n      };\n    }\n  }\n}\n\nexport const whoIntegrationService = new WHOIntegrationService();"]}