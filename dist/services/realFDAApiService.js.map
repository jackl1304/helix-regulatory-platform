{"version":3,"file":"realFDAApiService.js","sourceRoot":"","sources":["../../server/services/realFDAApiService.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,oBAAoB,EAAE,MAAM,wBAAwB,CAAC;AAC9D,OAAO,EAAE,OAAO,EAAE,MAAM,YAAY,CAAC;AAyDrC,MAAM,OAAO,iBAAiB;IAA9B;QACmB,aAAQ,GAAG,aAAa,CAAC;QACzB,kBAAa,GAAG;YAC/B,WAAW,EAAE,mBAAmB;YAChC,UAAU,EAAE,kBAAkB;YAC9B,cAAc,EAAE,qBAAqB;YACrC,kBAAkB,EAAE,0BAA0B;YAC9C,oBAAoB,EAAE,6BAA6B;SACpD,CAAC;IAkQJ,CAAC;IA7PC,KAAK,CAAC,mBAAmB,CAAC,QAAgB,GAAG,EAAE,OAAe,CAAC;QAC7D,IAAI,CAAC;YACH,MAAM,QAAQ,GAAG,GAAG,IAAI,CAAC,aAAa,CAAC,WAAW,UAAU,KAAK,SAAS,IAAI,EAAE,CAAC;YACjF,MAAM,QAAQ,GAAG,MAAM,oBAAoB,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;YAE7E,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,CAAC;gBACtB,OAAO,CAAC,KAAK,CAAC,mCAAmC,EAAE,QAAQ,CAAC,KAAK,CAAC,CAAC;gBACnE,OAAO,EAAE,CAAC;YACZ,CAAC;YAED,OAAO,QAAQ,CAAC,IAAI,EAAE,OAAO,IAAI,EAAE,CAAC;QACtC,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,CAAC,KAAK,CAAC,kCAAkC,EAAE,KAAK,CAAC,CAAC;YACzD,OAAO,EAAE,CAAC;QACZ,CAAC;IACH,CAAC;IAKD,KAAK,CAAC,iBAAiB,CAAC,QAAgB,GAAG,EAAE,OAAe,CAAC;QAC3D,IAAI,CAAC;YACH,MAAM,QAAQ,GAAG,GAAG,IAAI,CAAC,aAAa,CAAC,UAAU,UAAU,KAAK,SAAS,IAAI,EAAE,CAAC;YAChF,MAAM,QAAQ,GAAG,MAAM,oBAAoB,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;YAE7E,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,CAAC;gBACtB,OAAO,CAAC,KAAK,CAAC,kCAAkC,EAAE,QAAQ,CAAC,KAAK,CAAC,CAAC;gBAClE,OAAO,EAAE,CAAC;YACZ,CAAC;YAED,OAAO,QAAQ,CAAC,IAAI,EAAE,OAAO,IAAI,EAAE,CAAC;QACtC,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,CAAC,KAAK,CAAC,iCAAiC,EAAE,KAAK,CAAC,CAAC;YACxD,OAAO,EAAE,CAAC;QACZ,CAAC;IACH,CAAC;IAKD,KAAK,CAAC,kBAAkB,CAAC,QAAgB,GAAG,EAAE,OAAe,CAAC;QAC5D,IAAI,CAAC;YACH,MAAM,QAAQ,GAAG,GAAG,IAAI,CAAC,aAAa,CAAC,cAAc,UAAU,KAAK,SAAS,IAAI,EAAE,CAAC;YACpF,MAAM,QAAQ,GAAG,MAAM,oBAAoB,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;YAE7E,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,CAAC;gBACtB,OAAO,CAAC,KAAK,CAAC,sCAAsC,EAAE,QAAQ,CAAC,KAAK,CAAC,CAAC;gBACtE,OAAO,EAAE,CAAC;YACZ,CAAC;YAED,OAAO,QAAQ,CAAC,IAAI,EAAE,OAAO,IAAI,EAAE,CAAC;QACtC,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,CAAC,KAAK,CAAC,qCAAqC,EAAE,KAAK,CAAC,CAAC;YAC5D,OAAO,EAAE,CAAC;QACZ,CAAC;IACH,CAAC;IAKD,KAAK,CAAC,uBAAuB,CAAC,QAAgB,GAAG,EAAE,OAAe,CAAC;QACjE,IAAI,CAAC;YACH,MAAM,QAAQ,GAAG,GAAG,IAAI,CAAC,aAAa,CAAC,kBAAkB,UAAU,KAAK,SAAS,IAAI,EAAE,CAAC;YACxF,MAAM,QAAQ,GAAG,MAAM,oBAAoB,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;YAE7E,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,CAAC;gBACtB,OAAO,CAAC,KAAK,CAAC,0CAA0C,EAAE,QAAQ,CAAC,KAAK,CAAC,CAAC;gBAC1E,OAAO,EAAE,CAAC;YACZ,CAAC;YAED,OAAO,QAAQ,CAAC,IAAI,EAAE,OAAO,IAAI,EAAE,CAAC;QACtC,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,CAAC,KAAK,CAAC,yCAAyC,EAAE,KAAK,CAAC,CAAC;YAChE,OAAO,EAAE,CAAC;QACZ,CAAC;IACH,CAAC;IAKD,KAAK,CAAC,aAAa,CAAC,WAAmB,EAAE,QAAgB,EAAE;QACzD,IAAI,CAAC;YACH,MAAM,YAAY,GAAG,kBAAkB,CAAC,WAAW,CAAC,CAAC;YACrD,MAAM,QAAQ,GAAG,GAAG,IAAI,CAAC,aAAa,CAAC,WAAW,WAAW,YAAY,UAAU,KAAK,EAAE,CAAC;YAC3F,MAAM,QAAQ,GAAG,MAAM,oBAAoB,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;YAE7E,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,CAAC;gBACtB,OAAO,CAAC,KAAK,CAAC,sCAAsC,EAAE,QAAQ,CAAC,KAAK,CAAC,CAAC;gBACtE,OAAO,EAAE,CAAC;YACZ,CAAC;YAED,OAAO,QAAQ,CAAC,IAAI,EAAE,OAAO,IAAI,EAAE,CAAC;QACtC,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,CAAC,KAAK,CAAC,qCAAqC,EAAE,KAAK,CAAC,CAAC;YAC5D,OAAO,EAAE,CAAC;QACZ,CAAC;IACH,CAAC;IAKO,6BAA6B,CAAC,MAAqB;QACzD,MAAM,UAAU,GAAG,MAAM,CAAC,WAAW;YACnB,MAAM,CAAC,OAAO,EAAE,WAAW,EAAE,CAAC,CAAC,CAAC;YAChC,gBAAgB,CAAC;QAEnC,MAAM,SAAS,GAAG,MAAM,CAAC,OAAO,EAAE,6BAA6B,EAAE,CAAC,CAAC,CAAC,IAAI,SAAS,CAAC;QAElF,OAAO;YACL,KAAK,EAAE,qBAAqB,UAAU,EAAE;YACxC,OAAO,EAAE,IAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC;YACxC,OAAO,EAAE,4BAA4B,UAAU,OAAO,MAAM,CAAC,SAAS,IAAI,SAAS,EAAE;YACrF,MAAM,EAAE,iBAAiB;YACzB,SAAS,EAAE,wCAAwC;YACnD,WAAW,EAAE,MAAM,CAAC,aAAa,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,IAAI,IAAI,EAAE;YAC/E,MAAM,EAAE,eAAe;YACvB,cAAc,EAAE,KAAK;YACrB,YAAY,EAAE,gBAAgB;YAC9B,WAAW,EAAE,QAAQ;YACrB,WAAW,EAAE,CAAC,SAAS,CAAC,WAAW,EAAE,CAAC,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;YAC3D,QAAQ,EAAE,IAAI;SACf,CAAC;IACJ,CAAC;IAKO,+BAA+B,CAAC,MAAqB;QAC3D,MAAM,UAAU,GAAG,MAAM,CAAC,mBAAmB;YAC3B,MAAM,CAAC,OAAO,EAAE,WAAW,EAAE,CAAC,CAAC,CAAC;YAChC,gBAAgB,CAAC;QAEnC,MAAM,cAAc,GAAG,MAAM,CAAC,cAAc,IAAI,SAAS,CAAC;QAC1D,MAAM,WAAW,GAAG,cAAc,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC;YAC9C,cAAc,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,KAAK,CAAC;QAE1E,OAAO;YACL,KAAK,EAAE,kBAAkB,UAAU,EAAE;YACrC,OAAO,EAAE,IAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC;YACxC,OAAO,EAAE,uBAAuB,MAAM,CAAC,iBAAiB,IAAI,sBAAsB,EAAE;YACpF,MAAM,EAAE,iBAAiB;YACzB,SAAS,EAAE,0CAA0C;YACrD,WAAW,EAAE,MAAM,CAAC,sBAAsB,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,MAAM,CAAC,sBAAsB,CAAC,CAAC,CAAC,CAAC,IAAI,IAAI,EAAE;YACjG,MAAM,EAAE,eAAe;YACvB,cAAc,EAAE,KAAK;YACrB,YAAY,EAAE,QAAQ;YACtB,WAAW,EAAE,WAAwC;YACrD,WAAW,EAAE,MAAM,CAAC,OAAO,EAAE,WAAW,EAAE,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC;YAC7G,QAAQ,EAAE,IAAI;SACf,CAAC;IACJ,CAAC;IAEO,kBAAkB,CAAC,MAAqB;QAC9C,MAAM,QAAQ,GAAG,EAAE,CAAC;QAEpB,QAAQ,CAAC,IAAI,CAAC,0BAA0B,CAAC,CAAC;QAC1C,QAAQ,CAAC,IAAI,CAAC,iBAAiB,MAAM,CAAC,WAAW,IAAI,iBAAiB,EAAE,CAAC,CAAC;QAC1E,QAAQ,CAAC,IAAI,CAAC,oBAAoB,MAAM,CAAC,SAAS,IAAI,iBAAiB,EAAE,CAAC,CAAC;QAC3E,QAAQ,CAAC,IAAI,CAAC,eAAe,MAAM,CAAC,QAAQ,IAAI,iBAAiB,EAAE,CAAC,CAAC;QACrE,QAAQ,CAAC,IAAI,CAAC,kBAAkB,MAAM,CAAC,YAAY,IAAI,iBAAiB,EAAE,CAAC,CAAC;QAE5E,IAAI,MAAM,CAAC,OAAO,EAAE,CAAC;YACnB,QAAQ,CAAC,IAAI,CAAC,+BAA+B,CAAC,CAAC;YAC/C,QAAQ,CAAC,IAAI,CAAC,mBAAmB,MAAM,CAAC,OAAO,CAAC,YAAY,IAAI,iBAAiB,EAAE,CAAC,CAAC;YACrF,QAAQ,CAAC,IAAI,CAAC,mCAAmC,MAAM,CAAC,OAAO,CAAC,6BAA6B,EAAE,IAAI,CAAC,IAAI,CAAC,IAAI,iBAAiB,EAAE,CAAC,CAAC;YAClI,QAAQ,CAAC,IAAI,CAAC,yBAAyB,MAAM,CAAC,OAAO,CAAC,iBAAiB,EAAE,IAAI,CAAC,IAAI,CAAC,IAAI,iBAAiB,EAAE,CAAC,CAAC;QAC9G,CAAC;QAED,QAAQ,CAAC,IAAI,CAAC,gCAAgC,CAAC,CAAC;QAChD,QAAQ,CAAC,IAAI,CAAC,yBAAyB,MAAM,CAAC,aAAa,IAAI,iBAAiB,EAAE,CAAC,CAAC;QACpF,QAAQ,CAAC,IAAI,CAAC,mBAAmB,MAAM,CAAC,QAAQ,IAAI,iBAAiB,EAAE,CAAC,CAAC;QACzE,QAAQ,CAAC,IAAI,CAAC,oBAAoB,MAAM,CAAC,cAAc,IAAI,UAAU,EAAE,CAAC,CAAC;QAEzE,IAAI,MAAM,CAAC,oBAAoB,EAAE,CAAC;YAChC,QAAQ,CAAC,IAAI,CAAC,wBAAwB,CAAC,CAAC;YACxC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,oBAAoB,CAAC,CAAC;QAC7C,CAAC;QAED,OAAO,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC7B,CAAC;IAEO,kBAAkB,CAAC,MAAqB;QAC9C,MAAM,QAAQ,GAAG,EAAE,CAAC;QAEpB,QAAQ,CAAC,IAAI,CAAC,4BAA4B,CAAC,CAAC;QAC5C,QAAQ,CAAC,IAAI,CAAC,qBAAqB,MAAM,CAAC,aAAa,IAAI,iBAAiB,EAAE,CAAC,CAAC;QAChF,QAAQ,CAAC,IAAI,CAAC,aAAa,MAAM,CAAC,MAAM,IAAI,iBAAiB,EAAE,CAAC,CAAC;QACjE,QAAQ,CAAC,IAAI,CAAC,sBAAsB,MAAM,CAAC,cAAc,IAAI,iBAAiB,EAAE,CAAC,CAAC;QAClF,QAAQ,CAAC,IAAI,CAAC,+BAA+B,MAAM,CAAC,cAAc,IAAI,iBAAiB,EAAE,CAAC,CAAC;QAE3F,QAAQ,CAAC,IAAI,CAAC,uBAAuB,CAAC,CAAC;QACvC,QAAQ,CAAC,IAAI,CAAC,0BAA0B,MAAM,CAAC,mBAAmB,IAAI,iBAAiB,EAAE,CAAC,CAAC;QAE3F,IAAI,MAAM,CAAC,OAAO,EAAE,CAAC;YACnB,QAAQ,CAAC,IAAI,CAAC,iBAAiB,MAAM,CAAC,OAAO,CAAC,WAAW,EAAE,IAAI,CAAC,IAAI,CAAC,IAAI,iBAAiB,EAAE,CAAC,CAAC;YAC9F,QAAQ,CAAC,IAAI,CAAC,mBAAmB,MAAM,CAAC,OAAO,CAAC,YAAY,IAAI,iBAAiB,EAAE,CAAC,CAAC;QACvF,CAAC;QAED,QAAQ,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAC;QACrC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,iBAAiB,IAAI,0BAA0B,CAAC,CAAC;QAEtE,QAAQ,CAAC,IAAI,CAAC,0BAA0B,CAAC,CAAC;QAC1C,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,sBAAsB,IAAI,iBAAiB,CAAC,CAAC;QAElE,OAAO,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC7B,CAAC;IAKD,KAAK,CAAC,cAAc;QAClB,OAAO,CAAC,GAAG,CAAC,wDAAwD,CAAC,CAAC;QAEtE,IAAI,SAAS,GAAG,CAAC,CAAC;QAClB,IAAI,MAAM,GAAG,CAAC,CAAC;QAEf,IAAI,CAAC;YAEH,OAAO,CAAC,GAAG,CAAC,6CAA6C,CAAC,CAAC;YAC3D,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,mBAAmB,CAAC,EAAE,CAAC,CAAC;YACvD,KAAK,MAAM,MAAM,IAAI,WAAW,EAAE,CAAC;gBACjC,IAAI,CAAC;oBACH,MAAM,MAAM,GAAG,IAAI,CAAC,6BAA6B,CAAC,MAAM,CAAC,CAAC;oBAC1D,MAAM,OAAO,CAAC,sBAAsB,CAAC,MAAM,CAAC,CAAC;oBAC7C,SAAS,EAAE,CAAC;gBACd,CAAC;gBAAC,OAAO,KAAK,EAAE,CAAC;oBACf,OAAO,CAAC,KAAK,CAAC,8CAA8C,EAAE,KAAK,CAAC,CAAC;oBACrE,MAAM,EAAE,CAAC;gBACX,CAAC;YACH,CAAC;YAGD,OAAO,CAAC,GAAG,CAAC,0CAA0C,CAAC,CAAC;YACxD,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,kBAAkB,CAAC,EAAE,CAAC,CAAC;YAClD,KAAK,MAAM,MAAM,IAAI,OAAO,EAAE,CAAC;gBAC7B,IAAI,CAAC;oBACH,MAAM,MAAM,GAAG,IAAI,CAAC,+BAA+B,CAAC,MAAM,CAAC,CAAC;oBAC5D,MAAM,OAAO,CAAC,sBAAsB,CAAC,MAAM,CAAC,CAAC;oBAC7C,SAAS,EAAE,CAAC;gBACd,CAAC;gBAAC,OAAO,KAAK,EAAE,CAAC;oBACf,OAAO,CAAC,KAAK,CAAC,yCAAyC,EAAE,KAAK,CAAC,CAAC;oBAChE,MAAM,EAAE,CAAC;gBACX,CAAC;YACH,CAAC;YAED,OAAO,CAAC,GAAG,CAAC,kCAAkC,SAAS,eAAe,MAAM,SAAS,CAAC,CAAC;YACvF,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,SAAS,EAAE,MAAM,EAAE,CAAC;QAE9C,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,CAAC,KAAK,CAAC,6BAA6B,EAAE,KAAK,CAAC,CAAC;YACpD,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,SAAS,EAAE,MAAM,EAAE,MAAM,GAAG,CAAC,EAAE,CAAC;QAC3D,CAAC;IACH,CAAC;CACF;AAED,MAAM,CAAC,MAAM,iBAAiB,GAAG,IAAI,iBAAiB,EAAE,CAAC","sourcesContent":["import { apiManagementService } from './apiManagementService';\nimport { storage } from '../storage';\nimport type { InsertRegulatoryUpdate } from '@shared/schema';\n\n/**\n * Echter FDA OpenFDA API Service\n * Implementiert die offiziellen FDA API Endpunkte\n * Dokumentation: https://open.fda.gov/apis/\n */\n\ninterface OpenFDADevice {\n  k_number?: string;\n  device_name?: string;\n  applicant?: string;\n  date_received?: string;\n  decision_date?: string;\n  decision?: string;\n  product_code?: string;\n  regulation_number?: string;\n  clearance_type?: string;\n  statement_or_summary?: string;\n  openfda?: {\n    device_name?: string[];\n    medical_specialty_description?: string[];\n    regulation_number?: string[];\n    device_class?: string;\n  };\n}\n\ninterface OpenFDARecall {\n  recall_number?: string;\n  reason_for_recall?: string;\n  status?: string;\n  product_description?: string;\n  recall_initiation_date?: string;\n  recalling_firm?: string;\n  classification?: string;\n  openfda?: {\n    device_name?: string[];\n    device_class?: string;\n    regulation_number?: string[];\n  };\n}\n\ninterface OpenFDAEnforcement {\n  recall_number?: string;\n  reason_for_recall?: string;\n  status?: string;\n  distribution_pattern?: string;\n  product_description?: string;\n  recall_initiation_date?: string;\n  classification?: string;\n  recalling_firm?: string;\n  city?: string;\n  state?: string;\n  country?: string;\n}\n\nexport class RealFDAApiService {\n  private readonly sourceId = 'fda_openfda';\n  private readonly baseEndpoints = {\n    devices510k: '/device/510k.json',\n    devicesPMA: '/device/pma.json', \n    devicesRecalls: '/device/recall.json',\n    devicesEnforcement: '/device/enforcement.json',\n    deviceClassification: '/device/classification.json'\n  };\n\n  /**\n   * Fetch 510(k) clearances from FDA\n   */\n  async fetch510kClearances(limit: number = 100, skip: number = 0): Promise<OpenFDADevice[]> {\n    try {\n      const endpoint = `${this.baseEndpoints.devices510k}?limit=${limit}&skip=${skip}`;\n      const response = await apiManagementService.callAPI(this.sourceId, endpoint);\n      \n      if (!response.success) {\n        console.error('[Real FDA API] 510k fetch failed:', response.error);\n        return [];\n      }\n\n      return response.data?.results || [];\n    } catch (error) {\n      console.error('[Real FDA API] 510k fetch error:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Fetch PMA approvals from FDA\n   */\n  async fetchPMAApprovals(limit: number = 100, skip: number = 0): Promise<OpenFDADevice[]> {\n    try {\n      const endpoint = `${this.baseEndpoints.devicesPMA}?limit=${limit}&skip=${skip}`;\n      const response = await apiManagementService.callAPI(this.sourceId, endpoint);\n      \n      if (!response.success) {\n        console.error('[Real FDA API] PMA fetch failed:', response.error);\n        return [];\n      }\n\n      return response.data?.results || [];\n    } catch (error) {\n      console.error('[Real FDA API] PMA fetch error:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Fetch device recalls from FDA\n   */\n  async fetchDeviceRecalls(limit: number = 100, skip: number = 0): Promise<OpenFDARecall[]> {\n    try {\n      const endpoint = `${this.baseEndpoints.devicesRecalls}?limit=${limit}&skip=${skip}`;\n      const response = await apiManagementService.callAPI(this.sourceId, endpoint);\n      \n      if (!response.success) {\n        console.error('[Real FDA API] Recalls fetch failed:', response.error);\n        return [];\n      }\n\n      return response.data?.results || [];\n    } catch (error) {\n      console.error('[Real FDA API] Recalls fetch error:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Fetch enforcement actions from FDA\n   */\n  async fetchEnforcementActions(limit: number = 100, skip: number = 0): Promise<OpenFDAEnforcement[]> {\n    try {\n      const endpoint = `${this.baseEndpoints.devicesEnforcement}?limit=${limit}&skip=${skip}`;\n      const response = await apiManagementService.callAPI(this.sourceId, endpoint);\n      \n      if (!response.success) {\n        console.error('[Real FDA API] Enforcement fetch failed:', response.error);\n        return [];\n      }\n\n      return response.data?.results || [];\n    } catch (error) {\n      console.error('[Real FDA API] Enforcement fetch error:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Search devices by specific criteria\n   */\n  async searchDevices(searchQuery: string, limit: number = 50): Promise<OpenFDADevice[]> {\n    try {\n      const encodedQuery = encodeURIComponent(searchQuery);\n      const endpoint = `${this.baseEndpoints.devices510k}?search=${encodedQuery}&limit=${limit}`;\n      const response = await apiManagementService.callAPI(this.sourceId, endpoint);\n      \n      if (!response.success) {\n        console.error('[Real FDA API] Device search failed:', response.error);\n        return [];\n      }\n\n      return response.data?.results || [];\n    } catch (error) {\n      console.error('[Real FDA API] Device search error:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Convert FDA 510k data to Helix regulatory update format\n   */\n  private convert510kToRegulatoryUpdate(device: OpenFDADevice): InsertRegulatoryUpdate {\n    const deviceName = device.device_name || \n                      device.openfda?.device_name?.[0] || \n                      'Unknown Device';\n    \n    const specialty = device.openfda?.medical_specialty_description?.[0] || 'General';\n    \n    return {\n      title: `510(k) Clearance: ${deviceName}`,\n      content: this.buildDeviceContent(device),\n      summary: `FDA 510(k) clearance for ${deviceName} by ${device.applicant || 'Unknown'}`,\n      source: 'FDA OpenFDA API',\n      sourceUrl: `https://open.fda.gov/apis/device/510k/`,\n      publishedAt: device.decision_date ? new Date(device.decision_date) : new Date(),\n      region: 'United States',\n      regulatoryBody: 'FDA',\n      documentType: '510k_clearance',\n      impactLevel: 'medium',\n      deviceTypes: [specialty.toLowerCase().replace(/\\s+/g, '-')],\n      isActive: true,\n    };\n  }\n\n  /**\n   * Convert FDA recall data to Helix regulatory update format\n   */\n  private convertRecallToRegulatoryUpdate(recall: OpenFDARecall): InsertRegulatoryUpdate {\n    const deviceName = recall.product_description || \n                      recall.openfda?.device_name?.[0] || \n                      'Unknown Device';\n    \n    const classification = recall.classification || 'Unknown';\n    const impactLevel = classification.includes('Class I') ? 'high' : \n                       classification.includes('Class II') ? 'medium' : 'low';\n    \n    return {\n      title: `Device Recall: ${deviceName}`,\n      content: this.buildRecallContent(recall),\n      summary: `FDA device recall - ${recall.reason_for_recall || 'Reason not specified'}`,\n      source: 'FDA OpenFDA API',\n      sourceUrl: `https://open.fda.gov/apis/device/recall/`,\n      publishedAt: recall.recall_initiation_date ? new Date(recall.recall_initiation_date) : new Date(),\n      region: 'United States',\n      regulatoryBody: 'FDA',\n      documentType: 'recall',\n      impactLevel: impactLevel as 'low' | 'medium' | 'high',\n      deviceTypes: recall.openfda?.device_name?.map(name => name.toLowerCase().replace(/\\s+/g, '-')) || ['unknown'],\n      isActive: true,\n    };\n  }\n\n  private buildDeviceContent(device: OpenFDADevice): string {\n    const sections = [];\n    \n    sections.push(`**Geräteinformationen:**`);\n    sections.push(`- Gerätename: ${device.device_name || 'Nicht angegeben'}`);\n    sections.push(`- Antragsteller: ${device.applicant || 'Nicht angegeben'}`);\n    sections.push(`- K-Nummer: ${device.k_number || 'Nicht angegeben'}`);\n    sections.push(`- Produktcode: ${device.product_code || 'Nicht angegeben'}`);\n    \n    if (device.openfda) {\n      sections.push(`\\n**Regulatorische Details:**`);\n      sections.push(`- Geräteklasse: ${device.openfda.device_class || 'Nicht angegeben'}`);\n      sections.push(`- Medizinische Spezialisierung: ${device.openfda.medical_specialty_description?.join(', ') || 'Nicht angegeben'}`);\n      sections.push(`- Regulierungsnummer: ${device.openfda.regulation_number?.join(', ') || 'Nicht angegeben'}`);\n    }\n    \n    sections.push(`\\n**Verfahrensinformationen:**`);\n    sections.push(`- Entscheidungsdatum: ${device.decision_date || 'Nicht angegeben'}`);\n    sections.push(`- Entscheidung: ${device.decision || 'Nicht angegeben'}`);\n    sections.push(`- Clearance-Typ: ${device.clearance_type || 'Standard'}`);\n    \n    if (device.statement_or_summary) {\n      sections.push(`\\n**Zusammenfassung:**`);\n      sections.push(device.statement_or_summary);\n    }\n    \n    return sections.join('\\n');\n  }\n\n  private buildRecallContent(recall: OpenFDARecall): string {\n    const sections = [];\n    \n    sections.push(`**Rückruf-Informationen:**`);\n    sections.push(`- Rückruf-Nummer: ${recall.recall_number || 'Nicht angegeben'}`);\n    sections.push(`- Status: ${recall.status || 'Nicht angegeben'}`);\n    sections.push(`- Klassifizierung: ${recall.classification || 'Nicht angegeben'}`);\n    sections.push(`- Rückrufendes Unternehmen: ${recall.recalling_firm || 'Nicht angegeben'}`);\n    \n    sections.push(`\\n**Produktdetails:**`);\n    sections.push(`- Produktbeschreibung: ${recall.product_description || 'Nicht angegeben'}`);\n    \n    if (recall.openfda) {\n      sections.push(`- Gerätename: ${recall.openfda.device_name?.join(', ') || 'Nicht angegeben'}`);\n      sections.push(`- Geräteklasse: ${recall.openfda.device_class || 'Nicht angegeben'}`);\n    }\n    \n    sections.push(`\\n**Rückrufgrund:**`);\n    sections.push(recall.reason_for_recall || 'Grund nicht spezifiziert');\n    \n    sections.push(`\\n**Initiierungsdatum:**`);\n    sections.push(recall.recall_initiation_date || 'Nicht angegeben');\n    \n    return sections.join('\\n');\n  }\n\n  /**\n   * Sync all FDA data and store in database\n   */\n  async syncAllFDAData(): Promise<{ success: boolean; processed: number; errors: number }> {\n    console.log('[Real FDA API] Starting comprehensive FDA data sync...');\n    \n    let processed = 0;\n    let errors = 0;\n\n    try {\n      // Sync 510(k) clearances\n      console.log('[Real FDA API] Syncing 510(k) clearances...');\n      const devices510k = await this.fetch510kClearances(50);\n      for (const device of devices510k) {\n        try {\n          const update = this.convert510kToRegulatoryUpdate(device);\n          await storage.createRegulatoryUpdate(update);\n          processed++;\n        } catch (error) {\n          console.error('[Real FDA API] Error processing 510k device:', error);\n          errors++;\n        }\n      }\n\n      // Sync device recalls\n      console.log('[Real FDA API] Syncing device recalls...');\n      const recalls = await this.fetchDeviceRecalls(50);\n      for (const recall of recalls) {\n        try {\n          const update = this.convertRecallToRegulatoryUpdate(recall);\n          await storage.createRegulatoryUpdate(update);\n          processed++;\n        } catch (error) {\n          console.error('[Real FDA API] Error processing recall:', error);\n          errors++;\n        }\n      }\n\n      console.log(`[Real FDA API] Sync completed: ${processed} processed, ${errors} errors`);\n      return { success: true, processed, errors };\n\n    } catch (error) {\n      console.error('[Real FDA API] Sync failed:', error);\n      return { success: false, processed, errors: errors + 1 };\n    }\n  }\n}\n\nexport const realFDAApiService = new RealFDAApiService();"]}