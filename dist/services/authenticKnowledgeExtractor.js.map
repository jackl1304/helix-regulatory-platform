{"version":3,"file":"authenticKnowledgeExtractor.js","sourceRoot":"","sources":["../../server/services/authenticKnowledgeExtractor.ts"],"names":[],"mappings":"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","sourcesContent":["import { Logger } from './logger.service';\nimport { storage } from '../storage';\nimport { JAMANetworkScrapingService } from './jamaNetworkScrapingService';\n\ninterface AuthenticKnowledgeSource {\n  id: string;\n  name: string;\n  url: string;\n  apiKey?: string;\n  authenticAPI: boolean;\n  extractorService: string;\n}\n\ninterface ExtractionStats {\n  totalSources: number;\n  processedSources: number;\n  articlesExtracted: number;\n  errors: number;\n  duplicatesSkipped: number;\n}\n\nexport class AuthenticKnowledgeExtractor {\n  private logger = new Logger('AuthenticKnowledgeExtractor');\n  private jamaService = new JAMANetworkScrapingService();\n\n  // **PRODUCTION MODE**: Only sources with authentic API access\n  private authenticSources: AuthenticKnowledgeSource[] = [\n    {\n      id: 'jama_medical_devices',\n      name: 'JAMA Network - Medical Devices Collection',\n      url: 'https://jamanetwork.com/collections/5738/medical-devices-and-equipment',\n      authenticAPI: true,\n      extractorService: 'JAMANetworkScrapingService'\n    }\n    // Additional authentic sources can be added when API keys/credentials are available\n    // {\n    //   id: 'fda_guidance_api',\n    //   name: 'FDA Guidance API',\n    //   url: 'https://api.fda.gov/guidance.json',\n    //   apiKey: process.env.FDA_API_KEY,\n    //   authenticAPI: true,\n    //   extractorService: 'FDAGuidanceService'\n    // }\n  ];\n\n  /**\n   * Extract knowledge articles ONLY from authenticated sources\n   */\n  async extractAuthenticKnowledgeArticles(): Promise<ExtractionStats> {\n    this.logger.info('Starting AUTHENTIC knowledge extraction - NO DEMO DATA');\n    \n    const stats: ExtractionStats = {\n      totalSources: this.authenticSources.length,\n      processedSources: 0,\n      articlesExtracted: 0,\n      errors: 0,\n      duplicatesSkipped: 0\n    };\n\n    if (stats.totalSources === 0) {\n      this.logger.warn('NO AUTHENTIC KNOWLEDGE SOURCES CONFIGURED - Knowledge extraction disabled');\n      return stats;\n    }\n\n    // Process only authenticated sources\n    for (const source of this.authenticSources) {\n      try {\n        this.logger.info('Processing AUTHENTIC knowledge source', {\n          sourceId: source.id,\n          sourceName: source.name,\n          hasAPI: source.authenticAPI\n        });\n\n        const articles = await this.extractFromAuthenticSource(source);\n        \n        for (const article of articles) {\n          try {\n            // Store authentic articles as regulatory updates\n            await storage.createRegulatoryUpdate({\n              title: article.title,\n              content: article.content || article.abstract,\n              source: source.name,\n              sourceId: source.id,\n              url: article.url,\n              publishedAt: new Date(article.publishedDate),\n              jurisdiction: 'Global',\n              category: 'Medical Research',\n              tags: JSON.stringify(article.tags || []),\n              author: article.authors.join(', '),\n              wordCount: article.content?.length || 500,\n              relevanceScore: 9,\n              difficulty: 'advanced'\n            });\n            \n            stats.articlesExtracted++;\n          } catch (error: any) {\n            if (error.message?.includes('duplicate')) {\n              stats.duplicatesSkipped++;\n            } else {\n              this.logger.error('Failed to store authentic article', { \n                error: error.message, \n                title: article.title \n              });\n              stats.errors++;\n            }\n          }\n        }\n\n        stats.processedSources++;\n        this.logger.info('Authentic source processing completed', {\n          sourceId: source.id,\n          articlesExtracted: articles.length,\n          duplicatesSkipped: 0\n        });\n\n        // Respectful delay for real APIs\n        await new Promise(resolve => setTimeout(resolve, 5000));\n\n      } catch (error: any) {\n        this.logger.error('Failed to process authentic knowledge source', {\n          sourceId: source.id,\n          error: error.message\n        });\n        stats.errors++;\n      }\n    }\n\n    this.logger.info('AUTHENTIC knowledge extraction completed - NO DEMO DATA USED', stats);\n    return stats;\n  }\n\n  /**\n   * Extract from authenticated source only\n   */\n  private async extractFromAuthenticSource(source: AuthenticKnowledgeSource): Promise<any[]> {\n    switch (source.extractorService) {\n      case 'JAMANetworkScrapingService':\n        return await this.jamaService.scrapeJAMAArticles();\n      \n      default:\n        this.logger.warn(`No authentic extractor available for ${source.name}`);\n        return [];\n    }\n  }\n\n  /**\n   * Get statistics for authenticated sources only\n   */\n  getAuthenticSourcesInfo(): { \n    totalConfigured: number; \n    authenticated: number; \n    pendingAPIKeys: number; \n  } {\n    const authenticated = this.authenticSources.filter(s => s.authenticAPI).length;\n    \n    return {\n      totalConfigured: this.authenticSources.length,\n      authenticated,\n      pendingAPIKeys: this.authenticSources.length - authenticated\n    };\n  }\n}\n\nexport const authenticKnowledgeExtractor = new AuthenticKnowledgeExtractor();"]}