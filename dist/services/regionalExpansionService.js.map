{"version":3,"file":"regionalExpansionService.js","sourceRoot":"","sources":["../../server/services/regionalExpansionService.ts"],"names":[],"mappings":"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","sourcesContent":["import { storage } from '../storage';\n\ninterface RegionalAuthority {\n  id: string;\n  name: string;\n  country: string;\n  region: string;\n  apiUrl?: string;\n  rssFeeds: string[];\n  active: boolean;\n  dataTypes: string[];\n  priority: 'high' | 'medium' | 'low';\n}\n\ninterface RegionalUpdate {\n  authorityId: string;\n  title: string;\n  content: string;\n  type: string;\n  publishedAt: Date;\n  originalUrl?: string;\n  language: string;\n  translatedContent?: string;\n}\n\nexport class RegionalExpansionService {\n  private regionalAuthorities: RegionalAuthority[] = [\n    // Asian Authorities\n    {\n      id: 'mfds-korea',\n      name: 'Ministry of Food and Drug Safety',\n      country: 'South Korea',\n      region: 'Asia',\n      apiUrl: 'https://www.mfds.go.kr/api',\n      rssFeeds: ['https://www.mfds.go.kr/rss/news.xml'],\n      active: true,\n      dataTypes: ['Device Approvals', 'Safety Alerts', 'Regulations'],\n      priority: 'high'\n    },\n    {\n      id: 'thailand-fda',\n      name: 'Food and Drug Administration Thailand',\n      country: 'Thailand',\n      region: 'Asia',\n      rssFeeds: ['https://www.fda.moph.go.th/rss/news.xml'],\n      active: true,\n      dataTypes: ['Medical Device Registration', 'Recalls', 'Guidelines'],\n      priority: 'medium'\n    },\n    {\n      id: 'pmda-japan',\n      name: 'Pharmaceuticals and Medical Devices Agency',\n      country: 'Japan',\n      region: 'Asia',\n      apiUrl: 'https://www.pmda.go.jp/api',\n      rssFeeds: ['https://www.pmda.go.jp/rss/news.xml'],\n      active: true,\n      dataTypes: ['Shonin Approvals', 'Safety Information', 'Guidelines'],\n      priority: 'high'\n    },\n    // European Authorities\n    {\n      id: 'aifa-italy',\n      name: 'Italian Medicines Agency',\n      country: 'Italy',\n      region: 'Europe',\n      rssFeeds: ['https://www.aifa.gov.it/rss/news.xml'],\n      active: true,\n      dataTypes: ['CE Mark Updates', 'Safety Communications', 'Guidelines'],\n      priority: 'medium'\n    },\n    {\n      id: 'aemps-spain',\n      name: 'Spanish Agency of Medicines and Medical Devices',\n      country: 'Spain',\n      region: 'Europe',\n      rssFeeds: ['https://www.aemps.gob.es/rss/news.xml'],\n      active: true,\n      dataTypes: ['Device Registrations', 'Safety Alerts', 'Regulatory Updates'],\n      priority: 'medium'\n    },\n    // Middle Eastern Authorities\n    {\n      id: 'saudi-fda',\n      name: 'Saudi Food and Drug Authority',\n      country: 'Saudi Arabia',\n      region: 'Middle East',\n      apiUrl: 'https://www.sfda.gov.sa/api',\n      rssFeeds: ['https://www.sfda.gov.sa/rss/news.xml'],\n      active: true,\n      dataTypes: ['MDMA Registrations', 'Market Surveillance', 'Guidelines'],\n      priority: 'high'\n    },\n    {\n      id: 'uae-moh',\n      name: 'UAE Ministry of Health',\n      country: 'United Arab Emirates',\n      region: 'Middle East',\n      rssFeeds: ['https://www.mohap.gov.ae/rss/news.xml'],\n      active: true,\n      dataTypes: ['Device Approvals', 'Health Alerts', 'Regulations'],\n      priority: 'medium'\n    },\n    // African Authorities\n    {\n      id: 'sahpra',\n      name: 'South African Health Products Regulatory Authority',\n      country: 'South Africa',\n      region: 'Africa',\n      apiUrl: 'https://www.sahpra.org.za/api',\n      rssFeeds: ['https://www.sahpra.org.za/rss/news.xml'],\n      active: true,\n      dataTypes: ['Medical Device Registrations', 'Safety Alerts', 'Guidelines'],\n      priority: 'high'\n    }\n  ];\n\n  private async makeRequest(url: string): Promise<any> {\n    try {\n      console.log(`[Regional] Requesting: ${url}`);\n      \n      const response = await fetch(url, {\n        headers: {\n          'User-Agent': 'Helix-Regional-Monitor/1.0',\n          'Accept': 'application/json, application/xml, text/xml'\n        }\n      });\n      \n      if (!response.ok) {\n        throw new Error(`Regional API error: ${response.status} ${response.statusText}`);\n      }\n      \n      const contentType = response.headers.get('content-type');\n      if (contentType?.includes('application/json')) {\n        return await response.json();\n      } else {\n        return await response.text();\n      }\n    } catch (error) {\n      console.error(`[Regional] Request failed for ${url}:`, error);\n      // Return empty array until real API is available\n      return [];\n    }\n  }\n\n  // ALLE MOCK-DATEN ENTFERNT - Nur echte APIs verwenden\n  private getMockRegionalData(url: string): RegionalUpdate[] {\n    console.log(`[Regional] MOCK DATA DELETED - No artificial data for ${url}`);\n    return [];\n  }\n\n  async collectRegionalUpdates(authorityId: string): Promise<void> {\n    try {\n      const authority = this.regionalAuthorities.find(auth => auth.id === authorityId);\n      if (!authority) {\n        throw new Error(`Unknown authority: ${authorityId}`);\n      }\n\n      console.log(`[Regional] Collecting updates from ${authority.name}`);\n\n      let updates: RegionalUpdate[] = [];\n\n      // Try API first if available\n      if (authority.apiUrl) {\n        try {\n          const apiData = await this.makeRequest(`${authority.apiUrl}/updates`);\n          updates = Array.isArray(apiData) ? apiData : [apiData];\n        } catch (error) {\n          console.log(`[Regional] API failed for ${authority.name} - NO MOCK DATA FALLBACK`);\n          updates = [];\n        }\n      } else {\n        // ALLE MOCK-DATEN ENTFERNT - Nur echte APIs verwenden\n        console.log(`[Regional] No API available for ${authority.name} - skipping (no mock data)`);\n        updates = [];\n      }\n\n      console.log(`[Regional] Found ${updates.length} updates from ${authority.name}`);\n\n      for (const update of updates) {\n        await this.processRegionalUpdate(update, authority);\n      }\n\n      console.log(`[Regional] Completed processing updates from ${authority.name}`);\n    } catch (error) {\n      console.error(`[Regional] Error collecting updates from ${authorityId}:`, error);\n      throw error;\n    }\n  }\n\n  private async processRegionalUpdate(update: RegionalUpdate, authority: RegionalAuthority): Promise<void> {\n    try {\n      const regulatoryUpdate = {\n        id: `regional-${authority.id}-${Math.random().toString(36).substr(2, 9)}`,\n        title: `${authority.name}: ${update.title}`,\n        content: this.formatRegionalContent(update, authority),\n        source: `${authority.name} (Regional)`,\n        type: update.type,\n        region: authority.country,\n        authority: authority.name,\n        priority: this.determineRegionalPriority(update, authority),\n        published_at: update.publishedAt,\n        status: 'published',\n        metadata: {\n          authorityId: authority.id,\n          country: authority.country,\n          regionalArea: authority.region,\n          originalLanguage: update.language,\n          translatedContent: update.translatedContent,\n          originalUrl: update.originalUrl,\n          dataTypes: authority.dataTypes\n        }\n      };\n\n      await storage.createRegulatoryUpdate(regulatoryUpdate);\n      console.log(`[Regional] Successfully created update: ${update.title}`);\n    } catch (error) {\n      console.error('[Regional] Error processing regional update:', error);\n    }\n  }\n\n  private formatRegionalContent(update: RegionalUpdate, authority: RegionalAuthority): string {\n    const parts = [];\n\n    parts.push(`**Authority:** ${authority.name}`);\n    parts.push(`**Country:** ${authority.country}`);\n    parts.push(`**Region:** ${authority.region}`);\n    parts.push(`**Type:** ${update.type}`);\n\n    if (update.language !== 'en') {\n      parts.push(`**Original Language:** ${update.language}`);\n    }\n\n    if (update.translatedContent) {\n      parts.push(`**Summary:** ${update.translatedContent}`);\n    }\n\n    parts.push(`**Content:** ${update.content}`);\n\n    if (update.originalUrl) {\n      parts.push(`**Source URL:** ${update.originalUrl}`);\n    }\n\n    return parts.join('\\n\\n');\n  }\n\n  private determineRegionalPriority(update: RegionalUpdate, authority: RegionalAuthority): 'low' | 'medium' | 'high' | 'critical' {\n    // Base priority on authority importance\n    let basePriority = authority.priority;\n\n    // Adjust based on update type\n    const highPriorityTypes = ['safety alert', 'recall', 'urgent', 'emergency'];\n    const mediumPriorityTypes = ['approval', 'registration', 'clearance'];\n\n    const updateType = update.type.toLowerCase();\n    const updateContent = (update.title + ' ' + update.content).toLowerCase();\n\n    if (highPriorityTypes.some(type => updateType.includes(type) || updateContent.includes(type))) {\n      return basePriority === 'high' ? 'critical' : 'high';\n    }\n\n    if (mediumPriorityTypes.some(type => updateType.includes(type) || updateContent.includes(type))) {\n      return basePriority === 'low' ? 'medium' : basePriority;\n    }\n\n    return basePriority;\n  }\n\n  async monitorRSSFeeds(authorityId: string): Promise<void> {\n    try {\n      const authority = this.regionalAuthorities.find(auth => auth.id === authorityId);\n      if (!authority || authority.rssFeeds.length === 0) {\n        console.log(`[Regional] No RSS feeds for ${authorityId}`);\n        return;\n      }\n\n      console.log(`[Regional] Monitoring RSS feeds for ${authority.name}`);\n\n      for (const feedUrl of authority.rssFeeds) {\n        try {\n          const feedContent = await this.makeRequest(feedUrl);\n          \n          // Simple RSS parsing (in production, use proper XML parser)\n          const items = this.parseRSSFeed(feedContent, authority);\n          \n          for (const item of items) {\n            await this.processRegionalUpdate(item, authority);\n          }\n        } catch (error) {\n          console.error(`[Regional] Error processing RSS feed ${feedUrl}:`, error);\n        }\n      }\n\n      console.log(`[Regional] Completed RSS monitoring for ${authority.name}`);\n    } catch (error) {\n      console.error(`[Regional] Error monitoring RSS feeds for ${authorityId}:`, error);\n    }\n  }\n\n  private parseRSSFeed(feedContent: string, authority: RegionalAuthority): RegionalUpdate[] {\n    // Simplified RSS parsing - in production use proper XML parser\n    try {\n      const items: RegionalUpdate[] = [];\n      \n      // For mock implementation, return sample data\n      if (typeof feedContent === 'string' && feedContent.includes('xml')) {\n        const mockItems = this.getMockRegionalData(authority.id);\n        return mockItems.slice(0, 3); // Return first 3 items\n      }\n\n      return items;\n    } catch (error) {\n      console.error('[Regional] Error parsing RSS feed:', error);\n      return [];\n    }\n  }\n\n  async syncAllRegionalAuthorities(): Promise<void> {\n    try {\n      console.log('[Regional] Starting sync for all regional authorities');\n\n      const activeAuthorities = this.regionalAuthorities.filter(auth => auth.active);\n      \n      for (const authority of activeAuthorities) {\n        try {\n          console.log(`[Regional] Syncing ${authority.name}...`);\n          \n          // Collect updates via API\n          await this.collectRegionalUpdates(authority.id);\n          \n          // Monitor RSS feeds\n          await this.monitorRSSFeeds(authority.id);\n          \n          // Small delay between authorities\n          await new Promise(resolve => setTimeout(resolve, 1000));\n        } catch (error) {\n          console.error(`[Regional] Error syncing ${authority.name}:`, error);\n          // Continue with other authorities\n        }\n      }\n\n      console.log('[Regional] Completed sync for all regional authorities');\n    } catch (error) {\n      console.error('[Regional] Error in regional sync:', error);\n      throw error;\n    }\n  }\n\n  getRegionalAuthorities(): RegionalAuthority[] {\n    return [...this.regionalAuthorities];\n  }\n\n  getAuthorityStatus(): any {\n    return this.regionalAuthorities.map(auth => ({\n      id: auth.id,\n      name: auth.name,\n      country: auth.country,\n      region: auth.region,\n      active: auth.active,\n      priority: auth.priority,\n      dataTypes: auth.dataTypes,\n      hasAPI: !!auth.apiUrl,\n      rssFeeds: auth.rssFeeds.length\n    }));\n  }\n}"]}