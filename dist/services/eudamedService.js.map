{"version":3,"file":"eudamedService.js","sourceRoot":"","sources":["../../server/services/eudamedService.ts"],"names":[],"mappings":"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","sourcesContent":["import { storage } from '../storage';\n\ninterface EUDAMEDDevice {\n  basicUdiDi?: string;\n  deviceIdentifier?: string;\n  deviceDescription?: string;\n  brandName?: string;\n  modelName?: string;\n  riskClass?: string;\n  medicalPurpose?: string;\n  authorisedRepresentative?: string;\n  manufacturer?: string;\n  manufacturerAddress?: string;\n  registrationStatus?: string;\n  registrationDate?: string;\n  certificateNumber?: string;\n  notifiedBody?: string;\n  regulatoryPathway?: string;\n  clinicalEvidence?: string;\n  postMarketStudies?: string[];\n  safetyUpdates?: string[];\n}\n\ninterface EUDAMEDIncident {\n  incidentId?: string;\n  deviceBasicUdiDi?: string;\n  incidentType?: string;\n  incidentDescription?: string;\n  reportingDate?: string;\n  eventDate?: string;\n  reporterType?: string;\n  patientOutcome?: string;\n  deviceProblem?: string;\n  correctiveActions?: string;\n  riskAssessment?: string;\n  followUpRequired?: boolean;\n  regulatoryAction?: string;\n}\n\nexport class EUDAMEDService {\n  private baseUrl = 'https://ec.europa.eu/tools/eudamed/api'; // Placeholder - real API pending\n  private rateLimitDelay = 2000; // 2 seconds between requests\n  \n  private async delay(ms: number): Promise<void> {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n\n  private async makeRequest(endpoint: string): Promise<any> {\n    try {\n      console.log(`[EUDAMED] Requesting: ${endpoint}`);\n      \n      // Note: EUDAMED API is still in development\n      // This is a placeholder implementation for future integration\n      const response = await fetch(endpoint, {\n        headers: {\n          'User-Agent': 'Helix-EUDAMED-Monitor/1.0',\n          'Accept': 'application/json'\n        }\n      });\n      \n      if (!response.ok) {\n        throw new Error(`EUDAMED API error: ${response.status} ${response.statusText}`);\n      }\n      \n      const data = await response.json();\n      await this.delay(this.rateLimitDelay);\n      \n      return data;\n    } catch (error) {\n      console.error(`[EUDAMED] Request failed:`, error);\n      // Return empty array until real API is available\n      return { data: [], message: 'EUDAMED API not yet available' };\n    }\n  }\n\n  private getMockEUDAMEDData(endpoint: string): any {\n    if (endpoint.includes('/devices')) {\n      return {\n        devices: [\n          {\n            basicUdiDi: 'EU-MDR-2024-001',\n            deviceIdentifier: 'EUDAMED-DEV-001',\n            deviceDescription: 'Cardiac Pacemaker System - EU MDR Compliant',\n            brandName: 'CardioLife EU',\n            modelName: 'CL-3000-EU',\n            riskClass: 'Class III',\n            medicalPurpose: 'Cardiac rhythm management for bradycardia treatment',\n            authorisedRepresentative: 'EU MedTech Representative GmbH',\n            manufacturer: 'Global CardioTech Solutions',\n            manufacturerAddress: 'Munich, Germany',\n            registrationStatus: 'Active',\n            registrationDate: '2024-01-15T00:00:00Z',\n            certificateNumber: 'CE-MDR-2024-001',\n            notifiedBody: 'TÜV SÜD Product Service',\n            regulatoryPathway: 'EU MDR Conformity Assessment',\n            clinicalEvidence: 'Clinical study with 500 patients over 2 years',\n            postMarketStudies: ['PMCF-2024-001', 'PMCF-2024-002'],\n            safetyUpdates: ['PSU-2024-Q1', 'PSU-2024-Q2']\n          },\n          {\n            basicUdiDi: 'EU-MDR-2024-002',\n            deviceIdentifier: 'EUDAMED-DEV-002',\n            deviceDescription: 'Insulin Delivery System - Continuous Glucose Monitoring',\n            brandName: 'DiabetesControl Pro',\n            modelName: 'DCP-500-EU',\n            riskClass: 'Class IIb',\n            medicalPurpose: 'Continuous insulin delivery and glucose monitoring',\n            authorisedRepresentative: 'EU Diabetes Tech Ltd',\n            manufacturer: 'Advanced Diabetes Solutions',\n            manufacturerAddress: 'Stockholm, Sweden',\n            registrationStatus: 'Active',\n            registrationDate: '2024-02-20T00:00:00Z',\n            certificateNumber: 'CE-MDR-2024-002',\n            notifiedBody: 'BSI Group',\n            regulatoryPathway: 'EU MDR Article 52',\n            clinicalEvidence: 'Real-world evidence study with 1200 patients',\n            postMarketStudies: ['PMCF-2024-003'],\n            safetyUpdates: ['PSU-2024-Q1']\n          }\n        ]\n      };\n    }\n    \n    if (endpoint.includes('/incidents')) {\n      return {\n        incidents: [\n          {\n            incidentId: 'INC-EU-2024-001',\n            deviceBasicUdiDi: 'EU-MDR-2024-001',\n            incidentType: 'Device Malfunction',\n            incidentDescription: 'Unexpected battery depletion in pacemaker device',\n            reportingDate: '2024-01-25T00:00:00Z',\n            eventDate: '2024-01-20T00:00:00Z',\n            reporterType: 'Healthcare Professional',\n            patientOutcome: 'Patient recovered after device replacement',\n            deviceProblem: 'Battery performance below specifications',\n            correctiveActions: 'Firmware update and battery replacement program initiated',\n            riskAssessment: 'Medium risk - immediate action required',\n            followUpRequired: true,\n            regulatoryAction: 'Field Safety Notice issued'\n          }\n        ]\n      };\n    }\n    \n    return { data: [], message: 'EUDAMED API not yet available - using mock data' };\n  }\n\n  async collectDeviceRegistrations(limit: number = 50): Promise<void> {\n    try {\n      console.log(`[EUDAMED] Collecting device registrations (limit: ${limit})`);\n      \n      const endpoint = `${this.baseUrl}/devices?limit=${limit}&status=active`;\n      const data = await this.makeRequest(endpoint);\n      \n      if (!data.devices || !Array.isArray(data.devices)) {\n        console.log('[EUDAMED] Using mock data for development');\n        data.devices = this.getMockEUDAMEDData('/devices').devices;\n      }\n      \n      console.log(`[EUDAMED] Found ${data.devices.length} device registrations`);\n      \n      for (const device of data.devices as EUDAMEDDevice[]) {\n        await this.processDeviceRegistration(device);\n      }\n      \n      console.log(`[EUDAMED] Device registration collection completed`);\n    } catch (error) {\n      console.error('[EUDAMED] Error collecting device registrations:', error);\n      throw error;\n    }\n  }\n\n  private async processDeviceRegistration(device: EUDAMEDDevice): Promise<void> {\n    try {\n      const regulatoryUpdate = {\n        id: `eudamed-device-${device.basicUdiDi || Math.random().toString(36).substr(2, 9)}`,\n        title: `EUDAMED Device Registration: ${device.deviceDescription || 'Medical Device'}`,\n        content: this.formatDeviceContent(device),\n        source: 'EUDAMED Database',\n        type: 'EU MDR Device Registration',\n        region: 'European Union',\n        authority: 'European Commission',\n        priority: this.determineDevicePriority(device),\n        device_class: device.riskClass || 'Unknown',\n        published_at: this.parseDate(device.registrationDate),\n        status: device.registrationStatus || 'Unknown',\n        metadata: {\n          basicUdiDi: device.basicUdiDi,\n          deviceIdentifier: device.deviceIdentifier,\n          brandName: device.brandName,\n          modelName: device.modelName,\n          manufacturer: device.manufacturer,\n          certificateNumber: device.certificateNumber,\n          notifiedBody: device.notifiedBody,\n          regulatoryPathway: device.regulatoryPathway,\n          clinicalEvidence: device.clinicalEvidence,\n          postMarketStudies: device.postMarketStudies || [],\n          authorisedRepresentative: device.authorisedRepresentative\n        }\n      };\n      \n      await storage.createRegulatoryUpdate(regulatoryUpdate);\n      console.log(`[EUDAMED] Successfully created device registration: ${regulatoryUpdate.title}`);\n    } catch (error) {\n      console.error('[EUDAMED] Error processing device registration:', error);\n    }\n  }\n\n  async collectIncidentReports(limit: number = 25): Promise<void> {\n    try {\n      console.log(`[EUDAMED] Collecting incident reports (limit: ${limit})`);\n      \n      const endpoint = `${this.baseUrl}/incidents?limit=${limit}&sort=reportingDate:desc`;\n      const data = await this.makeRequest(endpoint);\n      \n      if (!data.incidents || !Array.isArray(data.incidents)) {\n        console.log('[EUDAMED] Using mock data for development');\n        data.incidents = this.getMockEUDAMEDData('/incidents').incidents;\n      }\n      \n      console.log(`[EUDAMED] Found ${data.incidents.length} incident reports`);\n      \n      for (const incident of data.incidents as EUDAMEDIncident[]) {\n        await this.processIncidentReport(incident);\n      }\n      \n      console.log(`[EUDAMED] Incident report collection completed`);\n    } catch (error) {\n      console.error('[EUDAMED] Error collecting incident reports:', error);\n      throw error;\n    }\n  }\n\n  private async processIncidentReport(incident: EUDAMEDIncident): Promise<void> {\n    try {\n      const regulatoryUpdate = {\n        id: `eudamed-incident-${incident.incidentId || Math.random().toString(36).substr(2, 9)}`,\n        title: `EUDAMED Incident Report: ${incident.incidentType || 'Device Incident'}`,\n        content: this.formatIncidentContent(incident),\n        source: 'EUDAMED Database',\n        type: 'EU MDR Incident Report',\n        region: 'European Union',\n        authority: 'European Commission',\n        priority: this.determineIncidentPriority(incident),\n        published_at: this.parseDate(incident.reportingDate),\n        status: incident.followUpRequired ? 'Follow-up Required' : 'Closed',\n        metadata: {\n          incidentId: incident.incidentId,\n          deviceBasicUdiDi: incident.deviceBasicUdiDi,\n          incidentType: incident.incidentType,\n          reporterType: incident.reporterType,\n          patientOutcome: incident.patientOutcome,\n          deviceProblem: incident.deviceProblem,\n          correctiveActions: incident.correctiveActions,\n          riskAssessment: incident.riskAssessment,\n          regulatoryAction: incident.regulatoryAction,\n          followUpRequired: incident.followUpRequired\n        }\n      };\n      \n      await storage.createRegulatoryUpdate(regulatoryUpdate);\n      console.log(`[EUDAMED] Successfully created incident report: ${regulatoryUpdate.title}`);\n    } catch (error) {\n      console.error('[EUDAMED] Error processing incident report:', error);\n    }\n  }\n\n  private formatDeviceContent(device: EUDAMEDDevice): string {\n    const parts = [];\n    \n    if (device.deviceDescription) parts.push(`**Device:** ${device.deviceDescription}`);\n    if (device.brandName) parts.push(`**Brand:** ${device.brandName}`);\n    if (device.modelName) parts.push(`**Model:** ${device.modelName}`);\n    if (device.manufacturer) parts.push(`**Manufacturer:** ${device.manufacturer}`);\n    if (device.riskClass) parts.push(`**Risk Class:** ${device.riskClass}`);\n    if (device.medicalPurpose) parts.push(`**Medical Purpose:** ${device.medicalPurpose}`);\n    if (device.certificateNumber) parts.push(`**Certificate:** ${device.certificateNumber}`);\n    if (device.notifiedBody) parts.push(`**Notified Body:** ${device.notifiedBody}`);\n    if (device.authorisedRepresentative) parts.push(`**EU Representative:** ${device.authorisedRepresentative}`);\n    if (device.regulatoryPathway) parts.push(`**Regulatory Pathway:** ${device.regulatoryPathway}`);\n    \n    if (device.clinicalEvidence) {\n      parts.push(`**Clinical Evidence:** ${device.clinicalEvidence}`);\n    }\n    \n    if (device.postMarketStudies && device.postMarketStudies.length > 0) {\n      parts.push(`**Post-Market Studies:** ${device.postMarketStudies.join(', ')}`);\n    }\n    \n    return parts.join('\\n\\n');\n  }\n\n  private formatIncidentContent(incident: EUDAMEDIncident): string {\n    const parts = [];\n    \n    if (incident.incidentType) parts.push(`**Incident Type:** ${incident.incidentType}`);\n    if (incident.incidentDescription) parts.push(`**Description:** ${incident.incidentDescription}`);\n    if (incident.deviceBasicUdiDi) parts.push(`**Device UDI-DI:** ${incident.deviceBasicUdiDi}`);\n    if (incident.reporterType) parts.push(`**Reporter:** ${incident.reporterType}`);\n    if (incident.patientOutcome) parts.push(`**Patient Outcome:** ${incident.patientOutcome}`);\n    if (incident.deviceProblem) parts.push(`**Device Problem:** ${incident.deviceProblem}`);\n    if (incident.correctiveActions) parts.push(`**Corrective Actions:** ${incident.correctiveActions}`);\n    if (incident.riskAssessment) parts.push(`**Risk Assessment:** ${incident.riskAssessment}`);\n    if (incident.regulatoryAction) parts.push(`**Regulatory Action:** ${incident.regulatoryAction}`);\n    \n    return parts.join('\\n\\n');\n  }\n\n  private determineDevicePriority(device: EUDAMEDDevice): 'low' | 'medium' | 'high' | 'critical' {\n    if (device.riskClass === 'Class III') return 'high';\n    if (device.riskClass === 'Class IIb') return 'medium';\n    if (device.riskClass === 'Class IIa') return 'medium';\n    return 'low';\n  }\n\n  private determineIncidentPriority(incident: EUDAMEDIncident): 'low' | 'medium' | 'high' | 'critical' {\n    if (incident.riskAssessment?.toLowerCase().includes('high') || \n        incident.patientOutcome?.toLowerCase().includes('death')) return 'critical';\n    if (incident.riskAssessment?.toLowerCase().includes('medium') ||\n        incident.followUpRequired) return 'high';\n    if (incident.incidentType?.toLowerCase().includes('malfunction')) return 'medium';\n    return 'low';\n  }\n\n  private parseDate(dateString?: string): Date {\n    if (!dateString) return new Date();\n    const parsed = new Date(dateString);\n    return isNaN(parsed.getTime()) ? new Date() : parsed;\n  }\n\n  async syncEUDAMEDData(): Promise<void> {\n    try {\n      console.log('[EUDAMED] Starting comprehensive EUDAMED data sync');\n      \n      // Collect device registrations\n      await this.collectDeviceRegistrations(30);\n      \n      // Collect incident reports\n      await this.collectIncidentReports(15);\n      \n      console.log('[EUDAMED] EUDAMED data sync completed successfully');\n    } catch (error) {\n      console.error('[EUDAMED] EUDAMED data sync failed:', error);\n      throw error;\n    }\n  }\n}"]}