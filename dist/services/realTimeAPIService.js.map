{"version":3,"file":"realTimeAPIService.js","sourceRoot":"","sources":["../../server/services/realTimeAPIService.ts"],"names":[],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport { storage } from '../storage';\n\ninterface APIEndpoint {\n  name: string;\n  url: string;\n  method: 'GET' | 'POST';\n  headers?: Record<string, string>;\n  params?: Record<string, any>;\n  dataPath?: string;\n  category: 'regulatory' | 'clinical' | 'safety' | 'standards' | 'global_health';\n  region: string;\n  priority: 'high' | 'medium' | 'low';\n}\n\ninterface APIResponse {\n  success: boolean;\n  data: any[];\n  source: string;\n  timestamp: string;\n  recordCount: number;\n  error?: string;\n}\n\ninterface ClinicalTrial {\n  nctId: string;\n  briefTitle: string;\n  studyType: string;\n  phase: string;\n  overallStatus: string;\n  startDate: string;\n  completionDate: string;\n  conditions: string[];\n  interventions: string[];\n}\n\ninterface WHOIndicator {\n  indicatorCode: string;\n  indicatorName: string;\n  region: string;\n  country: string;\n  year: number;\n  value: number;\n  unit: string;\n}\n\nexport class RealTimeAPIService {\n  private apiEndpoints: APIEndpoint[] = [\n    // FDA OpenFDA API - Highest Priority\n    {\n      name: 'FDA 510k Clearances',\n      url: 'https://api.fda.gov/device/510k.json',\n      method: 'GET',\n      params: { limit: 100, sort: 'date_received:desc' },\n      dataPath: 'results',\n      category: 'regulatory',\n      region: 'United States',\n      priority: 'high'\n    },\n    {\n      name: 'FDA Device Recalls',\n      url: 'https://api.fda.gov/device/recall.json',\n      method: 'GET',\n      params: { limit: 100, sort: 'report_date:desc' },\n      dataPath: 'results',\n      category: 'safety',\n      region: 'United States',\n      priority: 'high'\n    },\n    {\n      name: 'FDA PMA Approvals',\n      url: 'https://api.fda.gov/device/pma.json',\n      method: 'GET',\n      params: { limit: 100, sort: 'date_received:desc' },\n      dataPath: 'results',\n      category: 'regulatory',\n      region: 'United States',\n      priority: 'high'\n    },\n    // WHO Global Health Observatory\n    {\n      name: 'WHO Health Indicators',\n      url: 'https://ghoapi.azureedge.net/api/Indicator',\n      method: 'GET',\n      dataPath: 'value',\n      category: 'global_health',\n      region: 'Global',\n      priority: 'high'\n    },\n    // ClinicalTrials.gov API\n    {\n      name: 'Clinical Trials Medical Devices',\n      url: 'https://clinicaltrials.gov/api/query/study_fields',\n      method: 'GET',\n      params: {\n        expr: 'medical device',\n        fields: 'NCTId,BriefTitle,StudyType,Phase,OverallStatus,StartDate,CompletionDate,Condition,InterventionName',\n        fmt: 'json',\n        max_rnk: 100\n      },\n      dataPath: 'StudyFieldsResponse.StudyFields',\n      category: 'clinical',\n      region: 'Global',\n      priority: 'high'\n    }\n  ];\n\n  private rssFeeds: string[] = [\n    'https://www.fda.gov/about-fda/contact-fda/stay-informed/rss-feeds-fda',\n    'https://www.ema.europa.eu/en/rss.xml',\n    'https://www.bfarm.de/DE/Service/RSS/_node.html',\n    'https://www.swissmedic.ch/swissmedic/de/home.rss.html',\n    'https://www.mhra.gov.uk/news-and-events/news/rss.xml'\n  ];\n\n  async fetchFromAPI(endpoint: APIEndpoint): Promise<APIResponse> {\n    try {\n      console.log(`[Real-Time API] Fetching from ${endpoint.name}...`);\n      \n      const config = {\n        method: endpoint.method,\n        url: endpoint.url,\n        headers: {\n          'User-Agent': 'Helix-Regulatory-Intelligence/1.0',\n          'Accept': 'application/json',\n          ...endpoint.headers\n        },\n        params: endpoint.params,\n        timeout: 30000\n      };\n\n      const response = await axios(config);\n      \n      let data = response.data;\n      if (endpoint.dataPath) {\n        const pathParts = endpoint.dataPath.split('.');\n        for (const part of pathParts) {\n          data = data?.[part];\n        }\n      }\n\n      const results = Array.isArray(data) ? data : [data];\n      \n      console.log(`[Real-Time API] ${endpoint.name}: Retrieved ${results.length} records`);\n      \n      return {\n        success: true,\n        data: results,\n        source: endpoint.name,\n        timestamp: new Date().toISOString(),\n        recordCount: results.length\n      };\n    } catch (error: any) {\n      console.error(`[Real-Time API] Error fetching ${endpoint.name}:`, error.message);\n      return {\n        success: false,\n        data: [],\n        source: endpoint.name,\n        timestamp: new Date().toISOString(),\n        recordCount: 0,\n        error: error.message\n      };\n    }\n  }\n\n  async syncFDAData(): Promise<{ success: boolean; summary: any }> {\n    try {\n      console.log('[Real-Time API] Starting FDA data synchronization...');\n      \n      const fdaEndpoints = this.apiEndpoints.filter(ep => \n        ep.name.includes('FDA') && ep.priority === 'high'\n      );\n      \n      const results = await Promise.allSettled(\n        fdaEndpoints.map(endpoint => this.fetchFromAPI(endpoint))\n      );\n      \n      let totalRecords = 0;\n      let successfulSyncs = 0;\n      const syncSummary: any = {};\n      \n      for (let i = 0; i < results.length; i++) {\n        const result = results[i];\n        const endpoint = fdaEndpoints[i];\n        \n        if (result.status === 'fulfilled' && result.value.success) {\n          successfulSyncs++;\n          totalRecords += result.value.recordCount;\n          \n          // Process and store FDA data\n          await this.processFDAData(result.value, endpoint);\n          \n          syncSummary[endpoint.name] = {\n            records: result.value.recordCount,\n            status: 'success'\n          };\n        } else {\n          syncSummary[endpoint.name] = {\n            records: 0,\n            status: 'failed',\n            error: result.status === 'fulfilled' ? result.value.error : 'Promise rejected'\n          };\n        }\n      }\n      \n      console.log(`[Real-Time API] FDA sync completed: ${successfulSyncs}/${fdaEndpoints.length} successful, ${totalRecords} total records`);\n      \n      return {\n        success: successfulSyncs > 0,\n        summary: {\n          totalRecords,\n          successfulSyncs,\n          totalEndpoints: fdaEndpoints.length,\n          details: syncSummary\n        }\n      };\n    } catch (error: any) {\n      console.error('[Real-Time API] FDA sync failed:', error);\n      return { success: false, summary: { error: error.message } };\n    }\n  }\n\n  async syncClinicalTrialsData(): Promise<{ success: boolean; summary: any }> {\n    try {\n      console.log('[Real-Time API] Starting Clinical Trials synchronization...');\n      \n      const clinicalEndpoint = this.apiEndpoints.find(ep => \n        ep.name === 'Clinical Trials Medical Devices'\n      );\n      \n      if (!clinicalEndpoint) {\n        throw new Error('Clinical Trials endpoint not found');\n      }\n      \n      const response = await this.fetchFromAPI(clinicalEndpoint);\n      \n      if (response.success) {\n        await this.processClinicalTrialsData(response);\n        \n        console.log(`[Real-Time API] Clinical Trials sync completed: ${response.recordCount} records`);\n        \n        return {\n          success: true,\n          summary: {\n            totalRecords: response.recordCount,\n            source: 'ClinicalTrials.gov',\n            timestamp: response.timestamp\n          }\n        };\n      } else {\n        return {\n          success: false,\n          summary: { error: response.error }\n        };\n      }\n    } catch (error: any) {\n      console.error('[Real-Time API] Clinical Trials sync failed:', error);\n      return { success: false, summary: { error: error.message } };\n    }\n  }\n\n  async syncWHOData(): Promise<{ success: boolean; summary: any }> {\n    try {\n      console.log('[Real-Time API] Starting WHO Global Health Observatory synchronization...');\n      \n      const whoEndpoint = this.apiEndpoints.find(ep => \n        ep.name === 'WHO Health Indicators'\n      );\n      \n      if (!whoEndpoint) {\n        throw new Error('WHO endpoint not found');\n      }\n      \n      const response = await this.fetchFromAPI(whoEndpoint);\n      \n      if (response.success) {\n        await this.processWHOData(response);\n        \n        console.log(`[Real-Time API] WHO sync completed: ${response.recordCount} indicators`);\n        \n        return {\n          success: true,\n          summary: {\n            totalRecords: response.recordCount,\n            source: 'WHO Global Health Observatory',\n            timestamp: response.timestamp\n          }\n        };\n      } else {\n        return {\n          success: false,\n          summary: { error: response.error }\n        };\n      }\n    } catch (error: any) {\n      console.error('[Real-Time API] WHO sync failed:', error);\n      return { success: false, summary: { error: error.message } };\n    }\n  }\n\n  private async processFDAData(apiResponse: APIResponse, endpoint: APIEndpoint): Promise<void> {\n    try {\n      for (const record of apiResponse.data) {\n        const processedUpdate = this.transformFDARecord(record, endpoint);\n        \n        // Check if already exists to avoid duplicates\n        const existing = await this.checkForDuplicate(processedUpdate);\n        if (!existing) {\n          await storage.createRegulatoryUpdate(processedUpdate);\n        }\n      }\n    } catch (error) {\n      console.error('[Real-Time API] Error processing FDA data:', error);\n    }\n  }\n\n  private async processClinicalTrialsData(apiResponse: APIResponse): Promise<void> {\n    try {\n      for (const trial of apiResponse.data) {\n        const processedTrial = this.transformClinicalTrialRecord(trial);\n        \n        // Store as regulatory update with clinical trial category\n        const regulatoryUpdate = {\n          id: `clinical-${processedTrial.nctId}`,\n          title: `Clinical Trial: ${processedTrial.briefTitle}`,\n          content: this.generateClinicalTrialContent(processedTrial),\n          authority: 'ClinicalTrials.gov',\n          region: 'Global',\n          category: 'clinical_trials',\n          type: 'clinical_study',\n          published_at: new Date().toISOString(),\n          priority: this.determineClinicalTrialPriority(processedTrial),\n          tags: ['clinical_trial', 'medical_device', processedTrial.phase, processedTrial.overallStatus],\n          url: `https://clinicaltrials.gov/ct2/show/${processedTrial.nctId}`,\n          document_type: 'clinical_trial',\n          language: 'en'\n        };\n        \n        const existing = await this.checkForDuplicate(regulatoryUpdate);\n        if (!existing) {\n          await storage.createRegulatoryUpdate(regulatoryUpdate);\n        }\n      }\n    } catch (error) {\n      console.error('[Real-Time API] Error processing Clinical Trials data:', error);\n    }\n  }\n\n  private async processWHOData(apiResponse: APIResponse): Promise<void> {\n    try {\n      // WHO indicators are metadata, we'll store them as reference data\n      for (const indicator of apiResponse.data.slice(0, 50)) { // Limit to 50 most relevant\n        const processedIndicator = {\n          id: `who-${indicator.IndicatorCode || Date.now()}`,\n          title: `WHO Health Indicator: ${indicator.IndicatorName || 'Health Indicator'}`,\n          content: `Global health indicator from WHO Global Health Observatory. ${indicator.Definition || 'Health-related regulatory indicator for global monitoring.'}`,\n          authority: 'WHO',\n          region: 'Global',\n          category: 'global_health',\n          type: 'health_indicator',\n          published_at: new Date().toISOString(),\n          priority: 'medium' as const,\n          tags: ['who', 'global_health', 'indicator', 'surveillance'],\n          url: `https://www.who.int/data/gho/data/indicators/indicator-details/GHO/${indicator.IndicatorCode}`,\n          document_type: 'health_indicator',\n          language: 'en'\n        };\n        \n        const existing = await this.checkForDuplicate(processedIndicator);\n        if (!existing) {\n          await storage.createRegulatoryUpdate(processedIndicator);\n        }\n      }\n    } catch (error) {\n      console.error('[Real-Time API] Error processing WHO data:', error);\n    }\n  }\n\n  private transformFDARecord(record: any, endpoint: APIEndpoint): any {\n    const baseTransform = {\n      id: `fda-${endpoint.name.toLowerCase().replace(/\\s+/g, '-')}-${record.k_number || record.pma_number || record.recall_number || Date.now()}`,\n      authority: 'FDA',\n      region: 'United States',\n      published_at: record.date_received || record.report_date || new Date().toISOString(),\n      language: 'en',\n      url: this.generateFDAUrl(record, endpoint),\n      document_type: this.getFDADocumentType(endpoint)\n    };\n\n    if (endpoint.name.includes('510k')) {\n      return {\n        ...baseTransform,\n        title: `FDA 510(k): ${record.device_name || 'Medical Device Clearance'}`,\n        content: this.generateFDA510kContent(record),\n        category: 'medical_device_clearance',\n        type: '510k_clearance',\n        priority: this.determineFDAPriority(record),\n        tags: ['fda', '510k', 'clearance', 'medical_device']\n      };\n    }\n\n    if (endpoint.name.includes('Recall')) {\n      return {\n        ...baseTransform,\n        title: `FDA Device Recall: ${record.product_description || 'Medical Device Recall'}`,\n        content: this.generateFDARecallContent(record),\n        category: 'safety_alert',\n        type: 'device_recall',\n        priority: this.determineFDARecallPriority(record),\n        tags: ['fda', 'recall', 'safety', 'medical_device']\n      };\n    }\n\n    if (endpoint.name.includes('PMA')) {\n      return {\n        ...baseTransform,\n        title: `FDA PMA: ${record.device_name || 'Medical Device Approval'}`,\n        content: this.generateFDAPMAContent(record),\n        category: 'medical_device_approval',\n        type: 'pma_approval',\n        priority: this.determineFDAPriority(record),\n        tags: ['fda', 'pma', 'approval', 'medical_device']\n      };\n    }\n\n    return baseTransform;\n  }\n\n  private transformClinicalTrialRecord(trial: any): ClinicalTrial {\n    return {\n      nctId: trial.NCTId?.[0] || '',\n      briefTitle: trial.BriefTitle?.[0] || '',\n      studyType: trial.StudyType?.[0] || '',\n      phase: trial.Phase?.[0] || '',\n      overallStatus: trial.OverallStatus?.[0] || '',\n      startDate: trial.StartDate?.[0] || '',\n      completionDate: trial.CompletionDate?.[0] || '',\n      conditions: trial.Condition || [],\n      interventions: trial.InterventionName || []\n    };\n  }\n\n  private generateFDA510kContent(record: any): string {\n    return `FDA 510(k) Clearance for ${record.device_name || 'medical device'}.\n    \nApplicant: ${record.applicant || 'Not specified'}\nDevice Class: ${record.medical_specialty_description || 'Not specified'}\nProduct Code: ${record.product_code || 'Not specified'}\nDecision Date: ${record.decision_date || 'Not specified'}\nRegulation Number: ${record.regulation_number || 'Not specified'}\n\n${record.statement || 'No additional statement provided.'}`;\n  }\n\n  private generateFDARecallContent(record: any): string {\n    return `FDA Medical Device Recall: ${record.product_description || 'Medical device recall'}.\n    \nRecalling Firm: ${record.recalling_firm || 'Not specified'}\nRecall Class: ${record.classification || 'Not specified'}\nRecall Status: ${record.status || 'Not specified'}\nRecall Initiation Date: ${record.recall_initiation_date || 'Not specified'}\nDistribution Pattern: ${record.distribution_pattern || 'Not specified'}\n\nReason for Recall: ${record.reason_for_recall || 'Not specified'}`;\n  }\n\n  private generateFDAPMAContent(record: any): string {\n    return `FDA PMA Approval for ${record.device_name || 'medical device'}.\n    \nApplicant: ${record.applicant || 'Not specified'}\nSupplement Number: ${record.supplement_number || 'Not specified'}\nAdvisory Committee: ${record.advisory_committee || 'Not specified'}\nDecision Date: ${record.decision_date || 'Not specified'}\nGeneric Name: ${record.generic_name || 'Not specified'}\n\n${record.statement || 'No additional statement provided.'}`;\n  }\n\n  private generateClinicalTrialContent(trial: ClinicalTrial): string {\n    return `Clinical Trial: ${trial.briefTitle}\n    \nNCT ID: ${trial.nctId}\nStudy Type: ${trial.studyType}\nPhase: ${trial.phase}\nStatus: ${trial.overallStatus}\nStart Date: ${trial.startDate}\nExpected Completion: ${trial.completionDate}\n\nConditions: ${trial.conditions.join(', ') || 'Not specified'}\nInterventions: ${trial.interventions.join(', ') || 'Not specified'}\n\nThis clinical trial involves medical devices and is relevant for regulatory intelligence monitoring.`;\n  }\n\n  private generateFDAUrl(record: any, endpoint: APIEndpoint): string {\n    if (endpoint.name.includes('510k')) {\n      return `https://www.accessdata.fda.gov/scripts/cdrh/cfdocs/cfpmn/pmn.cfm?ID=${record.k_number || ''}`;\n    }\n    if (endpoint.name.includes('PMA')) {\n      return `https://www.accessdata.fda.gov/scripts/cdrh/cfdocs/cfpma/pma.cfm?id=${record.pma_number || ''}`;\n    }\n    return 'https://www.fda.gov/medical-devices';\n  }\n\n  private getFDADocumentType(endpoint: APIEndpoint): string {\n    if (endpoint.name.includes('510k')) return '510k_clearance';\n    if (endpoint.name.includes('Recall')) return 'device_recall';\n    if (endpoint.name.includes('PMA')) return 'pma_approval';\n    return 'fda_document';\n  }\n\n  private determineFDAPriority(record: any): 'low' | 'medium' | 'high' | 'critical' {\n    const deviceName = (record.device_name || '').toLowerCase();\n    const productCode = (record.product_code || '').toLowerCase();\n    \n    // High-risk device indicators\n    if (deviceName.includes('cardiac') || deviceName.includes('heart') || \n        deviceName.includes('pacemaker') || deviceName.includes('defibrillator') ||\n        deviceName.includes('implant') || productCode.includes('class iii')) {\n      return 'high';\n    }\n    \n    // Medium-risk indicators\n    if (deviceName.includes('surgical') || deviceName.includes('diagnostic') ||\n        productCode.includes('class ii')) {\n      return 'medium';\n    }\n    \n    return 'low';\n  }\n\n  private determineFDARecallPriority(record: any): 'low' | 'medium' | 'high' | 'critical' {\n    const classification = (record.classification || '').toLowerCase();\n    \n    if (classification.includes('class i')) return 'critical';\n    if (classification.includes('class ii')) return 'high';\n    if (classification.includes('class iii')) return 'medium';\n    \n    return 'low';\n  }\n\n  private determineClinicalTrialPriority(trial: ClinicalTrial): 'low' | 'medium' | 'high' | 'critical' {\n    const phase = trial.phase.toLowerCase();\n    const status = trial.overallStatus.toLowerCase();\n    \n    if (phase.includes('phase 3') || phase.includes('phase iii')) return 'high';\n    if (status.includes('completed') && (phase.includes('phase 2') || phase.includes('phase ii'))) return 'medium';\n    \n    return 'low';\n  }\n\n  private async checkForDuplicate(update: any): Promise<boolean> {\n    try {\n      const allUpdates = await storage.getAllRegulatoryUpdates();\n      return allUpdates.some(existing => \n        existing.id === update.id || \n        (existing.title === update.title && existing.authority === update.authority)\n      );\n    } catch (error) {\n      console.error('[Real-Time API] Error checking for duplicates:', error);\n      return false;\n    }\n  }\n\n  async performComprehensiveSync(): Promise<{ success: boolean; summary: any }> {\n    try {\n      console.log('[Real-Time API] Starting comprehensive real-time data synchronization...');\n      \n      const syncResults = await Promise.allSettled([\n        this.syncFDAData(),\n        this.syncClinicalTrialsData(),\n        this.syncWHOData()\n      ]);\n      \n      const results = {\n        fda: syncResults[0].status === 'fulfilled' ? syncResults[0].value : { success: false, error: 'Failed to sync' },\n        clinicalTrials: syncResults[1].status === 'fulfilled' ? syncResults[1].value : { success: false, error: 'Failed to sync' },\n        who: syncResults[2].status === 'fulfilled' ? syncResults[2].value : { success: false, error: 'Failed to sync' }\n      };\n      \n      const successCount = Object.values(results).filter(r => r.success).length;\n      const totalSources = Object.keys(results).length;\n      \n      console.log(`[Real-Time API] Comprehensive sync completed: ${successCount}/${totalSources} sources successful`);\n      \n      return {\n        success: successCount > 0,\n        summary: {\n          totalSources,\n          successfulSources: successCount,\n          results,\n          timestamp: new Date().toISOString()\n        }\n      };\n    } catch (error: any) {\n      console.error('[Real-Time API] Comprehensive sync failed:', error);\n      return { success: false, summary: { error: error.message } };\n    }\n  }\n}"]}