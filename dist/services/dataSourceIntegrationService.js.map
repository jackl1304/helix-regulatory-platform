{"version":3,"file":"dataSourceIntegrationService.js","sourceRoot":"","sources":["../../server/services/dataSourceIntegrationService.ts"],"names":[],"mappings":"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","sourcesContent":["import { storage } from '../storage';\nimport { enhancedFdaOpenApiService } from './enhancedFdaOpenApiService';\nimport { mhraScrapingService } from './mhraScrapingService';\nimport { openFdaDataExtractor } from './openFdaDataExtractor';\nimport { enhancedLegalAnalysisService } from './enhancedLegalAnalysisService';\nimport { intelligentDataQualityService } from './intelligentDataQualityService';\nimport { dataCollectionService } from './dataCollectionService';\nimport { logger } from './logger.service';\n\ninterface IntegrationResult {\n  success: boolean;\n  servicesRun: string[];\n  errors: string[];\n  dataCollected: {\n    regulatoryUpdates: number;\n    legalCases: number;\n    qualityScore: number;\n  };\n  recommendations: string[];\n}\n\ninterface ScheduledCollection {\n  sourceId: string;\n  service: string;\n  frequency: 'hourly' | 'daily' | 'weekly';\n  lastRun: Date;\n  nextRun: Date;\n  enabled: boolean;\n}\n\nexport class DataSourceIntegrationService {\n  private scheduledCollections: ScheduledCollection[] = [\n    {\n      sourceId: 'fda_510k',\n      service: 'enhancedFdaOpenApiService',\n      frequency: 'daily',\n      lastRun: new Date(0),\n      nextRun: new Date(),\n      enabled: true\n    },\n    {\n      sourceId: 'fda_recalls',\n      service: 'openFdaDataExtractor',\n      frequency: 'daily',\n      lastRun: new Date(0),\n      nextRun: new Date(),\n      enabled: true\n    },\n    {\n      sourceId: 'mhra_guidance',\n      service: 'mhraScrapingService',\n      frequency: 'daily',\n      lastRun: new Date(0),\n      nextRun: new Date(),\n      enabled: true\n    }\n  ];\n\n  async runComprehensiveDataCollection(): Promise<IntegrationResult> {\n    logger.info('[Data Integration] Starting comprehensive data collection...');\n\n    const result: IntegrationResult = {\n      success: false,\n      servicesRun: [],\n      errors: [],\n      dataCollected: {\n        regulatoryUpdates: 0,\n        legalCases: 0,\n        qualityScore: 0\n      },\n      recommendations: []\n    };\n\n    try {\n      // 1. Enhanced FDA Data Collection\n      try {\n        logger.info('[Data Integration] Running Enhanced FDA OpenAPI Service...');\n        await enhancedFdaOpenApiService.collect510kDevices(100);\n        await enhancedFdaOpenApiService.collectRecalls(50);\n        result.servicesRun.push('Enhanced FDA OpenAPI Service');\n        logger.info('[Data Integration] ✓ Enhanced FDA collection completed');\n      } catch (error) {\n        const errorMsg = `Enhanced FDA Service error: ${error}`;\n        result.errors.push(errorMsg);\n        logger.error('[Data Integration]', errorMsg);\n      }\n\n      // 2. OpenFDA Data Extractor\n      try {\n        logger.info('[Data Integration] Running OpenFDA Data Extractor...');\n        const extractorResults = await openFdaDataExtractor.runCompleteExtraction();\n        result.servicesRun.push('OpenFDA Data Extractor');\n        result.dataCollected.regulatoryUpdates += extractorResults.totalProcessed;\n        logger.info(`[Data Integration] ✓ OpenFDA extraction completed: ${extractorResults.totalProcessed} items`);\n      } catch (error) {\n        const errorMsg = `OpenFDA Extractor error: ${error}`;\n        result.errors.push(errorMsg);\n        logger.error('[Data Integration]', errorMsg);\n      }\n\n      // 3. MHRA Scraping Service\n      try {\n        logger.info('[Data Integration] Running MHRA Scraping Service...');\n        await mhraScrapingService.collectMHRADeviceRegistrations();\n        await mhraScrapingService.collectMHRASafetyAlerts();\n        result.servicesRun.push('MHRA Scraping Service');\n        logger.info('[Data Integration] ✓ MHRA collection completed');\n      } catch (error) {\n        const errorMsg = `MHRA Service error: ${error}`;\n        result.errors.push(errorMsg);\n        logger.error('[Data Integration]', errorMsg);\n      }\n\n      // 4. Enhanced Legal Analysis\n      try {\n        logger.info('[Data Integration] Running Enhanced Legal Analysis...');\n        const legalCases = await storage.getAllLegalCases();\n        const legalAnalysis = await enhancedLegalAnalysisService.analyzeLegalCases(legalCases);\n        const trendAnalysis = await enhancedLegalAnalysisService.analyzeLegalTrends(legalCases);\n        \n        result.servicesRun.push('Enhanced Legal Analysis Service');\n        result.dataCollected.legalCases = legalCases.length;\n        \n        // Add trend-based recommendations\n        result.recommendations.push(...trendAnalysis.preventiveRecommendations);\n        \n        logger.info(`[Data Integration] ✓ Legal analysis completed: ${legalCases.length} cases analyzed`);\n      } catch (error) {\n        const errorMsg = `Legal Analysis error: ${error}`;\n        result.errors.push(errorMsg);\n        logger.error('[Data Integration]', errorMsg);\n      }\n\n      // 5. Data Quality Assessment\n      try {\n        logger.info('[Data Integration] Running Intelligent Data Quality Assessment...');\n        const qualityReport = await intelligentDataQualityService.assessDataQuality();\n        \n        result.servicesRun.push('Intelligent Data Quality Service');\n        result.dataCollected.qualityScore = Math.round(qualityReport.overallScore * 100);\n        result.recommendations.push(...qualityReport.recommendations);\n        \n        // Run automatic cleanup if quality score is below threshold\n        if (qualityReport.overallScore < 0.8) {\n          logger.info('[Data Integration] Quality score below 80%, running automatic cleanup...');\n          const cleanupResults = await intelligentDataQualityService.performAutomaticCleanup();\n          result.recommendations.push(`Automated cleanup completed: ${cleanupResults.fixedIssues} issues fixed`);\n        }\n        \n        logger.info(`[Data Integration] ✓ Data quality assessment completed: ${result.dataCollected.qualityScore}% score`);\n      } catch (error) {\n        const errorMsg = `Data Quality Service error: ${error}`;\n        result.errors.push(errorMsg);\n        logger.error('[Data Integration]', errorMsg);\n      }\n\n      // 6. Global Data Collection (fallback for other sources)\n      try {\n        logger.info('[Data Integration] Running Global Data Collection Service...');\n        await dataCollectionService.collectAllGlobalData();\n        result.servicesRun.push('Global Data Collection Service');\n        logger.info('[Data Integration] ✓ Global data collection completed');\n      } catch (error) {\n        const errorMsg = `Global Data Collection error: ${error}`;\n        result.errors.push(errorMsg);\n        logger.error('[Data Integration]', errorMsg);\n      }\n\n      // Final assessment\n      result.success = result.errors.length < result.servicesRun.length / 2; // Success if majority of services succeeded\n      \n      // Update collection schedules\n      await this.updateCollectionSchedules();\n\n      // Generate final recommendations\n      if (result.dataCollected.qualityScore < 70) {\n        result.recommendations.unshift('Critical: Data quality below 70% - immediate attention required');\n      } else if (result.dataCollected.qualityScore < 85) {\n        result.recommendations.unshift('Warning: Data quality below 85% - optimization recommended');\n      }\n\n      if (result.errors.length > 0) {\n        result.recommendations.push(`${result.errors.length} service errors detected - review error logs`);\n      }\n\n      logger.info(`[Data Integration] Comprehensive collection completed: ${result.servicesRun.length} services run, ${result.errors.length} errors`);\n      \n    } catch (error) {\n      logger.error('[Data Integration] Critical error in comprehensive collection:', error);\n      result.errors.push(`Critical integration error: ${error}`);\n      result.success = false;\n    }\n\n    return result;\n  }\n\n  async runScheduledCollections(): Promise<void> {\n    logger.info('[Data Integration] Checking scheduled collections...');\n\n    const now = new Date();\n    const collectionsToRun = this.scheduledCollections.filter(sc => \n      sc.enabled && sc.nextRun <= now\n    );\n\n    if (collectionsToRun.length === 0) {\n      logger.info('[Data Integration] No scheduled collections due');\n      return;\n    }\n\n    logger.info(`[Data Integration] Running ${collectionsToRun.length} scheduled collections...`);\n\n    for (const collection of collectionsToRun) {\n      try {\n        logger.info(`[Data Integration] Running scheduled collection: ${collection.service} for ${collection.sourceId}`);\n        \n        switch (collection.service) {\n          case 'enhancedFdaOpenApiService':\n            await enhancedFdaOpenApiService.collect510kDevices(50);\n            break;\n          case 'openFdaDataExtractor':\n            await openFdaDataExtractor.extractDeviceRecalls(50);\n            break;\n          case 'mhraScrapingService':\n            await mhraScrapingService.collectMHRADeviceRegistrations();\n            break;\n          default:\n            logger.warn(`[Data Integration] Unknown service: ${collection.service}`);\n        }\n\n        // Update last run and calculate next run\n        collection.lastRun = now;\n        collection.nextRun = this.calculateNextRun(now, collection.frequency);\n        \n        logger.info(`[Data Integration] ✓ Scheduled collection completed: ${collection.service}`);\n        \n      } catch (error) {\n        logger.error(`[Data Integration] Scheduled collection failed: ${collection.service}`, error);\n      }\n    }\n  }\n\n  async getDataSourceStatus(): Promise<{\n    totalSources: number;\n    activeSources: number;\n    lastSync: Record<string, Date>;\n    collectionHealth: Record<string, 'healthy' | 'warning' | 'error'>;\n  }> {\n    try {\n      const sources = await storage.getAllDataSources();\n      const activeSources = sources.filter(s => s.is_active);\n      \n      const lastSync: Record<string, Date> = {};\n      const collectionHealth: Record<string, 'healthy' | 'warning' | 'error'> = {};\n      \n      for (const source of sources) {\n        if (source.last_sync_at) {\n          lastSync[source.id] = new Date(source.last_sync_at);\n          \n          // Determine health based on last sync\n          const hoursSinceSync = (Date.now() - new Date(source.last_sync_at).getTime()) / (1000 * 60 * 60);\n          \n          if (hoursSinceSync < 24) {\n            collectionHealth[source.id] = 'healthy';\n          } else if (hoursSinceSync < 72) {\n            collectionHealth[source.id] = 'warning';\n          } else {\n            collectionHealth[source.id] = 'error';\n          }\n        } else {\n          collectionHealth[source.id] = 'error';\n        }\n      }\n\n      return {\n        totalSources: sources.length,\n        activeSources: activeSources.length,\n        lastSync,\n        collectionHealth\n      };\n      \n    } catch (error) {\n      logger.error('[Data Integration] Error getting data source status:', error);\n      throw error;\n    }\n  }\n\n  private calculateNextRun(from: Date, frequency: 'hourly' | 'daily' | 'weekly'): Date {\n    const next = new Date(from);\n    \n    switch (frequency) {\n      case 'hourly':\n        next.setHours(next.getHours() + 1);\n        break;\n      case 'daily':\n        next.setDate(next.getDate() + 1);\n        break;\n      case 'weekly':\n        next.setDate(next.getDate() + 7);\n        break;\n    }\n    \n    return next;\n  }\n\n  private async updateCollectionSchedules(): Promise<void> {\n    try {\n      // Update data source last sync times\n      for (const collection of this.scheduledCollections) {\n        if (collection.lastRun > new Date(0)) {\n          await storage.updateDataSourceLastSync(collection.sourceId, collection.lastRun);\n        }\n      }\n      \n      logger.info('[Data Integration] Collection schedules updated');\n    } catch (error) {\n      logger.error('[Data Integration] Error updating collection schedules:', error);\n    }\n  }\n\n  async getIntegrationMetrics(): Promise<{\n    totalDataPoints: number;\n    qualityScore: number;\n    sourceCoverage: number;\n    lastUpdate: Date;\n    trends: {\n      weekly: number;\n      monthly: number;\n      growth: number;\n    };\n  }> {\n    try {\n      const [regulatoryUpdates, legalCases, sources] = await Promise.all([\n        storage.getAllRegulatoryUpdates(),\n        storage.getAllLegalCases(),\n        storage.getAllDataSources()\n      ]);\n\n      const totalDataPoints = regulatoryUpdates.length + legalCases.length;\n      const activeSources = sources.filter(s => s.is_active).length;\n      const sourceCoverage = (activeSources / sources.length) * 100;\n\n      // Calculate recent trends\n      const now = new Date();\n      const weekAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\n      const monthAgo = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);\n\n      const weeklyUpdates = regulatoryUpdates.filter(u => \n        u.publishedAt && new Date(u.publishedAt) >= weekAgo\n      ).length;\n\n      const monthlyUpdates = regulatoryUpdates.filter(u => \n        u.publishedAt && new Date(u.publishedAt) >= monthAgo\n      ).length;\n\n      // Simple growth calculation\n      const growth = weeklyUpdates > 0 ? (weeklyUpdates / Math.max(monthlyUpdates - weeklyUpdates, 1)) * 100 : 0;\n\n      // Get quality score from last assessment\n      const qualityReport = await intelligentDataQualityService.assessDataQuality();\n\n      return {\n        totalDataPoints,\n        qualityScore: Math.round(qualityReport.overallScore * 100),\n        sourceCoverage: Math.round(sourceCoverage),\n        lastUpdate: new Date(),\n        trends: {\n          weekly: weeklyUpdates,\n          monthly: monthlyUpdates,\n          growth: Math.round(growth)\n        }\n      };\n\n    } catch (error) {\n      logger.error('[Data Integration] Error getting integration metrics:', error);\n      throw error;\n    }\n  }\n}\n\nexport const dataSourceIntegrationService = new DataSourceIntegrationService();"]}