{"version":3,"file":"rssMonitoringService.js","sourceRoot":"","sources":["../../server/services/rssMonitoringService.ts"],"names":[],"mappings":"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","sourcesContent":["import { storage } from '../storage';\n\ninterface RSSFeed {\n  id: string;\n  name: string;\n  url: string;\n  authority: string;\n  region: string;\n  active: boolean;\n  lastCheck: Date;\n  checkFrequency: number; // minutes\n}\n\ninterface RSSItem {\n  title: string;\n  link: string;\n  description: string;\n  pubDate: string;\n  guid: string;\n  categories?: string[];\n  author?: string;\n}\n\ninterface ParsedRSSData {\n  feedUrl: string;\n  title: string;\n  description: string;\n  items: RSSItem[];\n  lastBuildDate?: string;\n}\n\nexport class RSSMonitoringService {\n  private feeds: RSSFeed[] = [\n    {\n      id: 'fda-main',\n      name: 'FDA News & Updates',\n      url: 'https://www.fda.gov/about-fda/contact-fda/stay-informed/rss-feeds-fda',\n      authority: 'FDA',\n      region: 'United States',\n      active: true,\n      lastCheck: new Date(0),\n      checkFrequency: 60 // Check every hour\n    },\n    {\n      id: 'fda-medical-devices',\n      name: 'FDA Medical Device Safety',\n      url: 'https://www.fda.gov/medical-devices/rss.xml',\n      authority: 'FDA',\n      region: 'United States',\n      active: true,\n      lastCheck: new Date(0),\n      checkFrequency: 60\n    },\n    {\n      id: 'ema-main',\n      name: 'EMA News & Updates',\n      url: 'https://www.ema.europa.eu/en/rss.xml',\n      authority: 'EMA',\n      region: 'European Union',\n      active: true,\n      lastCheck: new Date(0),\n      checkFrequency: 120 // Check every 2 hours\n    },\n    {\n      id: 'bfarm-main',\n      name: 'BfArM Updates',\n      url: 'https://www.bfarm.de/DE/Service/RSS/_node.html',\n      authority: 'BfArM',\n      region: 'Germany',\n      active: true,\n      lastCheck: new Date(0),\n      checkFrequency: 180 // Check every 3 hours\n    },\n    {\n      id: 'swissmedic-main',\n      name: 'Swissmedic Updates',\n      url: 'https://www.swissmedic.ch/swissmedic/de/home.rss.html',\n      authority: 'Swissmedic',\n      region: 'Switzerland',\n      active: true,\n      lastCheck: new Date(0),\n      checkFrequency: 180\n    },\n    {\n      id: 'mhra-main',\n      name: 'MHRA Updates',\n      url: 'https://www.gov.uk/government/organisations/medicines-and-healthcare-products-regulatory-agency.atom',\n      authority: 'MHRA',\n      region: 'United Kingdom',\n      active: true,\n      lastCheck: new Date(0),\n      checkFrequency: 120\n    }\n  ];\n\n  private rateLimitDelay = 2000; // 2 seconds between requests\n  private isMonitoring = false;\n\n  private async delay(ms: number): Promise<void> {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n\n  async parseFeedFromContent(content: string): Promise<ParsedRSSData | null> {\n    try {\n      // Simple RSS/Atom parser implementation\n      // In a real implementation, you'd use a proper XML parser like 'fast-xml-parser'\n      \n      const titleMatch = content.match(/<title[^>]*>([\\s\\S]*?)<\\/title>/);\n      const descriptionMatch = content.match(/<description[^>]*>([\\s\\S]*?)<\\/description>/);\n      const lastBuildDateMatch = content.match(/<lastBuildDate[^>]*>([\\s\\S]*?)<\\/lastBuildDate>/);\n      \n      // Extract items (ohne 's' flag für ältere TypeScript Versionen)\n      const itemMatches = content.match(/<item[^>]*>[\\s\\S]*?<\\/item>/g) || \n                         content.match(/<entry[^>]*>[\\s\\S]*?<\\/entry>/g) || [];\n      \n      const items: RSSItem[] = [];\n      \n      for (const itemContent of itemMatches) {\n        const item = this.parseRSSItem(itemContent);\n        if (item) items.push(item);\n      }\n      \n      return {\n        feedUrl: '',\n        title: this.cleanText(titleMatch?.[1] || 'Unknown Feed'),\n        description: this.cleanText(descriptionMatch?.[1] || ''),\n        items,\n        lastBuildDate: lastBuildDateMatch?.[1]\n      };\n    } catch (error) {\n      console.error('[RSS] Error parsing feed content:', error);\n      return null;\n    }\n  }\n\n  private parseRSSItem(itemContent: string): RSSItem | null {\n    try {\n      const titleMatch = itemContent.match(/<title[^>]*>([\\s\\S]*?)<\\/title>/);\n      const linkMatch = itemContent.match(/<link[^>]*>([\\s\\S]*?)<\\/link>/) ||\n                       itemContent.match(/<link[^>]*href=[\"'](.*?)[\"'][^>]*>/);\n      const descriptionMatch = itemContent.match(/<description[^>]*>([\\s\\S]*?)<\\/description>/) ||\n                              itemContent.match(/<summary[^>]*>([\\s\\S]*?)<\\/summary>/) ||\n                              itemContent.match(/<content[^>]*>([\\s\\S]*?)<\\/content>/);\n      const pubDateMatch = itemContent.match(/<pubDate[^>]*>([\\s\\S]*?)<\\/pubDate>/) ||\n                          itemContent.match(/<published[^>]*>([\\s\\S]*?)<\\/published>/) ||\n                          itemContent.match(/<updated[^>]*>([\\s\\S]*?)<\\/updated>/);\n      const guidMatch = itemContent.match(/<guid[^>]*>([\\s\\S]*?)<\\/guid>/) ||\n                       itemContent.match(/<id[^>]*>([\\s\\S]*?)<\\/id>/);\n      const authorMatch = itemContent.match(/<author[^>]*>([\\s\\S]*?)<\\/author>/) ||\n                         itemContent.match(/<dc:creator[^>]*>([\\s\\S]*?)<\\/dc:creator>/);\n      \n      // Extract categories\n      const categoryMatches = itemContent.match(/<category[^>]*>(.*?)<\\/category>/g) || [];\n      const categories = categoryMatches.map(cat => {\n        const match = cat.match(/<category[^>]*>(.*?)<\\/category>/);\n        return match ? this.cleanText(match[1]) : '';\n      }).filter(Boolean);\n      \n      if (!titleMatch) return null;\n      \n      return {\n        title: this.cleanText(titleMatch[1]),\n        link: this.cleanText(linkMatch?.[1] || ''),\n        description: this.cleanText(descriptionMatch?.[1] || ''),\n        pubDate: pubDateMatch?.[1] || new Date().toISOString(),\n        guid: guidMatch?.[1] || `rss-${Date.now()}-${crypto.randomUUID().substr(0, 9)}`,\n        categories,\n        author: authorMatch ? this.cleanText(authorMatch[1]) : undefined\n      };\n    } catch (error) {\n      console.error('[RSS] Error parsing RSS item:', error);\n      return null;\n    }\n  }\n\n  private cleanText(text: string): string {\n    return text\n      .replace(/<!\\[CDATA\\[(.*?)\\]\\]>/g, '$1')\n      .replace(/<[^>]+>/g, '')\n      .replace(/&amp;/g, '&')\n      .replace(/&lt;/g, '<')\n      .replace(/&gt;/g, '>')\n      .replace(/&quot;/g, '\"')\n      .replace(/&#39;/g, \"'\")\n      .replace(/&nbsp;/g, ' ')\n      .trim();\n  }\n\n  async fetchFeed(feedUrl: string): Promise<ParsedRSSData | null> {\n    try {\n      console.log(`[RSS] Fetching feed: ${feedUrl}`);\n      \n      const response = await fetch(feedUrl, {\n        headers: {\n          'User-Agent': 'Helix-RSS-Monitor/1.0',\n          'Accept': 'application/rss+xml, application/xml, text/xml, application/atom+xml'\n        }\n      });\n      \n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n      \n      const content = await response.text();\n      await this.delay(this.rateLimitDelay);\n      \n      const parsed = await this.parseFeedFromContent(content);\n      if (parsed) {\n        parsed.feedUrl = feedUrl;\n      }\n      \n      return parsed;\n    } catch (error) {\n      console.error(`[RSS] Error fetching feed ${feedUrl}:`, error);\n      return null;\n    }\n  }\n\n  async processFeedUpdate(feed: RSSFeed, feedData: ParsedRSSData): Promise<void> {\n    try {\n      console.log(`[RSS] Processing ${feedData.items.length} items from ${feed.name}`);\n      \n      for (const item of feedData.items) {\n        await this.processRSSItem(feed, item);\n      }\n      \n      // Update last check time\n      feed.lastCheck = new Date();\n      console.log(`[RSS] Completed processing feed: ${feed.name}`);\n    } catch (error) {\n      console.error(`[RSS] Error processing feed update for ${feed.name}:`, error);\n    }\n  }\n\n  private async processRSSItem(feed: RSSFeed, item: RSSItem): Promise<void> {\n    try {\n      // Check if we already have this item (by GUID or URL)\n      const existingId = `rss-${feed.id}-${this.generateItemId(item)}`;\n      \n      const regulatoryUpdate = {\n        id: existingId,\n        title: `${feed.authority}: ${item.title}`,\n        content: this.formatRSSContent(item, feed),\n        source: `${feed.name} (RSS)`,\n        type: 'RSS Update',\n        region: feed.region,\n        authority: feed.authority,\n        priority: this.determineRSSPriority(item, feed),\n        published_at: this.parseRSSDate(item.pubDate),\n        status: 'published',\n        metadata: {\n          feedId: feed.id,\n          feedName: feed.name,\n          originalLink: item.link,\n          guid: item.guid,\n          categories: item.categories || [],\n          author: item.author,\n          rssFeedUrl: feed.url\n        }\n      };\n      \n      await storage.createRegulatoryUpdate(regulatoryUpdate);\n      console.log(`[RSS] Successfully created update from RSS: ${item.title}`);\n    } catch (error) {\n      // Likely a duplicate, which is expected\n      if (!error.message?.includes('duplicate')) {\n        console.error('[RSS] Error processing RSS item:', error);\n      }\n    }\n  }\n\n  private generateItemId(item: RSSItem): string {\n    // Generate a consistent ID based on GUID or link or title\n    const baseString = item.guid || item.link || item.title;\n    return baseString.replace(/[^a-zA-Z0-9]/g, '').toLowerCase().substr(0, 20);\n  }\n\n  private formatRSSContent(item: RSSItem, feed: RSSFeed): string {\n    const parts = [];\n    \n    parts.push(`**Source:** ${feed.name}`);\n    if (item.author) parts.push(`**Author:** ${item.author}`);\n    if (item.categories && item.categories.length > 0) {\n      parts.push(`**Categories:** ${item.categories.join(', ')}`);\n    }\n    if (item.link) parts.push(`**Original Link:** ${item.link}`);\n    \n    if (item.description) {\n      parts.push(`**Description:**\\n${item.description}`);\n    }\n    \n    return parts.join('\\n\\n');\n  }\n\n  private determineRSSPriority(item: RSSItem, feed: RSSFeed): 'low' | 'medium' | 'high' | 'critical' {\n    const title = item.title.toLowerCase();\n    const description = item.description.toLowerCase();\n    const content = `${title} ${description}`;\n    \n    // Critical keywords\n    if (content.includes('recall') || content.includes('safety alert') || \n        content.includes('urgent') || content.includes('immediate action')) {\n      return 'critical';\n    }\n    \n    // High priority keywords\n    if (content.includes('warning') || content.includes('guidance') ||\n        content.includes('approval') || content.includes('clearance')) {\n      return 'high';\n    }\n    \n    // Medium priority for regulatory announcements\n    if (content.includes('announcement') || content.includes('update') ||\n        content.includes('new') || content.includes('change')) {\n      return 'medium';\n    }\n    \n    return 'low';\n  }\n\n  private parseRSSDate(dateString: string): Date {\n    try {\n      // Handle various RSS date formats\n      let parsed = new Date(dateString);\n      \n      if (isNaN(parsed.getTime())) {\n        // Try parsing common RSS date formats\n        const formats = [\n          /\\w{3}, \\d{2} \\w{3} \\d{4} \\d{2}:\\d{2}:\\d{2}/, // RFC 822\n          /\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}/, // ISO 8601\n        ];\n        \n        for (const format of formats) {\n          if (format.test(dateString)) {\n            parsed = new Date(dateString);\n            if (!isNaN(parsed.getTime())) break;\n          }\n        }\n      }\n      \n      return isNaN(parsed.getTime()) ? new Date() : parsed;\n    } catch (error) {\n      console.warn(`[RSS] Could not parse date: ${dateString}`);\n      return new Date();\n    }\n  }\n\n  async checkFeed(feed: RSSFeed): Promise<void> {\n    try {\n      const now = new Date();\n      const timeSinceLastCheck = now.getTime() - feed.lastCheck.getTime();\n      const checkInterval = feed.checkFrequency * 60 * 1000; // Convert to milliseconds\n      \n      if (timeSinceLastCheck < checkInterval) {\n        console.log(`[RSS] Skipping ${feed.name} - checked ${Math.round(timeSinceLastCheck / 60000)} minutes ago`);\n        return;\n      }\n      \n      console.log(`[RSS] Checking feed: ${feed.name}`);\n      const feedData = await this.fetchFeed(feed.url);\n      \n      if (feedData) {\n        await this.processFeedUpdate(feed, feedData);\n      } else {\n        console.warn(`[RSS] Failed to fetch feed: ${feed.name}`);\n      }\n    } catch (error: any) {\n      console.error(`[RSS] Error checking feed ${feed.name}:`, error);\n    }\n  }\n\n  async monitorAllFeeds(): Promise<void> {\n    if (this.isMonitoring) {\n      console.log('[RSS] Monitoring already in progress');\n      return;\n    }\n    \n    try {\n      this.isMonitoring = true;\n      console.log('[RSS] Starting RSS monitoring cycle');\n      \n      const activeFeeds = this.feeds.filter(feed => feed.active);\n      console.log(`[RSS] Monitoring ${activeFeeds.length} active feeds`);\n      \n      for (const feed of activeFeeds) {\n        await this.checkFeed(feed);\n        await this.delay(1000); // Small delay between feeds\n      }\n      \n      console.log('[RSS] RSS monitoring cycle completed');\n    } catch (error) {\n      console.error('[RSS] Error in RSS monitoring:', error);\n    } finally {\n      this.isMonitoring = false;\n    }\n  }\n\n  async startContinuousMonitoring(): Promise<void> {\n    console.log('[RSS] Starting continuous RSS monitoring');\n    \n    // Monitor immediately\n    await this.monitorAllFeeds();\n    \n    // Set up interval for ongoing monitoring (every 30 minutes)\n    setInterval(async () => {\n      await this.monitorAllFeeds();\n    }, 30 * 60 * 1000);\n  }\n\n  getFeeds(): RSSFeed[] {\n    return [...this.feeds];\n  }\n\n  getFeedStatus(): any {\n    return this.feeds.map(feed => ({\n      id: feed.id,\n      name: feed.name,\n      authority: feed.authority,\n      region: feed.region,\n      active: feed.active,\n      lastCheck: feed.lastCheck,\n      checkFrequency: feed.checkFrequency,\n      status: this.isMonitoring ? 'monitoring' : 'idle'\n    }));\n  }\n}"]}