{"version":3,"file":"openFdaDataExtractor.js","sourceRoot":"","sources":["../../server/services/openFdaDataExtractor.ts"],"names":[],"mappings":"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","sourcesContent":["import { storage } from '../storage';\nimport { nlpService } from './nlpService';\nimport type { InsertRegulatoryUpdate } from '@shared/schema';\n\ninterface OpenFDARecall {\n  cfres_id?: string;\n  product_res_number?: string;\n  event_date_initiated?: string;\n  event_date_posted?: string;\n  recall_status?: string;\n  event_date_terminated?: string;\n  res_event_number?: string;\n  product_code?: string;\n  k_numbers?: string[];\n  product_description?: string;\n  code_info?: string;\n  recalling_firm?: string;\n  address_1?: string;\n  city?: string;\n  state?: string;\n  postal_code?: string;\n  additional_info_contact?: string;\n  reason_for_recall?: string;\n  root_cause_description?: string;\n  action?: string;\n  product_quantity?: string;\n  distribution_pattern?: string;\n  openfda?: {\n    device_name?: string;\n    medical_specialty_description?: string;\n    regulation_number?: string;\n    device_class?: string;\n    fei_number?: string[];\n    registration_number?: string[];\n    k_number?: string[];\n  };\n}\n\ninterface OpenFDAResponse {\n  meta: {\n    disclaimer: string;\n    terms: string;\n    license: string;\n    last_updated: string;\n    results: {\n      skip: number;\n      limit: number;\n      total: number;\n    };\n  };\n  results: OpenFDARecall[];\n}\n\nexport class OpenFDADataExtractor {\n  private baseUrl = 'https://api.fda.gov';\n  private rateLimitDelay = 1000; // 1 second between requests\n\n  async extractDeviceRecalls(limit: number = 100): Promise<void> {\n    console.log(`[OpenFDA Extractor] Starting device recalls extraction (limit: ${limit})`);\n    \n    try {\n      const endpoint = `${this.baseUrl}/device/recall.json?limit=${limit}`;\n      const response = await fetch(endpoint);\n      \n      if (!response.ok) {\n        throw new Error(`OpenFDA API error: ${response.status} ${response.statusText}`);\n      }\n      \n      const data: OpenFDAResponse = await response.json();\n      \n      if (!data.results || !Array.isArray(data.results)) {\n        throw new Error('Invalid OpenFDA response format');\n      }\n      \n      console.log(`[OpenFDA Extractor] Found ${data.results.length} recalls (total available: ${data.meta.results.total})`);\n      \n      let processedCount = 0;\n      for (const recall of data.results) {\n        try {\n          await this.processRecall(recall);\n          processedCount++;\n          \n          // Rate limiting\n          await this.delay(this.rateLimitDelay);\n        } catch (error) {\n          console.error(`[OpenFDA Extractor] Error processing recall ${recall.cfres_id}:`, error);\n        }\n      }\n      \n      console.log(`[OpenFDA Extractor] Successfully processed ${processedCount}/${data.results.length} recalls`);\n    } catch (error) {\n      console.error('[OpenFDA Extractor] Error extracting device recalls:', error);\n      throw error;\n    }\n  }\n\n  async extractDevice510k(limit: number = 100): Promise<void> {\n    console.log(`[OpenFDA Extractor] Starting 510(k) extraction (limit: ${limit})`);\n    \n    try {\n      const endpoint = `${this.baseUrl}/device/510k.json?limit=${limit}&sort=date_received:desc`;\n      const response = await fetch(endpoint);\n      \n      if (!response.ok) {\n        throw new Error(`OpenFDA API error: ${response.status} ${response.statusText}`);\n      }\n      \n      const data = await response.json();\n      \n      if (!data.results || !Array.isArray(data.results)) {\n        throw new Error('Invalid OpenFDA 510k response format');\n      }\n      \n      console.log(`[OpenFDA Extractor] Found ${data.results.length} 510(k) clearances`);\n      \n      let processedCount = 0;\n      for (const device of data.results) {\n        try {\n          await this.process510kDevice(device);\n          processedCount++;\n          \n          // Rate limiting\n          await this.delay(this.rateLimitDelay);\n        } catch (error) {\n          console.error(`[OpenFDA Extractor] Error processing 510k device ${device.k_number}:`, error);\n        }\n      }\n      \n      console.log(`[OpenFDA Extractor] Successfully processed ${processedCount}/${data.results.length} 510(k) clearances`);\n    } catch (error) {\n      console.error('[OpenFDA Extractor] Error extracting 510k devices:', error);\n      throw error;\n    }\n  }\n\n  async extractDevicePMA(limit: number = 50): Promise<void> {\n    console.log(`[OpenFDA Extractor] Starting PMA extraction (limit: ${limit})`);\n    \n    try {\n      const endpoint = `${this.baseUrl}/device/pma.json?limit=${limit}&sort=date_received:desc`;\n      const response = await fetch(endpoint);\n      \n      if (!response.ok) {\n        throw new Error(`OpenFDA API error: ${response.status} ${response.statusText}`);\n      }\n      \n      const data = await response.json();\n      \n      if (!data.results || !Array.isArray(data.results)) {\n        throw new Error('Invalid OpenFDA PMA response format');\n      }\n      \n      console.log(`[OpenFDA Extractor] Found ${data.results.length} PMA approvals`);\n      \n      let processedCount = 0;\n      for (const device of data.results) {\n        try {\n          await this.processPMADevice(device);\n          processedCount++;\n          \n          // Rate limiting\n          await this.delay(this.rateLimitDelay);\n        } catch (error) {\n          console.error(`[OpenFDA Extractor] Error processing PMA device ${device.pma_number}:`, error);\n        }\n      }\n      \n      console.log(`[OpenFDA Extractor] Successfully processed ${processedCount}/${data.results.length} PMA approvals`);\n    } catch (error) {\n      console.error('[OpenFDA Extractor] Error extracting PMA devices:', error);\n      throw error;\n    }\n  }\n\n  private async processRecall(recall: OpenFDARecall): Promise<void> {\n    try {\n      const content = this.formatRecallContent(recall);\n      const categories = await nlpService.categorizeContent(content);\n      const sourceId = await this.getFDASourceId('recalls');\n\n      const regulatoryUpdate: InsertRegulatoryUpdate = {\n        title: `FDA Device Recall: ${recall.product_description || 'Medical Device'} (${recall.cfres_id || 'Unknown'})`,\n        content,\n        sourceId,\n        sourceUrl: this.generateRecallUrl(recall),\n        region: 'US',\n        updateType: 'recall',\n        priority: this.determineRecallPriority(recall),\n        deviceClasses: this.extractDeviceClasses(recall),\n        categories: [...categories.categories, 'Device Recall', 'Safety Alert'],\n        rawData: recall,\n        publishedAt: this.parseDate(recall.event_date_initiated || recall.event_date_posted) || new Date(),\n      };\n      \n      await storage.createRegulatoryUpdate(regulatoryUpdate);\n      console.log(`[OpenFDA Extractor] Created recall update: ${recall.product_description || 'Unknown Product'}`);\n    } catch (error) {\n      console.error('[OpenFDA Extractor] Error processing recall:', error);\n      throw error;\n    }\n  }\n\n  private async process510kDevice(device: any): Promise<void> {\n    try {\n      const content = this.format510kContent(device);\n      const categories = await nlpService.categorizeContent(content);\n      const sourceId = await this.getFDASourceId('510k');\n\n      const regulatoryUpdate: InsertRegulatoryUpdate = {\n        title: `FDA 510(k) Clearance: ${device.device_name || 'Medical Device'} (${device.k_number || 'Unknown'})`,\n        content,\n        sourceId,\n        sourceUrl: this.generate510kUrl(device),\n        region: 'US',\n        updateType: 'approval',\n        priority: this.determine510kPriority(device),\n        deviceClasses: this.extract510kDeviceClasses(device),\n        categories: [...categories.categories, '510(k) Clearance', 'FDA Approval'],\n        rawData: device,\n        publishedAt: this.parseDate(device.date_received || device.decision_date) || new Date(),\n      };\n      \n      await storage.createRegulatoryUpdate(regulatoryUpdate);\n      console.log(`[OpenFDA Extractor] Created 510(k) update: ${device.device_name || 'Unknown Device'}`);\n    } catch (error) {\n      console.error('[OpenFDA Extractor] Error processing 510k device:', error);\n      throw error;\n    }\n  }\n\n  private async processPMADevice(device: any): Promise<void> {\n    try {\n      const content = this.formatPMAContent(device);\n      const categories = await nlpService.categorizeContent(content);\n      const sourceId = await this.getFDASourceId('pma');\n\n      const regulatoryUpdate: InsertRegulatoryUpdate = {\n        title: `FDA PMA Approval: ${device.device_name || 'Medical Device'} (${device.pma_number || 'Unknown'})`,\n        content,\n        sourceId,\n        sourceUrl: this.generatePMAUrl(device),\n        region: 'US',\n        updateType: 'approval',\n        priority: 'high', // PMA is always high priority (Class III devices)\n        deviceClasses: this.extractPMADeviceClasses(device),\n        categories: [...categories.categories, 'PMA Approval', 'FDA Approval', 'Class III Device'],\n        rawData: device,\n        publishedAt: this.parseDate(device.date_received || device.decision_date) || new Date(),\n      };\n      \n      await storage.createRegulatoryUpdate(regulatoryUpdate);\n      console.log(`[OpenFDA Extractor] Created PMA update: ${device.device_name || 'Unknown Device'}`);\n    } catch (error) {\n      console.error('[OpenFDA Extractor] Error processing PMA device:', error);\n      throw error;\n    }\n  }\n\n  private formatRecallContent(recall: OpenFDARecall): string {\n    const sections = [];\n    \n    sections.push(`=== FDA Device Recall Information ===`);\n    \n    if (recall.product_description) {\n      sections.push(`Product: ${recall.product_description}`);\n    }\n    \n    if (recall.reason_for_recall) {\n      sections.push(`\\nReason for Recall:\\n${recall.reason_for_recall}`);\n    }\n    \n    if (recall.recalling_firm) {\n      sections.push(`\\nRecalling Firm: ${recall.recalling_firm}`);\n    }\n    \n    if (recall.distribution_pattern) {\n      sections.push(`\\nDistribution Pattern: ${recall.distribution_pattern}`);\n    }\n    \n    if (recall.product_quantity) {\n      sections.push(`\\nProduct Quantity: ${recall.product_quantity}`);\n    }\n    \n    if (recall.recall_status) {\n      sections.push(`\\nRecall Status: ${recall.recall_status}`);\n    }\n    \n    if (recall.action) {\n      sections.push(`\\nAction Taken:\\n${recall.action}`);\n    }\n    \n    if (recall.code_info) {\n      sections.push(`\\nProduct Codes: ${recall.code_info}`);\n    }\n    \n    if (recall.k_numbers && recall.k_numbers.length > 0) {\n      sections.push(`\\nRelated 510(k) Numbers: ${recall.k_numbers.join(', ')}`);\n    }\n    \n    if (recall.openfda) {\n      sections.push(`\\n=== Additional Device Information ===`);\n      if (recall.openfda.device_class) {\n        sections.push(`Device Class: ${recall.openfda.device_class}`);\n      }\n      if (recall.openfda.medical_specialty_description) {\n        sections.push(`Medical Specialty: ${recall.openfda.medical_specialty_description}`);\n      }\n      if (recall.openfda.regulation_number) {\n        sections.push(`Regulation Number: ${recall.openfda.regulation_number}`);\n      }\n    }\n    \n    return sections.join('\\n');\n  }\n\n  private format510kContent(device: any): string {\n    const sections = [];\n    \n    sections.push(`=== FDA 510(k) Clearance Information ===`);\n    \n    if (device.device_name) {\n      sections.push(`Device Name: ${device.device_name}`);\n    }\n    \n    if (device.applicant) {\n      sections.push(`Applicant: ${device.applicant}`);\n    }\n    \n    if (device.decision) {\n      sections.push(`Decision: ${device.decision}`);\n    }\n    \n    if (device.statement_or_summary) {\n      sections.push(`\\nSummary:\\n${device.statement_or_summary}`);\n    }\n    \n    if (device.product_code) {\n      sections.push(`\\nProduct Code: ${device.product_code}`);\n    }\n    \n    if (device.regulation_number) {\n      sections.push(`Regulation Number: ${device.regulation_number}`);\n    }\n    \n    if (device.review_advisory_committee) {\n      sections.push(`Review Committee: ${device.review_advisory_committee}`);\n    }\n    \n    if (device.clearance_type) {\n      sections.push(`Clearance Type: ${device.clearance_type}`);\n    }\n    \n    if (device.expedited_review_flag === 'Y') {\n      sections.push(`Expedited Review: Yes`);\n    }\n    \n    if (device.third_party_flag === 'Y') {\n      sections.push(`Third Party Review: Yes`);\n    }\n    \n    if (device.openfda) {\n      sections.push(`\\n=== Device Classification ===`);\n      if (device.openfda.device_class) {\n        sections.push(`Device Class: ${device.openfda.device_class}`);\n      }\n      if (device.openfda.medical_specialty_description) {\n        sections.push(`Medical Specialty: ${device.openfda.medical_specialty_description}`);\n      }\n    }\n    \n    return sections.join('\\n');\n  }\n\n  private formatPMAContent(device: any): string {\n    const sections = [];\n    \n    sections.push(`=== FDA PMA Approval Information ===`);\n    \n    if (device.device_name) {\n      sections.push(`Device Name: ${device.device_name}`);\n    }\n    \n    if (device.applicant) {\n      sections.push(`Applicant: ${device.applicant}`);\n    }\n    \n    if (device.supplement_reason) {\n      sections.push(`Supplement Reason: ${device.supplement_reason}`);\n    }\n    \n    if (device.statement_or_summary) {\n      sections.push(`\\nSummary:\\n${device.statement_or_summary}`);\n    }\n    \n    if (device.product_code) {\n      sections.push(`\\nProduct Code: ${device.product_code}`);\n    }\n    \n    if (device.advisory_committee) {\n      sections.push(`Advisory Committee: ${device.advisory_committee}`);\n    }\n    \n    sections.push(`\\nNote: This is a Class III medical device requiring PMA approval, indicating the highest level of regulatory oversight.`);\n    \n    return sections.join('\\n');\n  }\n\n  private determineRecallPriority(recall: OpenFDARecall): 'high' | 'medium' | 'low' {\n    const riskIndicators = [\n      'death', 'life-threatening', 'serious injury', 'class i',\n      'immediate', 'urgent', 'critical', 'emergency'\n    ];\n    \n    const content = `${recall.reason_for_recall || ''} ${recall.action || ''}`.toLowerCase();\n    \n    if (riskIndicators.some(indicator => content.includes(indicator))) {\n      return 'high';\n    }\n    \n    if (recall.recall_status === 'Ongoing') {\n      return 'medium';\n    }\n    \n    return 'low';\n  }\n\n  private determine510kPriority(device: any): 'high' | 'medium' | 'low' {\n    if (device.expedited_review_flag === 'Y') {\n      return 'high';\n    }\n    \n    if (device.openfda?.device_class === 'Class II') {\n      return 'medium';\n    }\n    \n    return 'low';\n  }\n\n  private extractDeviceClasses(recall: OpenFDARecall): string[] {\n    const classes: string[] = [];\n    \n    if (recall.openfda?.device_class) {\n      classes.push(recall.openfda.device_class);\n    }\n    \n    if (recall.product_code) {\n      classes.push(`Product Code: ${recall.product_code}`);\n    }\n    \n    return classes.length > 0 ? classes : ['Unknown Class'];\n  }\n\n  private extract510kDeviceClasses(device: any): string[] {\n    const classes: string[] = [];\n    \n    if (device.openfda?.device_class) {\n      classes.push(device.openfda.device_class);\n    } else {\n      classes.push('Class II'); // Most 510(k) devices are Class II\n    }\n    \n    if (device.product_code) {\n      classes.push(`Product Code: ${device.product_code}`);\n    }\n    \n    return classes;\n  }\n\n  private extractPMADeviceClasses(device: any): string[] {\n    return ['Class III', `Product Code: ${device.product_code || 'Unknown'}`];\n  }\n\n  private generateRecallUrl(recall: OpenFDARecall): string {\n    if (recall.cfres_id) {\n      return `https://www.fda.gov/medical-devices/medical-device-recalls/recall-${recall.cfres_id}`;\n    }\n    return 'https://www.fda.gov/medical-devices/medical-device-recalls';\n  }\n\n  private generate510kUrl(device: any): string {\n    if (device.k_number) {\n      return `https://www.accessdata.fda.gov/scripts/cdrh/cfdocs/cfpmn/pmn.cfm?ID=${device.k_number}`;\n    }\n    return 'https://www.accessdata.fda.gov/scripts/cdrh/cfdocs/cfpmn/pmn.cfm';\n  }\n\n  private generatePMAUrl(device: any): string {\n    if (device.pma_number) {\n      return `https://www.accessdata.fda.gov/scripts/cdrh/cfdocs/cfpma/pma.cfm?ID=${device.pma_number}`;\n    }\n    return 'https://www.accessdata.fda.gov/scripts/cdrh/cfdocs/cfpma/pma.cfm';\n  }\n\n  private parseDate(dateString?: string): Date | null {\n    if (!dateString) return null;\n    try {\n      // Handle different date formats from FDA API\n      if (dateString.includes('-')) {\n        return new Date(dateString);\n      } else if (dateString.length === 8) {\n        // Format: YYYYMMDD\n        const year = parseInt(dateString.substring(0, 4));\n        const month = parseInt(dateString.substring(4, 6)) - 1;\n        const day = parseInt(dateString.substring(6, 8));\n        return new Date(year, month, day);\n      }\n      return new Date(dateString);\n    } catch {\n      return null;\n    }\n  }\n\n  private async getFDASourceId(type: 'recalls' | '510k' | 'pma'): Promise<string> {\n    try {\n      const sources = await storage.getAllDataSources();\n      let sourceId: string;\n      \n      switch (type) {\n        case 'recalls':\n          sourceId = sources.find(s => s.id === 'fda_recalls' || s.name?.includes('FDA Recalls'))?.id || 'fda_recalls';\n          break;\n        case '510k':\n          sourceId = sources.find(s => s.id === 'fda_510k' || s.name?.includes('FDA 510'))?.id || 'fda_510k';\n          break;\n        case 'pma':\n          sourceId = sources.find(s => s.id === 'fda_pma' || s.name?.includes('FDA PMA'))?.id || 'fda_pma';\n          break;\n      }\n      \n      return sourceId;\n    } catch (error) {\n      console.error('Error getting FDA source ID:', error);\n      return `fda_${type}`;\n    }\n  }\n\n  private async delay(ms: number): Promise<void> {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n\n  async runCompleteExtraction(): Promise<{\n    recalls: number;\n    clearances510k: number;\n    pmaApprovals: number;\n    totalProcessed: number;\n  }> {\n    console.log('[OpenFDA Extractor] Starting complete FDA data extraction...');\n    \n    const results = {\n      recalls: 0,\n      clearances510k: 0,\n      pmaApprovals: 0,\n      totalProcessed: 0\n    };\n\n    try {\n      // Extract device recalls\n      await this.extractDeviceRecalls(100);\n      results.recalls = 100;\n      \n      // Extract 510(k) clearances\n      await this.extractDevice510k(100);\n      results.clearances510k = 100;\n      \n      // Extract PMA approvals\n      await this.extractDevicePMA(50);\n      results.pmaApprovals = 50;\n      \n      results.totalProcessed = results.recalls + results.clearances510k + results.pmaApprovals;\n      \n      console.log(`[OpenFDA Extractor] Complete extraction finished: ${results.totalProcessed} total items processed`);\n    } catch (error) {\n      console.error('[OpenFDA Extractor] Error during complete extraction:', error);\n      throw error;\n    }\n\n    return results;\n  }\n}\n\nexport const openFdaDataExtractor = new OpenFDADataExtractor();"]}