{"version":3,"file":"intelligentDataQualityService.js","sourceRoot":"","sources":["../../server/services/intelligentDataQualityService.ts"],"names":[],"mappings":"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","sourcesContent":["import { storage } from '../storage';\nimport { nlpService } from './nlpService';\nimport type { RegulatoryUpdate, LegalCase } from '@shared/schema';\n\ninterface QualityMetrics {\n  completeness: number; // 0-1\n  accuracy: number; // 0-1\n  timeliness: number; // 0-1\n  relevance: number; // 0-1\n  consistency: number; // 0-1\n  overall: number; // 0-1\n}\n\ninterface DataQualityIssue {\n  id: string;\n  type: 'missing_data' | 'duplicate' | 'outdated' | 'inconsistent' | 'irrelevant' | 'formatting';\n  severity: 'high' | 'medium' | 'low';\n  description: string;\n  affectedRecords: string[];\n  suggestedAction: string;\n  autoFixable: boolean;\n}\n\ninterface QualityReport {\n  overallScore: number;\n  metrics: QualityMetrics;\n  issues: DataQualityIssue[];\n  recommendations: string[];\n  improvementActions: Array<{\n    action: string;\n    priority: 'high' | 'medium' | 'low';\n    impact: string;\n    effort: string;\n  }>;\n}\n\nexport class IntelligentDataQualityService {\n  \n  async assessDataQuality(): Promise<QualityReport> {\n    console.log('[Data Quality] Starting comprehensive data quality assessment...');\n\n    const [regulatoryUpdates, legalCases] = await Promise.all([\n      storage.getAllRegulatoryUpdates(),\n      storage.getAllLegalCases()\n    ]);\n\n    const issues: DataQualityIssue[] = [];\n    \n    // Analyze regulatory updates\n    const regulatoryIssues = await this.analyzeRegulatoryUpdates(regulatoryUpdates);\n    issues.push(...regulatoryIssues);\n\n    // Analyze legal cases\n    const legalIssues = await this.analyzeLegalCases(legalCases);\n    issues.push(...legalIssues);\n\n    // Calculate quality metrics\n    const metrics = this.calculateQualityMetrics(regulatoryUpdates, legalCases, issues);\n\n    // Generate recommendations\n    const recommendations = this.generateRecommendations(issues);\n\n    // Generate improvement actions\n    const improvementActions = this.generateImprovementActions(issues);\n\n    const report: QualityReport = {\n      overallScore: metrics.overall,\n      metrics,\n      issues,\n      recommendations,\n      improvementActions\n    };\n\n    console.log(`[Data Quality] Assessment complete. Overall score: ${(metrics.overall * 100).toFixed(1)}%`);\n    return report;\n  }\n\n  async performAutomaticCleanup(): Promise<{\n    fixedIssues: number;\n    skippedIssues: number;\n    details: string[];\n  }> {\n    console.log('[Data Quality] Starting automatic data cleanup...');\n\n    const qualityReport = await this.assessDataQuality();\n    const autoFixableIssues = qualityReport.issues.filter(issue => issue.autoFixable);\n    \n    let fixedCount = 0;\n    let skippedCount = 0;\n    const details: string[] = [];\n\n    for (const issue of autoFixableIssues) {\n      try {\n        const fixed = await this.fixIssue(issue);\n        if (fixed) {\n          fixedCount++;\n          details.push(`Fixed: ${issue.description}`);\n        } else {\n          skippedCount++;\n          details.push(`Skipped: ${issue.description} (could not auto-fix)`);\n        }\n      } catch (error) {\n        skippedCount++;\n        details.push(`Error fixing ${issue.description}: ${error}`);\n      }\n    }\n\n    console.log(`[Data Quality] Cleanup complete: ${fixedCount} fixed, ${skippedCount} skipped`);\n    return { fixedIssues: fixedCount, skippedIssues: skippedCount, details };\n  }\n\n  private async analyzeRegulatoryUpdates(updates: RegulatoryUpdate[]): Promise<DataQualityIssue[]> {\n    const issues: DataQualityIssue[] = [];\n\n    // Check for duplicates\n    const duplicates = this.findDuplicateUpdates(updates);\n    if (duplicates.length > 0) {\n      issues.push({\n        id: 'regulatory_duplicates',\n        type: 'duplicate',\n        severity: 'medium',\n        description: `Found ${duplicates.length} potential duplicate regulatory updates`,\n        affectedRecords: duplicates.map(d => d.id),\n        suggestedAction: 'Review and merge or remove duplicate entries',\n        autoFixable: false\n      });\n    }\n\n    // Check for missing essential fields\n    const missingFields = updates.filter(u => \n      !u.title || !u.content || !u.sourceId || !u.publishedAt\n    );\n    \n    if (missingFields.length > 0) {\n      issues.push({\n        id: 'regulatory_missing_fields',\n        type: 'missing_data',\n        severity: 'high',\n        description: `${missingFields.length} regulatory updates missing essential fields`,\n        affectedRecords: missingFields.map(u => u.id),\n        suggestedAction: 'Complete missing required fields',\n        autoFixable: false\n      });\n    }\n\n    // Check for outdated content\n    const cutoffDate = new Date();\n    cutoffDate.setFullYear(cutoffDate.getFullYear() - 2);\n    \n    const outdatedUpdates = updates.filter(u => \n      u.publishedAt && new Date(u.publishedAt) < cutoffDate\n    );\n\n    if (outdatedUpdates.length > 100) { // Only flag if significant amount\n      issues.push({\n        id: 'regulatory_outdated',\n        type: 'outdated',\n        severity: 'low',\n        description: `${outdatedUpdates.length} regulatory updates are over 2 years old`,\n        affectedRecords: outdatedUpdates.map(u => u.id),\n        suggestedAction: 'Consider archiving very old updates',\n        autoFixable: true\n      });\n    }\n\n    // Check for content quality\n    const poorContentUpdates = updates.filter(u => \n      u.content && u.content.length < 50\n    );\n\n    if (poorContentUpdates.length > 0) {\n      issues.push({\n        id: 'regulatory_poor_content',\n        type: 'missing_data',\n        severity: 'medium',\n        description: `${poorContentUpdates.length} regulatory updates have very short content`,\n        affectedRecords: poorContentUpdates.map(u => u.id),\n        suggestedAction: 'Enhance content with more detailed information',\n        autoFixable: false\n      });\n    }\n\n    return issues;\n  }\n\n  private async analyzeLegalCases(cases: LegalCase[]): Promise<DataQualityIssue[]> {\n    const issues: DataQualityIssue[] = [];\n\n    // Check for duplicates\n    const duplicates = this.findDuplicateCases(cases);\n    if (duplicates.length > 0) {\n      issues.push({\n        id: 'legal_duplicates',\n        type: 'duplicate',\n        severity: 'high',\n        description: `Found ${duplicates.length} potential duplicate legal cases`,\n        affectedRecords: duplicates.map(d => d.id),\n        suggestedAction: 'Review and merge or remove duplicate cases',\n        autoFixable: false\n      });\n    }\n\n    // Check for missing key information\n    const incompleteCases = cases.filter(c => \n      !c.caseTitle || !c.summary || !c.jurisdiction || c.keyIssues.length === 0\n    );\n\n    if (incompleteCases.length > 0) {\n      issues.push({\n        id: 'legal_incomplete',\n        type: 'missing_data',\n        severity: 'high',\n        description: `${incompleteCases.length} legal cases missing key information`,\n        affectedRecords: incompleteCases.map(c => c.id),\n        suggestedAction: 'Complete missing case details',\n        autoFixable: false\n      });\n    }\n\n    // Check for inconsistent jurisdiction formatting\n    const jurisdictionFormats = new Set(cases.map(c => c.jurisdiction).filter(Boolean));\n    const inconsistentJurisdictions = Array.from(jurisdictionFormats).filter(j => \n      j && (j.length > 10 || j.includes(',') || j.includes(';'))\n    );\n\n    if (inconsistentJurisdictions.length > 0) {\n      const affectedCases = cases.filter(c => \n        inconsistentJurisdictions.includes(c.jurisdiction)\n      );\n\n      issues.push({\n        id: 'legal_jurisdiction_format',\n        type: 'formatting',\n        severity: 'low',\n        description: `Inconsistent jurisdiction formatting in ${affectedCases.length} cases`,\n        affectedRecords: affectedCases.map(c => c.id),\n        suggestedAction: 'Standardize jurisdiction field format',\n        autoFixable: true\n      });\n    }\n\n    return issues;\n  }\n\n  private findDuplicateUpdates(updates: RegulatoryUpdate[]): RegulatoryUpdate[] {\n    const duplicates: RegulatoryUpdate[] = [];\n    const seen = new Map<string, RegulatoryUpdate>();\n\n    for (const update of updates) {\n      const key = `${update.title?.toLowerCase()}_${update.sourceId}`;\n      if (seen.has(key)) {\n        duplicates.push(update);\n      } else {\n        seen.set(key, update);\n      }\n    }\n\n    return duplicates;\n  }\n\n  private findDuplicateCases(cases: LegalCase[]): LegalCase[] {\n    const duplicates: LegalCase[] = [];\n    const seen = new Map<string, LegalCase>();\n\n    for (const case_ of cases) {\n      const key = `${case_.caseTitle?.toLowerCase()}_${case_.jurisdiction}`;\n      if (seen.has(key)) {\n        duplicates.push(case_);\n      } else {\n        seen.set(key, case_);\n      }\n    }\n\n    return duplicates;\n  }\n\n  private calculateQualityMetrics(\n    updates: RegulatoryUpdate[], \n    cases: LegalCase[], \n    issues: DataQualityIssue[]\n  ): QualityMetrics {\n    const totalRecords = updates.length + cases.length;\n    const highSeverityIssues = issues.filter(i => i.severity === 'high').length;\n    const mediumSeverityIssues = issues.filter(i => i.severity === 'medium').length;\n    const lowSeverityIssues = issues.filter(i => i.severity === 'low').length;\n\n    // Completeness: percentage of records with all required fields\n    const completeUpdates = updates.filter(u => \n      u.title && u.content && u.sourceId && u.publishedAt\n    ).length;\n    const completeCases = cases.filter(c => \n      c.caseTitle && c.summary && c.jurisdiction && c.keyIssues.length > 0\n    ).length;\n    const completeness = totalRecords > 0 ? (completeUpdates + completeCases) / totalRecords : 1;\n\n    // Accuracy: inverse of high-severity issues\n    const accuracy = Math.max(0, 1 - (highSeverityIssues / Math.max(totalRecords, 1)));\n\n    // Timeliness: percentage of recent content\n    const recentCutoff = new Date();\n    recentCutoff.setFullYear(recentCutoff.getFullYear() - 1);\n    const recentUpdates = updates.filter(u => \n      u.publishedAt && new Date(u.publishedAt) >= recentCutoff\n    ).length;\n    const recentCases = cases.filter(c => \n      c.decisionDate && new Date(c.decisionDate) >= recentCutoff\n    ).length;\n    const timeliness = totalRecords > 0 ? (recentUpdates + recentCases) / totalRecords : 1;\n\n    // Relevance: based on medical device keywords\n    const relevantUpdates = updates.filter(u => \n      this.isRelevantContent(u.content || '')\n    ).length;\n    const relevantCases = cases.filter(c => \n      this.isRelevantContent(c.summary || '')\n    ).length;\n    const relevance = totalRecords > 0 ? (relevantUpdates + relevantCases) / totalRecords : 1;\n\n    // Consistency: inverse of formatting and duplicate issues\n    const consistencyIssues = issues.filter(i => \n      i.type === 'duplicate' || i.type === 'formatting' || i.type === 'inconsistent'\n    ).length;\n    const consistency = Math.max(0, 1 - (consistencyIssues / Math.max(totalRecords, 1)));\n\n    // Overall score: weighted average\n    const overall = (\n      completeness * 0.25 +\n      accuracy * 0.3 +\n      timeliness * 0.15 +\n      relevance * 0.15 +\n      consistency * 0.15\n    );\n\n    return {\n      completeness,\n      accuracy,\n      timeliness,\n      relevance,\n      consistency,\n      overall\n    };\n  }\n\n  private isRelevantContent(content: string): boolean {\n    const medtechKeywords = [\n      'medical device', 'medizinprodukt', 'fda', 'ema', 'ce mark',\n      'clinical trial', 'regulatory', 'approval', 'clearance',\n      'recall', 'safety', 'biocompatibility', 'cybersecurity'\n    ];\n\n    const lowerContent = content.toLowerCase();\n    return medtechKeywords.some(keyword => lowerContent.includes(keyword));\n  }\n\n  private generateRecommendations(issues: DataQualityIssue[]): string[] {\n    const recommendations: string[] = [];\n\n    const highSeverityCount = issues.filter(i => i.severity === 'high').length;\n    const duplicateIssues = issues.filter(i => i.type === 'duplicate').length;\n    const missingDataIssues = issues.filter(i => i.type === 'missing_data').length;\n\n    if (highSeverityCount > 0) {\n      recommendations.push(`Prioritize fixing ${highSeverityCount} high-severity data quality issues`);\n    }\n\n    if (duplicateIssues > 0) {\n      recommendations.push('Implement automated duplicate detection to prevent future duplicates');\n    }\n\n    if (missingDataIssues > 0) {\n      recommendations.push('Enhance data collection processes to capture all required fields');\n    }\n\n    const autoFixableCount = issues.filter(i => i.autoFixable).length;\n    if (autoFixableCount > 0) {\n      recommendations.push(`${autoFixableCount} issues can be automatically fixed - consider running automated cleanup`);\n    }\n\n    recommendations.push('Establish regular data quality monitoring and alerts');\n    recommendations.push('Create data quality dashboards for ongoing monitoring');\n\n    return recommendations;\n  }\n\n  private generateImprovementActions(issues: DataQualityIssue[]): Array<{\n    action: string;\n    priority: 'high' | 'medium' | 'low';\n    impact: string;\n    effort: string;\n  }> {\n    const actions = [];\n\n    if (issues.some(i => i.type === 'duplicate')) {\n      actions.push({\n        action: 'Implement automated duplicate detection',\n        priority: 'high' as const,\n        impact: 'Significantly reduces data redundancy and improves accuracy',\n        effort: 'Medium - requires development of similarity algorithms'\n      });\n    }\n\n    if (issues.some(i => i.type === 'missing_data')) {\n      actions.push({\n        action: 'Enhance data validation at input',\n        priority: 'high' as const,\n        impact: 'Prevents incomplete data from entering the system',\n        effort: 'Low - add validation rules to forms and APIs'\n      });\n    }\n\n    if (issues.some(i => i.type === 'formatting')) {\n      actions.push({\n        action: 'Standardize data formats and create data dictionaries',\n        priority: 'medium' as const,\n        impact: 'Improves data consistency and searchability',\n        effort: 'Medium - requires defining standards and updating existing data'\n      });\n    }\n\n    if (issues.some(i => i.type === 'outdated')) {\n      actions.push({\n        action: 'Implement automated archiving for old content',\n        priority: 'low' as const,\n        impact: 'Improves system performance and focuses on recent content',\n        effort: 'Low - simple date-based rules'\n      });\n    }\n\n    actions.push({\n      action: 'Set up automated data quality monitoring',\n      priority: 'medium' as const,\n      impact: 'Enables proactive identification of quality issues',\n      effort: 'Medium - requires setting up monitoring infrastructure'\n    });\n\n    return actions;\n  }\n\n  private async fixIssue(issue: DataQualityIssue): Promise<boolean> {\n    switch (issue.type) {\n      case 'outdated':\n        // Archive very old content\n        return await this.archiveOldContent(issue.affectedRecords);\n        \n      case 'formatting':\n        // Fix common formatting issues\n        return await this.fixFormattingIssues(issue.affectedRecords);\n        \n      default:\n        return false; // Cannot auto-fix this type\n    }\n  }\n\n  private async archiveOldContent(recordIds: string[]): Promise<boolean> {\n    try {\n      // Implementation would depend on your archiving strategy\n      console.log(`[Data Quality] Would archive ${recordIds.length} old records`);\n      return true;\n    } catch (error) {\n      console.error('[Data Quality] Error archiving old content:', error);\n      return false;\n    }\n  }\n\n  private async fixFormattingIssues(recordIds: string[]): Promise<boolean> {\n    try {\n      // Implementation would fix common formatting issues\n      console.log(`[Data Quality] Would fix formatting for ${recordIds.length} records`);\n      return true;\n    } catch (error) {\n      console.error('[Data Quality] Error fixing formatting:', error);\n      return false;\n    }\n  }\n}\n\nexport const intelligentDataQualityService = new IntelligentDataQualityService();"]}