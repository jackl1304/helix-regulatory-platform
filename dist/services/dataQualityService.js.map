{"version":3,"file":"dataQualityService.js","sourceRoot":"","sources":["../../server/services/dataQualityService.ts"],"names":[],"mappings":"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","sourcesContent":["export interface DuplicateMatch {\n  id: string;\n  title: string;\n  similarity: number;\n  matchType: 'exact' | 'fuzzy' | 'semantic';\n}\n\nexport interface ValidationResult {\n  isValid: boolean;\n  errors: string[];\n  warnings: string[];\n  score: number; // 0-100\n}\n\ninterface DataStandardization {\n  countryCode?: string;\n  normalizedDate?: Date;\n  standardizedCategory?: string;\n  cleanedTitle?: string;\n}\n\nexport class DataQualityService {\n  \n  // Country code mapping for standardization\n  private countryMapping: Record<string, string> = {\n    'USA': 'US',\n    'United States': 'US',\n    'United States of America': 'US',\n    'America': 'US',\n    'UK': 'GB',\n    'United Kingdom': 'GB',\n    'Britain': 'GB',\n    'Great Britain': 'GB',\n    'Deutschland': 'DE',\n    'Germany': 'DE',\n    'Schweiz': 'CH',\n    'Switzerland': 'CH',\n    'Suisse': 'CH',\n    'Svizzera': 'CH',\n    'European Union': 'EU',\n    'EU': 'EU',\n    'Europe': 'EU'\n  };\n\n  // Standardized categories\n  private categoryMapping: Record<string, string> = {\n    '510k': 'FDA 510(k) Clearance',\n    '510(k)': 'FDA 510(k) Clearance',\n    'pma': 'FDA PMA Approval',\n    'recall': 'Safety Recall',\n    'guidance': 'Regulatory Guidance',\n    'guideline': 'Regulatory Guidance',\n    'standard': 'Technical Standard',\n    'iso': 'ISO Standard',\n    'iec': 'IEC Standard',\n    'safety': 'Safety Notice',\n    'alert': 'Safety Alert',\n    'warning': 'Safety Warning'\n  };\n\n  /**\n   * Fuzzy string matching using Levenshtein distance\n   */\n  private calculateSimilarity(str1: string, str2: string): number {\n    const normalize = (s: string) => s.toLowerCase().replace(/[^\\w\\s]/g, '').trim();\n    \n    const s1 = normalize(str1);\n    const s2 = normalize(str2);\n    \n    if (s1 === s2) return 1.0;\n    \n    const maxLength = Math.max(s1.length, s2.length);\n    if (maxLength === 0) return 1.0;\n    \n    const distance = this.levenshteinDistance(s1, s2);\n    return (maxLength - distance) / maxLength;\n  }\n\n  private levenshteinDistance(str1: string, str2: string): number {\n    const matrix = Array(str2.length + 1).fill(null).map(() => Array(str1.length + 1).fill(null));\n    \n    for (let i = 0; i <= str1.length; i++) matrix[0]![i] = i;\n    for (let j = 0; j <= str2.length; j++) matrix[j]![0] = j;\n    \n    for (let j = 1; j <= str2.length; j++) {\n      for (let i = 1; i <= str1.length; i++) {\n        const substitutionCost = str1[i - 1] === str2[j - 1] ? 0 : 1;\n        matrix[j]![i] = Math.min(\n          matrix[j]![i - 1]! + 1, // deletion\n          matrix[j - 1]![i]! + 1, // insertion\n          matrix[j - 1]![i - 1]! + substitutionCost // substitution\n        );\n      }\n    }\n    \n    return matrix[str2.length]![str1.length]!;\n  }\n\n  /**\n   * Find potential duplicates in a list of items\n   */\n  async findDuplicates(items: any[], similarityThreshold: number = 0.85): Promise<DuplicateMatch[]> {\n    const duplicates: DuplicateMatch[] = [];\n    const processed = new Set<string>();\n    \n    console.log(`[Quality] Checking ${items.length} items for duplicates (threshold: ${similarityThreshold})`);\n    \n    for (let i = 0; i < items.length; i++) {\n      if (processed.has(items[i].id)) continue;\n      \n      const currentItem = items[i];\n      const matches: DuplicateMatch[] = [];\n      \n      for (let j = i + 1; j < items.length; j++) {\n        if (processed.has(items[j].id)) continue;\n        \n        const compareItem = items[j];\n        \n        // Exact title match\n        if (currentItem.title === compareItem.title) {\n          matches.push({\n            id: compareItem.id,\n            title: compareItem.title,\n            similarity: 1.0,\n            matchType: 'exact'\n          });\n          continue;\n        }\n        \n        // Fuzzy matching\n        const similarity = this.calculateSimilarity(currentItem.title, compareItem.title);\n        if (similarity >= similarityThreshold) {\n          matches.push({\n            id: compareItem.id,\n            title: compareItem.title,\n            similarity,\n            matchType: 'fuzzy'\n          });\n        }\n        \n        // Content-based matching (if available)\n        if (currentItem.content && compareItem.content) {\n          const contentSimilarity = this.calculateSimilarity(currentItem.content, compareItem.content);\n          if (contentSimilarity >= 0.9) {\n            matches.push({\n              id: compareItem.id,\n              title: compareItem.title,\n              similarity: contentSimilarity,\n              matchType: 'semantic'\n            });\n          }\n        }\n      }\n      \n      if (matches.length > 0) {\n        duplicates.push({\n          id: currentItem.id,\n          title: currentItem.title,\n          similarity: 1.0,\n          matchType: 'exact'\n        });\n        \n        duplicates.push(...matches);\n        \n        // Mark all matches as processed\n        matches.forEach(match => processed.add(match.id));\n        processed.add(currentItem.id);\n      }\n    }\n    \n    console.log(`[Quality] Found ${duplicates.length} potential duplicates`);\n    return duplicates;\n  }\n\n  /**\n   * Validate data quality of a regulatory update\n   */\n  validateUpdate(update: any): ValidationResult {\n    const errors: string[] = [];\n    const warnings: string[] = [];\n    let score = 100;\n\n    // Required fields validation\n    if (!update.title || update.title.trim().length === 0) {\n      errors.push('Title is required');\n      score -= 20;\n    } else if (update.title.length < 10) {\n      warnings.push('Title is very short');\n      score -= 5;\n    }\n\n    if (!update.content || update.content.trim().length === 0) {\n      errors.push('Content is required');\n      score -= 15;\n    } else if (update.content.length < 50) {\n      warnings.push('Content is very brief');\n      score -= 5;\n    }\n\n    if (!update.source) {\n      warnings.push('Source is missing');\n      score -= 10;\n    }\n\n    if (!update.authority) {\n      warnings.push('Authority is missing');\n      score -= 10;\n    }\n\n    if (!update.region) {\n      warnings.push('Region is missing');\n      score -= 10;\n    }\n\n    // Date validation\n    if (update.published_at) {\n      const publishDate = new Date(update.published_at);\n      if (isNaN(publishDate.getTime())) {\n        errors.push('Invalid publication date format');\n        score -= 10;\n      } else if (publishDate > new Date()) {\n        warnings.push('Publication date is in the future');\n        score -= 5;\n      } else if (publishDate < new Date('2000-01-01')) {\n        warnings.push('Publication date seems very old');\n        score -= 5;\n      }\n    }\n\n    // Priority validation\n    if (update.priority && !['low', 'medium', 'high', 'critical'].includes(update.priority)) {\n      errors.push('Invalid priority value');\n      score -= 5;\n    }\n\n    // URL validation for links\n    if (update.metadata?.originalLink) {\n      try {\n        new URL(update.metadata.originalLink);\n      } catch {\n        warnings.push('Invalid URL in metadata');\n        score -= 3;\n      }\n    }\n\n    // Content quality checks\n    if (update.content) {\n      // 🔴 MOCK DATA DETECTION - Check for placeholder content\n      const placeholders = ['lorem ipsum', 'placeholder', 'todo', 'coming soon', '🔴 mock data'];\n      if (placeholders.some(ph => update.content.toLowerCase().includes(ph))) {\n        warnings.push('🔴 MOCK DATA DETECTED - Content contains placeholder text - AUTHENTIC DATA REQUIRED');\n        score -= 10;\n      }\n\n      // Check for very repetitive content\n      const words = update.content.toLowerCase().split(/\\s+/);\n      const uniqueWords = new Set(words);\n      if (words.length > 20 && uniqueWords.size / words.length < 0.3) {\n        warnings.push('Content appears very repetitive');\n        score -= 5;\n      }\n    }\n\n    return {\n      isValid: errors.length === 0,\n      errors,\n      warnings,\n      score: Math.max(0, score)\n    };\n  }\n\n  /**\n   * Standardize data formats\n   */\n  standardizeData(update: any): DataStandardization {\n    const result: DataStandardization = {};\n\n    // Standardize country/region codes\n    if (update.region) {\n      const standardCountry = this.countryMapping[update.region];\n      if (standardCountry) {\n        result.countryCode = standardCountry;\n      }\n    }\n\n    // Standardize dates to ISO format\n    if (update.published_at) {\n      try {\n        const date = new Date(update.published_at);\n        if (!isNaN(date.getTime())) {\n          result.normalizedDate = date;\n        }\n      } catch (error) {\n        console.warn('[Quality] Could not parse date:', update.published_at);\n      }\n    }\n\n    // Standardize categories\n    if (update.type) {\n      const lowerType = update.type.toLowerCase();\n      for (const [key, value] of Object.entries(this.categoryMapping)) {\n        if (lowerType.includes(key)) {\n          result.standardizedCategory = value;\n          break;\n        }\n      }\n    }\n\n    // Clean and standardize title\n    if (update.title) {\n      result.cleanedTitle = update.title\n        .replace(/\\s+/g, ' ') // Normalize whitespace\n        .replace(/[^\\w\\s\\-\\(\\):\\.,]/g, '') // Remove special characters\n        .trim();\n    }\n\n    return result;\n  }\n\n  /**\n   * Generate data quality report\n   */\n  async generateQualityReport(updates: any[]): Promise<any> {\n    console.log(`[Quality] Generating quality report for ${updates.length} updates`);\n    \n    const validationResults = updates.map(update => ({\n      id: update.id,\n      ...this.validateUpdate(update)\n    }));\n\n    const duplicates = await this.findDuplicates(updates);\n    \n    const totalScore = validationResults.reduce((sum, result) => sum + result.score, 0);\n    const averageScore = updates.length > 0 ? totalScore / updates.length : 0;\n    \n    const qualityMetrics = {\n      totalUpdates: updates.length,\n      validUpdates: validationResults.filter(r => r.isValid).length,\n      averageQualityScore: Math.round(averageScore * 100) / 100,\n      totalErrors: validationResults.reduce((sum, r) => sum + r.errors.length, 0),\n      totalWarnings: validationResults.reduce((sum, r) => sum + r.warnings.length, 0),\n      duplicateCount: duplicates.length,\n      duplicateGroups: this.groupDuplicates(duplicates)\n    };\n\n    const recommendations = this.generateRecommendations(qualityMetrics, validationResults);\n\n    return {\n      metrics: qualityMetrics,\n      validationResults: validationResults.slice(0, 50), // Limit for performance\n      duplicates: duplicates.slice(0, 100),\n      recommendations,\n      generatedAt: new Date().toISOString()\n    };\n  }\n\n  private groupDuplicates(duplicates: DuplicateMatch[]): any[] {\n    const groups: Record<string, DuplicateMatch[]> = {};\n    \n    duplicates.forEach(dup => {\n      const key = dup.title.toLowerCase().slice(0, 50);\n      if (!groups[key]) groups[key] = [];\n      groups[key].push(dup);\n    });\n\n    return Object.values(groups).filter(group => group.length > 1);\n  }\n\n  private generateRecommendations(metrics: any, validationResults: any[]): string[] {\n    const recommendations: string[] = [];\n\n    if (metrics.averageQualityScore < 70) {\n      recommendations.push('Overall data quality is below acceptable threshold. Review data collection processes.');\n    }\n\n    if (metrics.duplicateCount > metrics.totalUpdates * 0.1) {\n      recommendations.push('High number of duplicates detected. Implement better deduplication strategies.');\n    }\n\n    if (metrics.totalErrors > 0) {\n      recommendations.push(`${metrics.totalErrors} validation errors found. Address critical data issues.`);\n    }\n\n    const lowQualityCount = validationResults.filter(r => r.score < 60).length;\n    if (lowQualityCount > 0) {\n      recommendations.push(`${lowQualityCount} updates have low quality scores. Review and improve data sources.`);\n    }\n\n    if (metrics.validUpdates / metrics.totalUpdates < 0.95) {\n      recommendations.push('Less than 95% of updates are valid. Strengthen validation at data ingestion.');\n    }\n\n    return recommendations;\n  }\n\n  /**\n   * Clean and standardize a batch of updates\n   */\n  async cleanBatchData(updates: any[]): Promise<any[]> {\n    console.log(`[Quality] Cleaning batch of ${updates.length} updates`);\n    \n    return updates.map(update => {\n      const standardization = this.standardizeData(update);\n      const validation = this.validateUpdate(update);\n      \n      return {\n        ...update,\n        // Apply standardizations\n        region: standardization.countryCode || update.region,\n        published_at: standardization.normalizedDate || update.published_at,\n        type: standardization.standardizedCategory || update.type,\n        title: standardization.cleanedTitle || update.title,\n        // Add quality metadata\n        _quality: {\n          score: validation.score,\n          isValid: validation.isValid,\n          hasWarnings: validation.warnings.length > 0,\n          lastCleaned: new Date().toISOString()\n        }\n      };\n    });\n  }\n}"]}