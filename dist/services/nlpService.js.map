{"version":3,"file":"nlpService.js","sourceRoot":"","sources":["../../server/services/nlpService.ts"],"names":[],"mappings":"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","sourcesContent":["interface CategoryResult {\n  categories: string[];\n  confidence: number;\n  deviceTypes: string[];\n  riskLevel: string;\n  therapeuticArea: string;\n}\n\ninterface ExtractionResult {\n  keyPoints: string[];\n  entities: string[];\n  sentiment: 'positive' | 'negative' | 'neutral';\n}\n\ninterface SummaryOptions {\n  maxLength: number;\n  extractKeywords: boolean;\n}\n\nclass NLPService {\n  private medtechKeywords = {\n    deviceTypes: [\n      'diagnostic', 'therapeutic', 'surgical', 'monitoring', 'imaging',\n      'implantable', 'prosthetic', 'orthopedic', 'cardiovascular', 'neurological',\n      'ophthalmic', 'dental', 'dermatological', 'respiratory', 'anesthesia',\n      'infusion pump', 'defibrillator', 'pacemaker', 'catheter', 'stent',\n      'artificial intelligence', 'machine learning', 'software', 'mobile app',\n      'telemedicine', 'remote monitoring', 'digital health', 'ai-enabled'\n    ],\n    riskKeywords: {\n      high: ['class iii', 'implantable', 'life-sustaining', 'critical', 'invasive', 'surgical'],\n      medium: ['class ii', 'monitoring', 'diagnostic', 'therapeutic'],\n      low: ['class i', 'non-invasive', 'general wellness', 'fitness']\n    },\n    therapeuticAreas: [\n      'cardiology', 'neurology', 'oncology', 'orthopedics', 'ophthalmology',\n      'gastroenterology', 'urology', 'gynecology', 'dermatology', 'endocrinology',\n      'psychiatry', 'radiology', 'anesthesiology', 'emergency medicine'\n    ],\n    complianceTerms: [\n      'cybersecurity', 'clinical evaluation', 'post-market surveillance',\n      'quality management', 'risk management', 'biocompatibility',\n      'software lifecycle', 'usability engineering', 'clinical investigation'\n    ]\n  };\n\n  async categorizeContent(content: string): Promise<CategoryResult> {\n    const normalizedContent = content.toLowerCase();\n    \n    const categories: string[] = [];\n    const deviceTypes: string[] = [];\n    let riskLevel = 'medium';\n    let confidence = 0;\n    let therapeuticArea = 'general';\n\n    // Identify device types\n    for (const deviceType of this.medtechKeywords.deviceTypes) {\n      if (normalizedContent.includes(deviceType.toLowerCase())) {\n        deviceTypes.push(deviceType);\n        confidence += 0.1;\n      }\n    }\n\n    // Identify therapeutic areas\n    for (const area of this.medtechKeywords.therapeuticAreas) {\n      if (normalizedContent.includes(area.toLowerCase())) {\n        categories.push(area);\n        therapeuticArea = area;\n        confidence += 0.1;\n      }\n    }\n\n    // Identify compliance terms\n    for (const term of this.medtechKeywords.complianceTerms) {\n      if (normalizedContent.includes(term.toLowerCase())) {\n        categories.push(term);\n        confidence += 0.1;\n      }\n    }\n\n    // Determine risk level\n    for (const [level, keywords] of Object.entries(this.medtechKeywords.riskKeywords)) {\n      for (const keyword of keywords) {\n        if (normalizedContent.includes(keyword.toLowerCase())) {\n          riskLevel = level;\n          confidence += 0.2;\n          break;\n        }\n      }\n      if (riskLevel === level) break;\n    }\n\n    // Add general categories based on content analysis\n    if (normalizedContent.includes('ai') || normalizedContent.includes('artificial intelligence') || normalizedContent.includes('machine learning')) {\n      categories.push('AI/ML Technology');\n      confidence += 0.2;\n    }\n\n    if (normalizedContent.includes('cybersecurity') || normalizedContent.includes('cyber security')) {\n      categories.push('Cybersecurity');\n      confidence += 0.2;\n    }\n\n    if (normalizedContent.includes('clinical trial') || normalizedContent.includes('clinical study')) {\n      categories.push('Clinical Trials');\n      confidence += 0.2;\n    }\n\n    if (normalizedContent.includes('recall') || normalizedContent.includes('safety alert')) {\n      categories.push('Safety Alert');\n      confidence += 0.3;\n    }\n\n    if (normalizedContent.includes('mdr') || normalizedContent.includes('medical device regulation')) {\n      categories.push('MDR Compliance');\n      confidence += 0.2;\n    }\n\n    if (normalizedContent.includes('fda') || normalizedContent.includes('510k') || normalizedContent.includes('pma')) {\n      categories.push('FDA Regulation');\n      confidence += 0.2;\n    }\n\n    // Ensure we have at least some basic categorization\n    if (categories.length === 0) {\n      categories.push('General MedTech');\n      confidence = 0.5;\n    }\n\n    if (deviceTypes.length === 0) {\n      deviceTypes.push('Medical Device');\n    }\n\n    return {\n      categories: Array.from(new Set(categories)), // Remove duplicates\n      confidence: Math.min(confidence, 1.0),\n      deviceTypes: Array.from(new Set(deviceTypes)),\n      riskLevel,\n      therapeuticArea\n    };\n  }\n\n  async extractKeyInformation(content: string): Promise<{\n    keyPoints: string[];\n    entities: string[];\n    sentiment: 'positive' | 'negative' | 'neutral';\n  }> {\n    const sentences = content.split(/[.!?]+/).filter(s => s.trim().length > 0);\n    \n    // Extract key sentences (simple heuristic: sentences with important keywords)\n    const importantKeywords = [\n      'guidance', 'requirement', 'standard', 'compliance', 'approval', 'clearance',\n      'recall', 'safety', 'risk', 'clinical', 'regulatory', 'fda', 'ema', 'ce mark',\n      'mdr', 'cybersecurity', 'artificial intelligence', 'machine learning'\n    ];\n    \n    const keyPoints = sentences.filter(sentence => {\n      const lowerSentence = sentence.toLowerCase();\n      return importantKeywords.some(keyword => lowerSentence.includes(keyword));\n    }).slice(0, 5); // Limit to top 5 key points\n\n    // Extract entities (simplified - just find capitalized words/phrases)\n    const entityPattern = /\\b[A-Z][a-z]+(?:\\s+[A-Z][a-z]+)*\\b/g;\n    const entities = Array.from(new Set(content.match(entityPattern) || []));\n\n    // Simple sentiment analysis based on keywords\n    const positiveWords = ['approval', 'clearance', 'authorized', 'improved', 'enhanced', 'breakthrough', 'innovation'];\n    const negativeWords = ['recall', 'violation', 'warning', 'denied', 'rejected', 'risk', 'adverse', 'violation'];\n    \n    const lowerContent = content.toLowerCase();\n    const positiveCount = positiveWords.filter(word => lowerContent.includes(word)).length;\n    const negativeCount = negativeWords.filter(word => lowerContent.includes(word)).length;\n    \n    let sentiment: 'positive' | 'negative' | 'neutral' = 'neutral';\n    if (positiveCount > negativeCount) sentiment = 'positive';\n    else if (negativeCount > positiveCount) sentiment = 'negative';\n\n    return {\n      keyPoints,\n      entities: entities.slice(0, 10), // Limit to top 10 entities\n      sentiment\n    };\n  }\n\n  async generateSummary(content: string, maxLength: number = 200): Promise<string> {\n    const sentences = content.split(/[.!?]+/).filter(s => s.trim().length > 0);\n    \n    if (sentences.length <= 2) {\n      return content.substring(0, maxLength);\n    }\n\n    // Score sentences based on keyword frequency and position\n    const scoredSentences = sentences.map((sentence, index) => {\n      let score = 0;\n      \n      // First sentences are more important\n      if (index < 2) score += 2;\n      \n      // Sentences with key terms are more important\n      const keyTerms = ['guidance', 'requirement', 'approval', 'recall', 'standard', 'compliance', 'fda', 'ema', 'mdr'];\n      keyTerms.forEach(term => {\n        if (sentence.toLowerCase().includes(term)) score += 1;\n      });\n      \n      // Longer sentences might contain more information\n      score += sentence.length / 100;\n      \n      return { sentence: sentence.trim(), score };\n    });\n\n    // Sort by score and take top sentences\n    scoredSentences.sort((a, b) => b.score - a.score);\n    \n    let summary = '';\n    for (const item of scoredSentences) {\n      if (summary.length + item.sentence.length <= maxLength) {\n        summary += (summary ? '. ' : '') + item.sentence;\n      } else {\n        break;\n      }\n    }\n    \n    return summary || content.substring(0, maxLength);\n  }\n\n  async detectRegulatoryCompliance(content: string): Promise<{\n    complianceAreas: string[];\n    requirements: string[];\n    risks: string[];\n    recommendations: string[];\n  }> {\n    const normalizedContent = content.toLowerCase();\n    \n    const complianceAreas: string[] = [];\n    const requirements: string[] = [];\n    const risks: string[] = [];\n    const recommendations: string[] = [];\n\n    // Detect compliance areas\n    const compliancePatterns = {\n      'MDR': ['mdr', 'medical device regulation', 'eu 2017/745'],\n      'FDA': ['fda', '510k', 'pma', 'de novo'],\n      'ISO 13485': ['iso 13485', 'quality management'],\n      'ISO 14971': ['iso 14971', 'risk management'],\n      'IEC 62304': ['iec 62304', 'software lifecycle'],\n      'Cybersecurity': ['cybersecurity', 'cyber security', 'data protection'],\n      'Clinical Evaluation': ['clinical evaluation', 'clinical data', 'clinical investigation']\n    };\n\n    for (const [area, patterns] of Object.entries(compliancePatterns)) {\n      if (patterns.some(pattern => normalizedContent.includes(pattern))) {\n        complianceAreas.push(area);\n      }\n    }\n\n    // Detect requirements\n    if (normalizedContent.includes('clinical evaluation')) {\n      requirements.push('Klinische Bewertung erforderlich');\n    }\n    if (normalizedContent.includes('post-market surveillance')) {\n      requirements.push('Post-Market Surveillance implementieren');\n    }\n    if (normalizedContent.includes('risk management')) {\n      requirements.push('Risikomanagement nach ISO 14971');\n    }\n    if (normalizedContent.includes('cybersecurity')) {\n      requirements.push('Cybersecurity-Maßnahmen implementieren');\n    }\n\n    // Detect risks\n    if (normalizedContent.includes('recall') || normalizedContent.includes('warning')) {\n      risks.push('Sicherheitsrisiko - Überwachung erforderlich');\n    }\n    if (normalizedContent.includes('non-compliance') || normalizedContent.includes('violation')) {\n      risks.push('Compliance-Risiko - Sofortige Maßnahmen erforderlich');\n    }\n    if (normalizedContent.includes('ai') || normalizedContent.includes('machine learning')) {\n      risks.push('KI-Risiko - Spezielle Regulierung beachten');\n    }\n\n    // Generate recommendations\n    if (complianceAreas.includes('MDR')) {\n      recommendations.push('MDR-Compliance überprüfen und dokumentieren');\n    }\n    if (complianceAreas.includes('FDA')) {\n      recommendations.push('FDA-Submission-Strategie entwickeln');\n    }\n    if (complianceAreas.includes('Cybersecurity')) {\n      recommendations.push('Cybersecurity-Assessment durchführen');\n    }\n    if (risks.length > 0) {\n      recommendations.push('Risikobewertung aktualisieren');\n    }\n\n    return {\n      complianceAreas,\n      requirements,\n      risks,\n      recommendations\n    };\n  }\n}\n\nexport const nlpService = new NLPService();"]}