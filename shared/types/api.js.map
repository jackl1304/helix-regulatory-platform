{"version":3,"file":"api.js","sourceRoot":"","sources":["api.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,CAAC,EAAE,MAAM,KAAK,CAAC;AAsFxB,MAAM,CAAC,MAAM,iBAAiB,GAAG,CAAC,CAAC,MAAM,CAAC;IACxC,EAAE,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC;IACrB,KAAK,EAAE,CAAC,CAAC,OAAO,EAAE,CAAC,QAAQ,EAAE;IAC7B,QAAQ,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,QAAQ,EAAE,MAAM,CAAC,CAAC,CAAC,QAAQ,EAAE;CACvD,CAAC,CAAC;AAEH,MAAM,CAAC,MAAM,sBAAsB,GAAG,CAAC,CAAC,MAAM,CAAC;IAC7C,IAAI,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;IAC3B,QAAQ,EAAE,CAAC,CAAC,OAAO,EAAE,CAAC,QAAQ,EAAE;IAChC,SAAS,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,OAAO,EAAE,QAAQ,EAAE,SAAS,EAAE,UAAU,CAAC,CAAC,CAAC,QAAQ,EAAE;IACxE,QAAQ,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,GAAG,EAAE,CAAC,QAAQ,EAAE;IACrC,WAAW,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;CACnC,CAAC,CAAC;AAEH,MAAM,CAAC,MAAM,gBAAgB,GAAG,CAAC,CAAC,MAAM,CAAC;IACvC,IAAI,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;IAClC,KAAK,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC;IAC7C,MAAM,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;IAC7B,SAAS,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC;CACnD,CAAC,CAAC;AAGH,MAAM,CAAC,MAAM,iBAAiB,GAAG,CAC/B,OAAgB,EAChB,IAAQ,EACR,KAAc,EACd,OAAgB,EAChB,UAAyC,EACzB,EAAE,CAAC,CAAC;IACpB,OAAO;IACP,IAAI;IACJ,KAAK;IACL,OAAO;IACP,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;IACnC,UAAU;CACX,CAAC,CAAC;AAGH,MAAM,CAAC,MAAM,UAAU,GAAG,CAAC,KAAc,EAAqD,EAAE;IAC9F,OAAO,OAAO,KAAK,KAAK,QAAQ,IAAI,KAAK,KAAK,IAAI,IAAI,SAAS,IAAI,KAAK,CAAC;AAC3E,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,gBAAgB,GAAG,CAAC,IAAa,EAA0B,EAAE;IACxE,OAAO,OAAO,IAAI,KAAK,QAAQ;QACxB,IAAI,KAAK,IAAI;QACb,cAAc,IAAI,IAAI;QACtB,mBAAmB,IAAI,IAAI,CAAC;AACrC,CAAC,CAAC","sourcesContent":["import { z } from 'zod';\n\n// Standard API Response Structure\nexport interface ApiResponse<T = unknown> {\n  success: boolean;\n  data?: T;\n  error?: string;\n  message?: string;\n  timestamp: string;\n  pagination?: {\n    page: number;\n    limit: number;\n    total: number;\n  };\n}\n\n// Dashboard Statistics Interface\nexport interface DashboardStats {\n  totalUpdates: number;\n  uniqueUpdates: number;\n  totalLegalCases: number;\n  uniqueLegalCases: number;\n  recentUpdates: number;\n  recentLegalCases: number;\n  activeDataSources: number;\n  currentData: number;\n  archivedData: number;\n  duplicatesRemoved: string;\n  dataQuality: string;\n  totalArticles: number;\n  totalSubscribers: number;\n  pendingApprovals: number;\n  totalNewsletters: number;\n}\n\n// Data Source Interface\nexport interface DataSource {\n  id: string;\n  name: string;\n  type: 'regulatory' | 'standards' | 'legal' | 'guidelines' | 'recalls';\n  category: string;\n  isActive: boolean;\n  lastSync?: Date;\n  endpoint?: string;\n  description?: string;\n  region?: string;\n  frequency?: 'daily' | 'weekly' | 'monthly' | 'realtime';\n  credentialsRequired?: boolean;\n  status: 'active' | 'inactive' | 'error' | 'maintenance';\n}\n\n// Regulatory Update Interface\nexport interface RegulatoryUpdate {\n  id: string;\n  title: string;\n  content: string;\n  source: string;\n  type: 'regulation' | 'guidance' | 'standard' | 'announcement';\n  date: Date;\n  region: string;\n  category: string;\n  impactLevel: 'low' | 'medium' | 'high' | 'critical';\n  tags: string[];\n  url?: string;\n  documentId?: string;\n  status: 'draft' | 'published' | 'archived';\n}\n\n// Legal Case Interface\nexport interface LegalCase {\n  id: string;\n  title: string;\n  caseNumber: string;\n  court: string;\n  jurisdiction: string;\n  date: Date;\n  summary: string;\n  fullDecision?: string;\n  outcome: 'pending' | 'plaintiff' | 'defendant' | 'settled' | 'dismissed';\n  impactLevel: 'low' | 'medium' | 'high' | 'critical';\n  tags: string[];\n  relatedProducts?: string[];\n  precedentValue: 'low' | 'medium' | 'high';\n}\n\n// API Request Validation Schemas\nexport const SyncRequestSchema = z.object({\n  id: z.string().min(1),\n  force: z.boolean().optional(),\n  priority: z.enum(['low', 'medium', 'high']).optional()\n});\n\nexport const DataSourceUpdateSchema = z.object({\n  name: z.string().optional(),\n  isActive: z.boolean().optional(),\n  frequency: z.enum(['daily', 'weekly', 'monthly', 'realtime']).optional(),\n  endpoint: z.string().url().optional(),\n  description: z.string().optional()\n});\n\nexport const PaginationSchema = z.object({\n  page: z.number().min(1).default(1),\n  limit: z.number().min(1).max(100).default(50),\n  sortBy: z.string().optional(),\n  sortOrder: z.enum(['asc', 'desc']).default('desc')\n});\n\n// Utility function to create standardized API responses\nexport const createApiResponse = <T>(\n  success: boolean,\n  data?: T,\n  error?: string,\n  message?: string,\n  pagination?: ApiResponse<T>['pagination']\n): ApiResponse<T> => ({\n  success,\n  data,\n  error,\n  message,\n  timestamp: new Date().toISOString(),\n  pagination\n});\n\n// Type guards\nexport const isApiError = (error: unknown): error is { message: string; statusCode?: number } => {\n  return typeof error === 'object' && error !== null && 'message' in error;\n};\n\nexport const isDashboardStats = (data: unknown): data is DashboardStats => {\n  return typeof data === 'object' && \n         data !== null && \n         'totalUpdates' in data && \n         'activeDataSources' in data;\n};"]}