{"version":3,"file":"storage.js","sourceRoot":"","sources":["storage.ts"],"names":[],"mappings":"","sourcesContent":["import { \n  DashboardStats, \n  DataSource, \n  RegulatoryUpdate, \n  LegalCase \n} from './api';\n\n// Legacy storage interfaces (kept for backward compatibility)\nexport interface StorageRegulatoryUpdate {\n  id: string;\n  title: string;\n  description: string;\n  source_id: string;\n  source_url: string;\n  content?: string;\n  region: string;\n  update_type: string;\n  priority: string;\n  device_classes: string[];\n  categories?: Record<string, unknown>;\n  raw_data?: Record<string, unknown>;\n  published_at: string;\n  created_at: string;\n  effective_date?: string;\n}\n\nexport interface StorageLegalCase {\n  id: string;\n  case_number: string;\n  title: string;\n  court: string;\n  jurisdiction: string;\n  status: string;\n  verdict?: string;\n  damages?: number;\n  defendants: string[];\n  plaintiffs: string[];\n  filed_date: string;\n  decision_date?: string;\n  closed_date?: string;\n  case_summary?: string;\n  summary?: string;\n  legal_issues: string[];\n  outcome?: string;\n  impact_level?: string;\n  document_url?: string;\n}\n\nexport interface StorageDataSource {\n  id: string;\n  name: string;\n  type: string;\n  url: string;\n  is_active: boolean;\n  last_sync: string;\n  sync_frequency: string;\n  status: string;\n  metadata: Record<string, unknown>;\n  created_at: string;\n  updated_at: string;\n}\n\n// User related types\nexport interface User {\n  id: string;\n  name: string;\n  email: string;\n  role: 'admin' | 'user' | 'viewer';\n  createdAt: Date;\n  updatedAt: Date;\n  isActive: boolean;\n}\n\nexport interface CreateUserInput {\n  name: string;\n  email: string;\n  role: 'admin' | 'user' | 'viewer';\n}\n\nexport interface UpdateUserInput {\n  name?: string;\n  email?: string;\n  role?: 'admin' | 'user' | 'viewer';\n  isActive?: boolean;\n}\n\n// Knowledge Article types\nexport interface KnowledgeArticle {\n  id: string;\n  title: string;\n  content: string;\n  category: string;\n  tags: string[];\n  author: string;\n  publishedAt: Date;\n  updatedAt: Date;\n  isPublished: boolean;\n  viewCount: number;\n}\n\nexport interface CreateKnowledgeArticleInput {\n  title: string;\n  content: string;\n  category: string;\n  tags: string[];\n  author: string;\n  isPublished?: boolean;\n}\n\n// Newsletter types\nexport interface Newsletter {\n  id: string;\n  title: string;\n  content: string;\n  scheduledDate: Date;\n  sentDate?: Date;\n  status: 'draft' | 'scheduled' | 'sent' | 'cancelled';\n  recipientCount: number;\n  openRate?: number;\n  clickRate?: number;\n}\n\nexport interface Subscriber {\n  id: string;\n  email: string;\n  name?: string;\n  subscribedAt: Date;\n  isActive: boolean;\n  preferences: {\n    regulations: boolean;\n    legal: boolean;\n    newsletters: boolean;\n  };\n}\n\n// Approval types\nexport interface Approval {\n  id: string;\n  contentType: 'regulatory_update' | 'legal_case' | 'knowledge_article';\n  contentId: string;\n  status: 'pending' | 'approved' | 'rejected';\n  submittedBy: string;\n  reviewedBy?: string;\n  submittedAt: Date;\n  reviewedAt?: Date;\n  comments?: string;\n  confidence?: number;\n  aiRecommendation?: 'approve' | 'reject' | 'review';\n}\n\nexport interface CreateApprovalInput {\n  contentType: 'regulatory_update' | 'legal_case' | 'knowledge_article';\n  contentId: string;\n  submittedBy: string;\n  comments?: string;\n  confidence?: number;\n  aiRecommendation?: 'approve' | 'reject' | 'review';\n}\n\nexport interface UpdateApprovalInput {\n  status?: 'pending' | 'approved' | 'rejected';\n  reviewedBy?: string;\n  comments?: string;\n}\n\n// Storage interface with proper typing\nexport interface IStorage {\n  // Dashboard operations\n  getDashboardStats(): Promise<DashboardStats>;\n  \n  // Data source operations  \n  getAllDataSources(): Promise<DataSource[]>;\n  getActiveDataSources(): Promise<DataSource[]>;\n  getDataSourceById(id: string): Promise<DataSource | undefined>;\n  updateDataSource(id: string, updates: Partial<DataSource>): Promise<DataSource>;\n  updateDataSourceLastSync(id: string, lastSync: Date): Promise<void>;\n  addDataSource(dataSource: Omit<DataSource, 'id'>): Promise<DataSource>;\n  deleteDataSource(id: string): Promise<void>;\n  \n  // User operations\n  createUser(user: CreateUserInput): Promise<User>;\n  getUserById(id: string): Promise<User | undefined>;\n  getAllUsers(): Promise<User[]>;\n  updateUser(id: string, updates: UpdateUserInput): Promise<User>;\n  deleteUser(id: string): Promise<void>;\n  \n  // Regulatory update operations\n  addRegulatoryUpdate(update: Omit<RegulatoryUpdate, 'id'>): Promise<RegulatoryUpdate>;\n  getAllRegulatoryUpdates(): Promise<RegulatoryUpdate[]>;\n  getRegulatoryUpdateById(id: string): Promise<RegulatoryUpdate | undefined>;\n  getRegulatoryUpdatesByRegion(region: string): Promise<RegulatoryUpdate[]>;\n  getRecentRegulatoryUpdates(limit?: number): Promise<RegulatoryUpdate[]>;\n  updateRegulatoryUpdate(id: string, updates: Partial<RegulatoryUpdate>): Promise<RegulatoryUpdate>;\n  deleteRegulatoryUpdate(id: string): Promise<void>;\n  \n  // Legal case operations\n  addLegalCase(legalCase: Omit<LegalCase, 'id'>): Promise<LegalCase>;\n  getAllLegalCases(): Promise<LegalCase[]>;\n  getLegalCaseById(id: string): Promise<LegalCase | undefined>;\n  getLegalCasesByJurisdiction(jurisdiction: string): Promise<LegalCase[]>;\n  updateLegalCase(id: string, updates: Partial<LegalCase>): Promise<LegalCase>;\n  deleteLegalCase(id: string): Promise<void>;\n  \n  // Knowledge article operations\n  addKnowledgeArticle(article: CreateKnowledgeArticleInput): Promise<KnowledgeArticle>;\n  getAllKnowledgeArticles(): Promise<KnowledgeArticle[]>;\n  getKnowledgeArticleById(id: string): Promise<KnowledgeArticle | undefined>;\n  updateKnowledgeArticle(id: string, updates: Partial<KnowledgeArticle>): Promise<KnowledgeArticle>;\n  deleteKnowledgeArticle(id: string): Promise<void>;\n  \n  // Newsletter and subscriber operations\n  addNewsletter(newsletter: Omit<Newsletter, 'id'>): Promise<Newsletter>;\n  getAllNewsletters(): Promise<Newsletter[]>;\n  getNewsletterById(id: string): Promise<Newsletter | undefined>;\n  updateNewsletter(id: string, updates: Partial<Newsletter>): Promise<Newsletter>;\n  deleteNewsletter(id: string): Promise<void>;\n  \n  addSubscriber(subscriber: Omit<Subscriber, 'id'>): Promise<Subscriber>;\n  getAllSubscribers(): Promise<Subscriber[]>;\n  getSubscriberById(id: string): Promise<Subscriber | undefined>;\n  updateSubscriber(id: string, updates: Partial<Subscriber>): Promise<Subscriber>;\n  deleteSubscriber(id: string): Promise<void>;\n  \n  // Approval operations\n  addApproval(approval: CreateApprovalInput): Promise<Approval>;\n  getAllApprovals(): Promise<Approval[]>;\n  getApprovalById(id: string): Promise<Approval | undefined>;\n  getPendingApprovals(): Promise<Approval[]>;\n  updateApproval(id: string, updates: UpdateApprovalInput): Promise<Approval>;\n  deleteApproval(id: string): Promise<void>;\n}"]}