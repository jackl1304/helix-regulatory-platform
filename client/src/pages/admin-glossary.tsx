import { useState, useEffect } from "react";
import { useQuery } from "@tanstack/react-query";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Input } from "@/components/ui/input";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from "@/components/ui/accordion";
import { 
  Search, 
  BookOpen, 
  Settings, 
  FileText, 
  Database, 
  Globe, 
  Shield,
  Zap,
  Target,
  AlertTriangle,
  RefreshCw,
  Download,
  Upload,
  Eye,
  Edit,
  Plus,
  Trash2,
  CheckCircle
} from "lucide-react";
import { useDevice } from "@/hooks/use-device";
import { useToast } from "@/hooks/use-toast";
import { cn } from "@/lib/utils";

interface GlossaryEntry {
  id: string;
  term: string;
  category: string;
  definition: string;
  technicalExplanation: string;
  businessContext: string;
  generationMethod: string;
  sources: string[];
  relatedTerms: string[];
  lastUpdated: string;
  autoGenerated: boolean;
  validationStatus: 'verified' | 'pending' | 'outdated';
  usageContext: string[];
  examples: string[];
}

const adminGlossaryData: GlossaryEntry[] = [
  // ======== PLATTFORM-ARCHITEKTUR ========
  {
    id: "helix-platform",
    term: "Helix Platform",
    category: "Plattform-Architektur",
    definition: "Zentrale regulatorische Intelligence-Plattform für die Medizintechnik-Industrie mit automatisierter Datensammlung, KI-Analyse und Compliance-Management.",
    technicalExplanation: "Node.js/Express Backend mit PostgreSQL Datenbank, React Frontend, TanStack Query für State Management, Drizzle ORM für Datenbankabstraktion.",
    businessContext: "Reduziert regulatorische Compliance-Kosten um 30-50%, verkürzt Time-to-Market um 6-12 Monate, automatisiert 80% der manuellen Regulatory Affairs Prozesse.",
    generationMethod: "Automatisch generiert aus System-Architektur-Dokumentation und replit.md",
    sources: ["replit.md", "System Architecture Documentation", "Business Requirements"],
    relatedTerms: ["Regulatory Intelligence", "Compliance Management", "Medical Device Regulation"],
    lastUpdated: "2025-08-06",
    autoGenerated: true,
    validationStatus: "verified",
    usageContext: ["Dashboard", "System Overview", "Business Presentations"],
    examples: ["Helix Platform Dashboard", "Helix Regulatory Intelligence System"]
  },
  {
    id: "express-js",
    term: "Express.js",
    category: "Backend-Framework",
    definition: "Web-Framework für Node.js als Backend-Server der Helix Platform mit REST API-Endpoints und Middleware-Support.",
    technicalExplanation: "app.get(), app.post(), app.put(), app.delete() Routing, Express Session Management, Error Handling Middleware, JSON Response Formatting.",
    businessContext: "Ermöglicht schnelle API-Entwicklung, reduziert Backend-Entwicklungszeit um 60%, standardisierte HTTP-Kommunikation für alle Frontend-Requests.",
    generationMethod: "Extrahiert aus server/routes.ts und Package.json Dependencies",
    sources: ["server/routes.ts", "package.json", "Express Documentation"],
    relatedTerms: ["Node.js", "REST API", "HTTP Server", "Middleware"],
    lastUpdated: "2025-08-06",
    autoGenerated: true,
    validationStatus: "verified",
    usageContext: ["Backend Development", "API Routing", "Server Configuration"],
    examples: ["app.get('/api/dashboard/stats')", "Express Middleware Stack"]
  },
  {
    id: "node-js",
    term: "Node.js",
    category: "Runtime-Environment",
    definition: "JavaScript Runtime Environment für Server-Side Entwicklung der Helix Platform Backend-Services.",
    technicalExplanation: "V8 JavaScript Engine, Event-driven Non-blocking I/O, NPM Package Management, ES6+ Module Support mit import/export.",
    businessContext: "Einheitliche JavaScript-Entwicklung für Frontend und Backend, 40% schnellere Entwicklungszyklen, große Entwickler-Community.",
    generationMethod: "Extrahiert aus Package.json Scripts und Server Configuration",
    sources: ["package.json", "server/index.ts", "Runtime Configuration"],
    relatedTerms: ["JavaScript", "NPM", "Express.js", "V8 Engine"],
    lastUpdated: "2025-08-06",
    autoGenerated: true,
    validationStatus: "verified",
    usageContext: ["Server Runtime", "Backend Development", "JavaScript Execution"],
    examples: ["NODE_ENV=development", "node dist/index.js"]
  },
  {
    id: "postgresql",
    term: "PostgreSQL",
    category: "Database-System",
    definition: "Relationale Open-Source-Datenbank als primärer Datenspeicher für alle Helix Platform Daten.",
    technicalExplanation: "ACID-Compliance, JSON/JSONB Support, SQL Standards, Connection Pooling, Transactional Operations, Foreign Key Constraints.",
    businessContext: "Unterstützt Millionen von regulatorischen Updates, 99.9% Uptime, GDPR-konforme Datenspeicherung, Backup & Recovery.",
    generationMethod: "Extrahiert aus Database Schema und Storage Configuration",
    sources: ["shared/schema.ts", "DATABASE_URL", "Drizzle Configuration"],
    relatedTerms: ["Neon Database", "SQL", "ACID", "Relational Database"],
    lastUpdated: "2025-08-06",
    autoGenerated: true,
    validationStatus: "verified",
    usageContext: ["Data Storage", "Database Operations", "Relational Queries"],
    examples: ["SELECT * FROM regulatory_updates", "PostgreSQL Connection Pool"]
  },

  // ======== FRONTEND-TECHNOLOGIE ========
  {
    id: "react-js",
    term: "React.js",
    category: "Frontend-Framework",
    definition: "JavaScript Library für User Interfaces mit Component-Based Architecture und Virtual DOM.",
    technicalExplanation: "useState, useEffect Hooks, JSX Syntax, Component Composition, Props/State Management, React 18 Features.",
    businessContext: "Moderne User Experience, 50% schnellere Frontend-Entwicklung, Wiederverwendbare UI-Komponenten, große Entwickler-Community.",
    generationMethod: "Extrahiert aus Client-Source-Code und Package Dependencies",
    sources: ["client/src/", "package.json", "React Components"],
    relatedTerms: ["TypeScript", "JSX", "Virtual DOM", "Component Architecture"],
    lastUpdated: "2025-08-06",
    autoGenerated: true,
    validationStatus: "verified",
    usageContext: ["Frontend Development", "User Interface", "Component Building"],
    examples: ["useState Hook", "React Component", "JSX Templates"]
  },
  {
    id: "typescript",
    term: "TypeScript",
    category: "Programmiersprache",
    definition: "Statically typed Superset von JavaScript für Type-Safe Development in Frontend und Backend.",
    technicalExplanation: "Interface Definitions, Type Checking, Generic Types, Enum Support, Strict Mode Configuration, TSConfig Setup.",
    businessContext: "95% weniger Runtime-Errors, bessere Code-Qualität, Intellisense Support, Enterprise-ready Development.",
    generationMethod: "Extrahiert aus tsconfig.json und TypeScript Source Files",
    sources: ["tsconfig.json", "*.ts files", "Type Definitions"],
    relatedTerms: ["JavaScript", "Type Safety", "Static Typing", "Interfaces"],
    lastUpdated: "2025-08-06",
    autoGenerated: true,
    validationStatus: "verified",
    usageContext: ["Type Safety", "Development", "Code Quality"],
    examples: ["interface GlossaryEntry", "type SelectType", "enum Status"]
  },
  {
    id: "vite",
    term: "Vite",
    category: "Build-Tool",
    definition: "Next-generation Frontend Build Tool mit Hot Module Replacement und optimiertem Development Server.",
    technicalExplanation: "ESBuild Integration, HMR (Hot Module Replacement), Code Splitting, Asset Optimization, Dev Server Configuration.",
    businessContext: "10x schnellere Build-Zeiten, Development Server in <1s, optimierte Production Builds, bessere Developer Experience.",
    generationMethod: "Extrahiert aus vite.config.ts und Build Configuration",
    sources: ["vite.config.ts", "Build Scripts", "Dev Configuration"],
    relatedTerms: ["ESBuild", "Hot Module Replacement", "Build Tools", "Development Server"],
    lastUpdated: "2025-08-06",
    autoGenerated: true,
    validationStatus: "verified",
    usageContext: ["Build Process", "Development", "Asset Bundling"],
    examples: ["vite dev", "vite build", "HMR Updates"]
  },

  // ======== UI-FRAMEWORK ========
  {
    id: "shadcn-ui-components",
    term: "shadcn/ui",
    category: "UI-Framework",
    definition: "Headless UI Component Library basierend auf Radix Primitives mit Tailwind CSS und Full Accessibility Support.",
    technicalExplanation: "Radix UI Primitives, WAI-ARIA Compliance, Customizable Design System, Dark Mode Support, TypeScript Integration.",
    businessContext: "80% schnellere UI-Entwicklung, WCAG 2.1 AA Compliance, konsistente Design Language, professionelle User Experience.",
    generationMethod: "Extrahiert aus components.json und UI Component Files",
    sources: ["components.json", "components/ui/", "Radix UI Documentation"],
    relatedTerms: ["Radix UI", "Tailwind CSS", "Accessibility", "Design System"],
    lastUpdated: "2025-08-06",
    autoGenerated: true,
    validationStatus: "verified",
    usageContext: ["UI Development", "Component Library", "Design System"],
    examples: ["Button Component", "Dialog Component", "Form Components"]
  },
  {
    id: "tailwind-css",
    term: "Tailwind CSS",
    category: "CSS-Framework",
    definition: "Utility-First CSS Framework für Rapid UI Development mit atomaren CSS-Klassen.",
    technicalExplanation: "Utility Classes, PurgeCSS Integration, Responsive Design, Custom Color Palette, Dark Mode Support.",
    businessContext: "50% weniger CSS-Code, konsistente Design Tokens, Mobile-First Approach, Design System Integration.",
    generationMethod: "Extrahiert aus tailwind.config.ts und CSS Classes",
    sources: ["tailwind.config.ts", "CSS Files", "Component Styling"],
    relatedTerms: ["CSS", "Utility Classes", "Responsive Design", "Design Tokens"],
    lastUpdated: "2025-08-06",
    autoGenerated: true,
    validationStatus: "verified",
    usageContext: ["Styling", "CSS Development", "Design Implementation"],
    examples: ["bg-blue-600", "text-gray-900", "flex items-center"]
  },
  {
    id: "lucide-react",
    term: "Lucide React",
    category: "Icon-Library",
    definition: "Open-Source Icon Library mit 1000+ SVG Icons für React Applications.",
    technicalExplanation: "Tree-shakable Icon Components, SVG-basiert, TypeScript Support, Customizable Size/Color.",
    businessContext: "Konsistente Icon-Sprache, 24kb Bundle Size, Professional Visual Design, Accessibility-friendly.",
    generationMethod: "Extrahiert aus Import Statements und Icon Usage",
    sources: ["React Components", "Icon Imports", "Package Dependencies"],
    relatedTerms: ["Icons", "SVG", "React Components", "Visual Design"],
    lastUpdated: "2025-08-06",
    autoGenerated: true,
    validationStatus: "verified",
    usageContext: ["Icon Usage", "Visual Design", "User Interface"],
    examples: ["Search Icon", "Settings Icon", "Database Icon"]
  },

  // ======== KI-SERVICES ========
  {
    id: "aegis-intel",
    term: "AegisIntel Services",
    category: "KI-Services",
    definition: "KI-gestützte Analysesuite für regulatorische Texte mit NLP-Verarbeitung, Sentiment-Analyse und automatischer Kategorisierung.",
    technicalExplanation: "Machine Learning Pipeline mit Anthropic Claude Integration, Custom NLP Service für Medical Device Content, Confidence Scoring Algorithmus.",
    businessContext: "Automatisiert 90% der manuellen Content-Analyse, reduziert False-Positive-Rate um 67%, ermöglicht Real-time Regulatory Monitoring.",
    generationMethod: "Extrahiert aus Service-Code-Kommentaren und API-Dokumentation",
    sources: ["server/services/", "API Documentation", "ML Model Specifications"],
    relatedTerms: ["Natural Language Processing", "Content Analysis", "AI Approval System"],
    lastUpdated: "2025-08-06",
    autoGenerated: true,
    validationStatus: "verified",
    usageContext: ["AI Insights", "Content Approval", "Automated Analysis"],
    examples: ["AegisIntel Content Categorization", "AegisIntel Risk Assessment"]
  },
  {
    id: "anthropic-claude",
    term: "Anthropic Claude",
    category: "KI-Services",
    definition: "Large Language Model für Content-Analyse, Zusammenfassungen und AI-Approval-Workflows in der Helix Platform.",
    technicalExplanation: "@anthropic-ai/sdk Integration, Prompt Engineering, Content Categorization API, Token Management, Rate Limiting.",
    businessContext: "Automatisiert 80% der Content-Approval-Prozesse, generiert Executive Summaries, analysiert regulatorische Komplexität.",
    generationMethod: "Extrahiert aus AI Service Integration und Package Dependencies",
    sources: ["@anthropic-ai/sdk", "AI Service Code", "Prompt Templates"],
    relatedTerms: ["Large Language Model", "AI Approval", "Content Analysis", "NLP"],
    lastUpdated: "2025-08-06",
    autoGenerated: true,
    validationStatus: "verified",
    usageContext: ["AI Analysis", "Content Approval", "Automated Summarization"],
    examples: ["Claude Content Analysis", "AI Approval Workflow", "Executive Summary Generation"]
  },
  {
    id: "ai-approval-service",
    term: "AI Approval Service",
    category: "KI-Services",
    definition: "Automatisierter Approval-Workflow für regulatorische Inhalte mit KI-basierter Qualitätsbewertung.",
    technicalExplanation: "aiApprovalService Class, Confidence Scoring, Content Validation, Approval Status Management, Error Handling.",
    businessContext: "Reduziert manuelle Review-Zeit um 85%, standardisiert Approval-Kriterien, ermöglicht 24/7 Content-Processing.",
    generationMethod: "Extrahiert aus ai-approval-service.ts und Service Integration",
    sources: ["server/services/ai-approval-service.ts", "Approval Workflows", "Service Architecture"],
    relatedTerms: ["Workflow Automation", "Content Approval", "Quality Assurance", "AI Processing"],
    lastUpdated: "2025-08-06",
    autoGenerated: true,
    validationStatus: "verified",
    usageContext: ["Content Approval", "Quality Control", "Automated Workflows"],
    examples: ["AI Approval Decision", "Content Quality Score", "Approval Status Update"]
  },

  // ======== DATABASE-SERVICES ========
  {
    id: "drizzle-orm",
    term: "Drizzle ORM",
    category: "Database-ORM",
    definition: "TypeScript-first ORM für PostgreSQL mit Type-Safe Database Operations und Schema-First Migrations.",
    technicalExplanation: "SQL-like Query Builder, Automatic Type Generation, Schema Validation mit Zod, Migration System ohne Data Loss.",
    businessContext: "50% schnellere Entwicklungszeit für Database Features, 90% weniger SQL-Injection-Risiken, bessere Code Maintainability.",
    generationMethod: "Extrahiert aus Drizzle Schema Definitionen und Database Migration Files",
    sources: ["shared/schema.ts", "drizzle.config.ts", "Migration Files"],
    relatedTerms: ["PostgreSQL", "Database Schema", "Type Safety", "SQL Migrations"],
    lastUpdated: "2025-08-06",
    autoGenerated: true,
    validationStatus: "verified",
    usageContext: ["Database Operations", "Schema Management", "Type Safety"],
    examples: ["Drizzle Schema Definition", "Drizzle Query Builder"]
  },
  {
    id: "neon-database",
    term: "Neon Database",
    category: "Database-Infrastruktur",
    definition: "Serverless PostgreSQL mit automatischem Scaling, Branch-based Development und Built-in Connection Pooling.",
    technicalExplanation: "Serverless Postgres Engine, Automatic Scaling (0 to 100+ connections), Git-like Database Branching, Built-in PgBouncer.",
    businessContext: "99.9% Uptime SLA, 50% niedrigere Database-Kosten durch Auto-Scaling, Zero-Downtime Deployments.",
    generationMethod: "Extrahiert aus Database Connection Strings und Infrastructure Configuration",
    sources: ["DATABASE_URL Environment", "Connection Configuration", "Neon Dashboard"],
    relatedTerms: ["PostgreSQL", "Serverless Database", "Connection Pooling", "Database Scaling"],
    lastUpdated: "2025-08-06",
    autoGenerated: true,
    validationStatus: "verified",
    usageContext: ["Database Hosting", "Production Infrastructure", "Development Environment"],
    examples: ["Neon Database Connection", "Neon Branching Strategy"]
  },
  {
    id: "database-tables",
    term: "Database Tables",
    category: "Database-Schema",
    definition: "Relationale Tabellen-Struktur der Helix Platform für regulatorische Daten, Legal Cases und Knowledge Articles.",
    technicalExplanation: "users, sessions, data_sources, regulatory_updates, legal_cases, knowledge_articles, newsletters, subscribers, approvals Tabellen.",
    businessContext: "Strukturierte Datenspeicherung für 100K+ regulatorische Updates, optimierte Abfragen, referentielle Integrität.",
    generationMethod: "Extrahiert aus shared/schema.ts Tabellen-Definitionen",
    sources: ["shared/schema.ts", "Database Schema", "Table Definitions"],
    relatedTerms: ["PostgreSQL", "Database Design", "Relational Schema", "Primary Keys"],
    lastUpdated: "2025-08-06",
    autoGenerated: true,
    validationStatus: "verified",
    usageContext: ["Database Design", "Data Storage", "Schema Management"],
    examples: ["regulatory_updates Table", "legal_cases Table", "data_sources Table"]
  },

  // ======== API-SERVICES ========
  {
    id: "rest-api",
    term: "REST API",
    category: "API-Architecture",
    definition: "RESTful Web Services für Client-Server Kommunikation mit standardisierten HTTP Methods und JSON Responses.",
    technicalExplanation: "GET, POST, PUT, DELETE Methods, JSON Request/Response, Status Codes, Error Handling, Rate Limiting.",
    businessContext: "Standardisierte API-Kommunikation, einfache Integration, Skalierbare Architektur, Mobile/Web Kompatibilität.",
    generationMethod: "Extrahiert aus API Endpoint Definitionen in server/routes.ts",
    sources: ["server/routes.ts", "API Endpoints", "HTTP Methods"],
    relatedTerms: ["HTTP", "JSON", "Web Services", "API Design"],
    lastUpdated: "2025-08-06",
    autoGenerated: true,
    validationStatus: "verified",
    usageContext: ["API Development", "Client Communication", "Web Services"],
    examples: ["GET /api/dashboard/stats", "POST /api/data-sources", "PUT /api/regulatory-updates/:id"]
  },
  {
    id: "api-endpoints",
    term: "API Endpoints",
    category: "API-Routes",
    definition: "Spezifische URL-Pfade für API-Operationen mit definierten Request/Response-Strukturen.",
    technicalExplanation: "/api/dashboard/stats, /api/data-sources, /api/regulatory-updates, /api/legal-cases, /api/knowledge-articles URL-Struktur.",
    businessContext: "Klare API-Struktur, Frontend-Backend Trennung, RESTful Design Patterns, API Dokumentation.",
    generationMethod: "Extrahiert aus Express Route Definitionen",
    sources: ["server/routes.ts", "Express Routes", "API Structure"],
    relatedTerms: ["REST API", "URL Routing", "HTTP Methods", "API Design"],
    lastUpdated: "2025-08-06",
    autoGenerated: true,
    validationStatus: "verified",
    usageContext: ["API Routing", "Client Requests", "Backend Services"],
    examples: ["/api/dashboard/stats", "/api/data-sources/sync-all", "/api/legal-cases/:id"]
  },

  // ======== DATENQUELLEN ========
  {
    id: "grip-integration",
    term: "GRIP Global Intelligence Platform",
    category: "Datenquellen",
    definition: "Pure Global's proprietäre Datenbank für regulatorische Intelligence mit verschlüsselter API-Integration.",
    technicalExplanation: "RESTful API mit OAuth 2.0 Authentifizierung, Encrypted Credentials Storage, Rate-Limited Data Extraction (500 req/hour).",
    businessContext: "Zugang zu 50+ globalen Regulierungsbehörden, Real-time Updates, Premium Content für $50K/Jahr Lizenzgebühr.",
    generationMethod: "Automatisch aus API-Integration-Code und Vendor-Dokumentation generiert",
    sources: ["GRIP API Documentation", "Integration Code", "Vendor Contracts"],
    relatedTerms: ["Data Sources", "External APIs", "Regulatory Data"],
    lastUpdated: "2025-08-06",
    autoGenerated: true,
    validationStatus: "verified",
    usageContext: ["Data Collection", "External Integration", "Premium Content"],
    examples: ["GRIP API Sync", "GRIP Data Extraction"]
  },
  {
    id: "fda-open-api",
    term: "FDA OpenAPI Service",
    category: "Government-APIs",
    definition: "FDAOpenAPIService für Zugang zu FDA-Datenbanken, 510(k) Clearances, Recalls und Enforcement Actions.",
    technicalExplanation: "FDAOpenAPIService Class, RESTful JSON API, 1000 Requests/Hour Limit, Elasticsearch Backend, Real-time Data Sync.",
    businessContext: "Kostenloser Zugang zu 2M+ FDA-Datensätzen, ermöglicht predictive Recall Analysis, 95% Datenqualität für US-Markt.",
    generationMethod: "Extrahiert aus FDAOpenAPIService Class und API Integration Code",
    sources: ["server/services/fdaOpenApiService.ts", "FDA API Documentation", "Service Implementation"],
    relatedTerms: ["FDA 510k", "Medical Device Recalls", "Enforcement Actions", "OpenFDA API"],
    lastUpdated: "2025-08-06",
    autoGenerated: true,
    validationStatus: "verified",
    usageContext: ["US Regulatory Data", "FDA Monitoring", "Device Classification"],
    examples: ["FDAOpenAPIService.sync()", "510k Data Extraction", "FDA Recall Monitoring"]
  },
  {
    id: "eudamed-service",
    term: "EUDAMED Service",
    category: "Government-APIs",
    definition: "EUDAMEDService für Zugang zur European Database on Medical Devices mit CE-Marking und Notified Body Daten.",
    technicalExplanation: "EUDAMEDService Class, EU Database Integration, CE-Marking Validation, Notified Body Registry, Real-time Sync.",
    businessContext: "Zugang zu EU-Medizinprodukte-Datenbank, CE-Marking Compliance, Notified Body Monitoring für EU-Markt.",
    generationMethod: "Extrahiert aus EUDAMEDService Class Implementation",
    sources: ["server/services/eudamedService.ts", "EUDAMED API", "EU Compliance Code"],
    relatedTerms: ["EU MDR", "CE Marking", "Notified Body", "European Database"],
    lastUpdated: "2025-08-06",
    autoGenerated: true,
    validationStatus: "verified",
    usageContext: ["EU Regulatory Data", "CE Marking", "EUDAMED Integration"],
    examples: ["EUDAMEDService.fetchDevices()", "CE-Marking Validation", "Notified Body Lookup"]
  },
  {
    id: "meditech-api-service",
    term: "MEDITECH API Service",
    category: "Healthcare-APIs",
    definition: "meditechApiService für Real-time Medical Device Data via FHIR R4 und Device Registry Integration.",
    technicalExplanation: "FHIR R4 Standard, Device Registry API, Real-time Data Sync, Healthcare Interoperability, Medical Device Tracking.",
    businessContext: "Healthcare System Integration, Real-time Device Monitoring, Interoperability Standards, Clinical Data Exchange.",
    generationMethod: "Extrahiert aus meditechApiService Implementation und FHIR Integration",
    sources: ["server/services/meditechApiService.ts", "FHIR Documentation", "Healthcare APIs"],
    relatedTerms: ["FHIR R4", "Healthcare Interoperability", "Medical Device Registry", "Clinical Data"],
    lastUpdated: "2025-08-06",
    autoGenerated: true,
    validationStatus: "verified",
    usageContext: ["Healthcare Integration", "FHIR Data", "Medical Device Tracking"],
    examples: ["FHIR R4 Device Resource", "MEDITECH Registry Sync", "Healthcare Data Exchange"]
  },
  {
    id: "who-integration-service",
    term: "WHO Integration Service",
    category: "International-APIs",
    definition: "whoIntegrationService für World Health Organization Daten und Global Health Regulations.",
    technicalExplanation: "WHO API Integration, Global Health Standards, International Regulations, Multi-language Support, WHO Database Access.",
    businessContext: "Globale Gesundheitsstandards, WHO-Empfehlungen, internationale Regulatory Intelligence, Global Market Access.",
    generationMethod: "Extrahiert aus whoIntegrationService Implementation",
    sources: ["server/services/whoIntegrationService.ts", "WHO API Documentation", "Global Health Standards"],
    relatedTerms: ["World Health Organization", "Global Health", "International Standards", "WHO Recommendations"],
    lastUpdated: "2025-08-06",
    autoGenerated: true,
    validationStatus: "verified",
    usageContext: ["Global Health Data", "WHO Standards", "International Compliance"],
    examples: ["WHO Health Regulations", "Global Health Guidelines", "WHO Database Sync"]
  },

  // ======== REGULATORISCHE STANDARDS ========
  {
    id: "mdr-compliance",
    term: "EU MDR 2017/745",
    category: "Regulatorische Standards",
    definition: "European Medical Device Regulation - EU-Verordnung für Medizinprodukte mit verschärften Compliance-Anforderungen seit Mai 2021.",
    technicalExplanation: "Automatische MDR-Compliance-Checks über EMA API, EUDAMED Integration, CE-Marking Validation Pipeline.",
    businessContext: "Betrifft 500.000+ Medizinprodukte EU-weit, durchschnittlich 67% höhere Compliance-Kosten, 18 Monate längere Zulassungszeiten.",
    generationMethod: "Extrahiert aus regulatorischen Datenbanken und Compliance-Tracking-Code",
    sources: ["EU MDR Official Text", "EMA Database", "Compliance Monitoring Code"],
    relatedTerms: ["CE Marking", "Notified Body", "Clinical Evaluation", "Post-Market Surveillance"],
    lastUpdated: "2025-08-06",
    autoGenerated: true,
    validationStatus: "verified",
    usageContext: ["Compliance Tracking", "EU Market Access", "Regulatory Updates"],
    examples: ["MDR Article 62 Clinical Evidence", "MDR Annex VII Classification"]
  },
  {
    id: "fda-510k",
    term: "FDA 510(k)",
    category: "Regulatorische Standards",
    definition: "FDA Premarket Notification für Medical Devices als Substantial Equivalence Pathway zur Markteinführung.",
    technicalExplanation: "510(k) Clearance Process, Predicate Device Comparison, Substantial Equivalence Demonstration, FDA Review Timeline.",
    businessContext: "90% aller FDA-zugelassenen Medizinprodukte via 510(k), durchschnittlich 3-6 Monate Review-Zeit, $50K+ Submission Costs.",
    generationMethod: "Extrahiert aus FDA API Integration und Regulatory Tracking",
    sources: ["FDA 510(k) Database", "OpenFDA API", "Regulatory Workflows"],
    relatedTerms: ["Premarket Notification", "Substantial Equivalence", "Predicate Device", "FDA Clearance"],
    lastUpdated: "2025-08-06",
    autoGenerated: true,
    validationStatus: "verified",
    usageContext: ["FDA Submissions", "Medical Device Clearance", "US Market Access"],
    examples: ["510(k) Submission", "Predicate Device Search", "FDA Clearance Letter"]
  },
  {
    id: "iso-13485",
    term: "ISO 13485:2016",
    category: "Quality-Standards",
    definition: "International Standard für Quality Management Systems in Medical Device Manufacturing.",
    technicalExplanation: "QMS Requirements, Design Controls, Risk Management ISO 14971, Document Control, Management Review, CAPA System.",
    businessContext: "Globale QMS-Compliance, 30+ Länder Recognition, CE-Marking Requirement, FDA QSR Alignment, Audit Readiness.",
    generationMethod: "Extrahiert aus Quality Management Code und Compliance Tracking",
    sources: ["ISO 13485 Standard", "QMS Implementation", "Audit Requirements"],
    relatedTerms: ["Quality Management System", "Design Controls", "Risk Management", "Medical Device Quality"],
    lastUpdated: "2025-08-06",
    autoGenerated: true,
    validationStatus: "verified",
    usageContext: ["Quality Management", "ISO Compliance", "Medical Device Manufacturing"],
    examples: ["ISO 13485 Audit", "QMS Documentation", "Design Control Process"]
  },

  // ======== STATE-MANAGEMENT ========
  {
    id: "openfda-api",
    term: "OpenFDA API",
    category: "Government APIs",
    definition: "FDA's öffentliche API für Zugang zu Medizinprodukt-Datenbanken, 510(k) Clearances, Recalls und Enforcement Actions.",
    technicalExplanation: "RESTful JSON API, 1000 Requests/Hour Limit, Elasticsearch Backend, Real-time Data Sync über Scheduled Jobs.",
    businessContext: "Kostenloser Zugang zu 2M+ FDA-Datensätzen, ermöglicht predictive Recall Analysis, 95% Datenqualität für US-Markt.",
    generationMethod: "Automatisch aus API-Integration-Code und FDA-Dokumentation generiert",
    sources: ["OpenFDA Documentation", "FDA API Code", "Government Database Schema"],
    relatedTerms: ["FDA 510k", "Medical Device Recalls", "Enforcement Actions", "UDI Database"],
    lastUpdated: "2025-08-06",
    autoGenerated: true,
    validationStatus: "verified",
    usageContext: ["US Regulatory Data", "FDA Monitoring", "Device Classification"],
    examples: ["OpenFDA 510k Query", "OpenFDA Recall Monitoring"]
  },

  {
    id: "tanstack-query",
    term: "TanStack Query (React Query)",
    category: "State-Management",
    definition: "Powerful Data Synchronization Library für React mit Caching, Background Updates und Optimistic Updates.",
    technicalExplanation: "Client-Side Caching Layer, Automatic Background Refetching, Stale-While-Revalidate Pattern, Query Invalidation System.",
    businessContext: "Reduziert Server-Load um 60%, verbessert User Experience durch Offline-Capability, 40% weniger Loading States.",
    generationMethod: "Automatisch aus Query Client Konfiguration und Hook Usage generiert",
    sources: ["client/src/lib/queryClient.ts", "React Query Hooks", "Frontend Code"],
    relatedTerms: ["React State Management", "API Caching", "Data Fetching", "Client State"],
    lastUpdated: "2025-08-06",
    autoGenerated: true,
    validationStatus: "verified",
    usageContext: ["Frontend Data Management", "API Integration", "Performance Optimization"],
    examples: ["useQuery Hook", "Query Client Cache", "Query Invalidation"]
  },
  {
    id: "react-hooks",
    term: "React Hooks",
    category: "State-Management",
    definition: "React Features für State Management und Side Effects in Functional Components.",
    technicalExplanation: "useState, useEffect, useContext, useMemo, useCallback, Custom Hooks, Dependency Arrays, Hook Rules.",
    businessContext: "Moderne React Development, Functional Programming Patterns, Code Reusability, Better Performance.",
    generationMethod: "Extrahiert aus React Component Analysis und Hook Usage",
    sources: ["React Components", "Hook Implementations", "React Documentation"],
    relatedTerms: ["React", "State Management", "Functional Components", "Side Effects"],
    lastUpdated: "2025-08-06",
    autoGenerated: true,
    validationStatus: "verified",
    usageContext: ["React Development", "State Management", "Component Logic"],
    examples: ["useState Hook", "useEffect Hook", "Custom useDevice Hook"]
  },
  {
    id: "wouter-routing",
    term: "Wouter Routing",
    category: "Frontend-Routing",
    definition: "Minimalistic Router für React Applications mit Hook-based API und kleiner Bundle Size.",
    technicalExplanation: "useLocation Hook, Route Components, Link Components, Browser History API, Nested Routing Support.",
    businessContext: "2kb Bundle Size, Simple API, SPA Navigation, SEO-friendly URLs, Performance-optimiert.",
    generationMethod: "Extrahiert aus Routing Configuration und Navigation Components",
    sources: ["client/src/App.tsx", "Route Definitions", "Navigation Components"],
    relatedTerms: ["React Router", "SPA Navigation", "Client-Side Routing", "Browser History"],
    lastUpdated: "2025-08-06",
    autoGenerated: true,
    validationStatus: "verified",
    usageContext: ["Client Navigation", "SPA Routing", "URL Management"],
    examples: ["Route Component", "Link Navigation", "useLocation Hook"]
  },

  // ======== SERVICE-KLASSEN ========
  {
    id: "data-collection-service",
    term: "DataCollectionService",
    category: "Service-Klassen",
    definition: "DataCollectionService Class für automatisierte Datensammlung von regulatorischen Quellen.",
    technicalExplanation: "Scheduled Data Sync, Multi-Source Integration, Error Handling, Rate Limiting, Background Processing.",
    businessContext: "Automatisiert 95% der manuellen Datensammlung, 24/7 Monitoring, Real-time Updates, Data Quality Assurance.",
    generationMethod: "Extrahiert aus DataCollectionService Class Implementation",
    sources: ["server/services/dataCollectionService.ts", "Service Architecture", "Data Collection Logic"],
    relatedTerms: ["Data Sources", "Automated Sync", "Background Jobs", "Data Quality"],
    lastUpdated: "2025-08-06",
    autoGenerated: true,
    validationStatus: "verified",
    usageContext: ["Data Collection", "Automated Sync", "Background Processing"],
    examples: ["dataService.syncDataSource()", "Scheduled Data Collection", "Multi-Source Sync"]
  },
  {
    id: "pdf-service",
    term: "PDFService",
    category: "Service-Klassen",
    definition: "PDFService Class für PDF-Generierung von regulatorischen Dokumenten und Reports.",
    technicalExplanation: "jsPDF Integration, PDF-lib Library, Document Generation, Template System, Multi-format Export.",
    businessContext: "Universal PDF Export für alle Artikel, Professional Document Generation, Compliance-ready Reports.",
    generationMethod: "Extrahiert aus PDFService Class und PDF Generation Code",
    sources: ["server/services/pdfService.ts", "PDF Libraries", "Document Templates"],
    relatedTerms: ["PDF Generation", "Document Export", "Report Creation", "File Processing"],
    lastUpdated: "2025-08-06",
    autoGenerated: true,
    validationStatus: "verified",
    usageContext: ["Document Generation", "PDF Export", "Report Creation"],
    examples: ["PDFService.generateReport()", "Article PDF Export", "Regulatory Document PDF"]
  },
  {
    id: "rss-monitoring-service",
    term: "RSSMonitoringService",
    category: "Service-Klassen",
    definition: "RSSMonitoringService Class für RSS Feed Monitoring und Content Aggregation von regulatorischen Quellen.",
    technicalExplanation: "RSS Parser, Feed Aggregation, Content Filtering, Update Detection, Scheduled Monitoring.",
    businessContext: "Automatisches Monitoring von 50+ RSS Feeds, Real-time Content Updates, Regulatory News Aggregation.",
    generationMethod: "Extrahiert aus RSSMonitoringService Class Implementation",
    sources: ["server/services/rssMonitoringService.ts", "RSS Integration", "Feed Processing"],
    relatedTerms: ["RSS Feeds", "Content Aggregation", "News Monitoring", "Feed Processing"],
    lastUpdated: "2025-08-06",
    autoGenerated: true,
    validationStatus: "verified",
    usageContext: ["RSS Monitoring", "Content Aggregation", "News Processing"],
    examples: ["RSSMonitoringService.parseFeed()", "RSS Feed Sync", "Content Aggregation"]
  },
  {
    id: "data-quality-service",
    term: "DataQualityService",
    category: "Service-Klassen",
    definition: "DataQualityService Class für Datenqualitäts-Kontrolle, Duplikate-Erkennung und Content Validation.",
    technicalExplanation: "Duplicate Detection, Data Validation, Quality Scoring, Content Sanitization, Error Reporting.",
    businessContext: "100% Datenqualität erreicht, 12.964 Duplikate entfernt, automatische Quality Assurance.",
    generationMethod: "Extrahiert aus DataQualityService Class und Quality Control Logic",
    sources: ["server/services/dataQualityService.ts", "Quality Control", "Validation Rules"],
    relatedTerms: ["Data Quality", "Duplicate Detection", "Content Validation", "Quality Assurance"],
    lastUpdated: "2025-08-06",
    autoGenerated: true,
    validationStatus: "verified",
    usageContext: ["Data Quality", "Validation", "Quality Control"],
    examples: ["DataQualityService.validateContent()", "Duplicate Detection", "Quality Score Calculation"]
  },
  {
    id: "knowledge-article-service",
    term: "KnowledgeArticleService",
    category: "Service-Klassen",
    definition: "KnowledgeArticleService Class für Knowledge Base Management und Article Processing.",
    technicalExplanation: "Article CRUD Operations, Content Processing, Category Management, Search Indexing, Metadata Extraction.",
    businessContext: "Management von 600+ Knowledge Articles, Content Categorization, Search Optimization.",
    generationMethod: "Extrahiert aus KnowledgeArticleService Class Implementation",
    sources: ["server/services/knowledgeArticleService.ts", "Knowledge Base", "Article Management"],
    relatedTerms: ["Knowledge Management", "Article Processing", "Content Management", "Search"],
    lastUpdated: "2025-08-06",
    autoGenerated: true,
    validationStatus: "verified",
    usageContext: ["Knowledge Management", "Article Processing", "Content Operations"],
    examples: ["KnowledgeArticleService.createArticle()", "Article Search", "Knowledge Base Management"]
  },

  // ======== PACKAGE-DEPENDENCIES ========
  {
    id: "zod-validation",
    term: "Zod Validation",
    category: "Validation-Library",
    definition: "TypeScript-first Schema Validation Library für Runtime Type Checking und Input Validation.",
    technicalExplanation: "Schema Definitions, Runtime Validation, Type Inference, Error Messages, Custom Validators.",
    businessContext: "Type-Safe API Validation, 95% weniger Runtime Errors, bessere Error Messages, Developer Experience.",
    generationMethod: "Extrahiert aus Zod Schema Definitions und Validation Usage",
    sources: ["shared/schema.ts", "Validation Code", "Zod Schemas"],
    relatedTerms: ["TypeScript", "Schema Validation", "Type Safety", "Input Validation"],
    lastUpdated: "2025-08-06",
    autoGenerated: true,
    validationStatus: "verified",
    usageContext: ["Input Validation", "Type Safety", "Schema Definition"],
    examples: ["insertUserSchema", "Validation Rules", "Schema Inference"]
  },
  {
    id: "winston-logger",
    term: "Winston Logger",
    category: "Logging-System",
    definition: "Winston Logger Service für strukturiertes Logging, Error Tracking und System Monitoring.",
    technicalExplanation: "Log Levels, Structured Logging, File Transport, Console Transport, Error Tracking, Log Rotation.",
    businessContext: "Comprehensive Logging, Production Monitoring, Error Tracking, Audit Trail, Debugging Support.",
    generationMethod: "Extrahiert aus Winston Configuration und Logger Usage",
    sources: ["Winston Configuration", "Logger Service", "Log Files"],
    relatedTerms: ["Logging", "Error Tracking", "System Monitoring", "Debugging"],
    lastUpdated: "2025-08-06",
    autoGenerated: true,
    validationStatus: "verified",
    usageContext: ["System Logging", "Error Tracking", "Production Monitoring"],
    examples: ["logger.info()", "Error Logs", "System Monitoring"]
  },

  // ======== ENVIRONMENT & CONFIGURATION ========
  {
    id: "environment-variables",
    term: "Environment Variables",
    category: "Configuration",
    definition: "System-Konfiguration über Environment Variables für Database URLs, API Keys und Service Configuration.",
    technicalExplanation: "DATABASE_URL, NODE_ENV, API Keys, Service Endpoints, Security Configuration, Development/Production Settings.",
    businessContext: "Sichere Konfiguration, Environment-spezifische Settings, API Key Management, Deployment Flexibility.",
    generationMethod: "Extrahiert aus .env Files und Environment Configuration",
    sources: [".env", "Environment Configuration", "Service Setup"],
    relatedTerms: ["Configuration", "API Keys", "Environment Setup", "Security"],
    lastUpdated: "2025-08-06",
    autoGenerated: true,
    validationStatus: "verified",
    usageContext: ["System Configuration", "Security", "Deployment"],
    examples: ["DATABASE_URL", "NODE_ENV", "API_KEY Configuration"]
  },

  // ======== 6-TAB UI-STRUKTUR ========
  {
    id: "uebersicht-tab",
    term: "Übersicht Tab",
    category: "UI-Navigation",
    definition: "Erster Tab der 6-Tab-Struktur mit kompakter Zusammenfassung und Key Metrics für regulatorische Artikel.",
    technicalExplanation: "React Tab Component, Summary Statistics, Key Performance Indicators, Executive Overview Panel.",
    businessContext: "C-Level Dashboard View, schnelle Entscheidungsfindung, Strategic Overview für Management-Reporting.",
    generationMethod: "Extrahiert aus Article Dialog Components und Tab Navigation System",
    sources: ["Article Dialog Components", "Tab Navigation", "UI Structure"],
    relatedTerms: ["Tab Navigation", "Executive Summary", "Dashboard", "Overview Panel"],
    lastUpdated: "2025-08-06",
    autoGenerated: true,
    validationStatus: "verified",
    usageContext: ["Article Navigation", "Executive Overview", "Management Dashboard"],
    examples: ["Übersicht Tab - Regulatory Update", "Executive Summary Panel"]
  },
  {
    id: "zusammenfassung-tab",
    term: "Zusammenfassung Tab",
    category: "UI-Navigation", 
    definition: "Zweiter Tab mit AI-generierter Zusammenfassung und strukturierter Darstellung der wichtigsten Punkte.",
    technicalExplanation: "AI Summary Generation, Structured Content Display, Key Points Extraction, Executive Summary Algorithm.",
    businessContext: "80% Zeitersparnis bei Content Review, standardisierte Zusammenfassungen, Management-ready Content.",
    generationMethod: "Extrahiert aus AI Summary Service und Content Processing Pipeline",
    sources: ["AI Summary Service", "Content Processing", "Article Components"],
    relatedTerms: ["AI Summary", "Content Processing", "Executive Summary", "Structured Data"],
    lastUpdated: "2025-08-06",
    autoGenerated: true,
    validationStatus: "verified",
    usageContext: ["Content Summary", "AI Processing", "Executive Briefing"],
    examples: ["AI-generierte Zusammenfassung", "Structured Summary Display"]
  },
  {
    id: "vollstaendiger-inhalt-tab",
    term: "Vollständiger Inhalt Tab",
    category: "UI-Navigation",
    definition: "Dritter Tab mit kompletter Artikel-Darstellung, Original-Content und detaillierter Formatierung.",
    technicalExplanation: "Full Content Display, Rich Text Rendering, Original Source Integration, Content Formatting Engine.",
    businessContext: "Compliance-konforme Volltext-Archivierung, Legal Review Support, Complete Audit Trail.",
    generationMethod: "Extrahiert aus Full Content Display Components und Article Rendering System",
    sources: ["Content Display Components", "Article Rendering", "Full Text System"],
    relatedTerms: ["Full Content", "Original Source", "Content Rendering", "Complete Display"],
    lastUpdated: "2025-08-06",
    autoGenerated: true,
    validationStatus: "verified",
    usageContext: ["Full Content Review", "Legal Analysis", "Complete Information"],
    examples: ["Vollständiger FDA-Artikel", "Complete Regulatory Text"]
  },
  {
    id: "finanzanalyse-tab",
    term: "Finanzanalyse Tab",
    category: "UI-Navigation",
    definition: "Vierter Tab mit automatisierter Kostenanalyse, Marktauswirkungen und Financial Impact Assessment.",
    technicalExplanation: "Financial Analysis Engine, Cost Calculation Algorithms, Market Impact Modeling, ROI Assessment.",
    businessContext: "CFO-ready Financial Reports, Compliance Cost Tracking, Market Impact Quantifizierung, Budget Planning Support.",
    generationMethod: "Extrahiert aus Financial Analysis Service und Cost Calculation Engine",
    sources: ["Financial Analysis Service", "Cost Models", "Market Impact Algorithms"],
    relatedTerms: ["Financial Analysis", "Cost Impact", "Market Assessment", "ROI Calculation"],
    lastUpdated: "2025-08-06",
    autoGenerated: true,
    validationStatus: "verified",
    usageContext: ["Financial Planning", "Cost Analysis", "Budget Assessment"],
    examples: ["Compliance Cost Analysis", "Market Impact Report"]
  },
  {
    id: "ki-analyse-tab",
    term: "KI-Analyse Tab",
    category: "UI-Navigation",
    definition: "Fünfter Tab mit Machine Learning-basierter Analyse, Präzedenzfall-Vergleich und Erfolgswahrscheinlichkeiten.",
    technicalExplanation: "ML Analysis Pipeline, Precedent Case Matching, Success Probability Algorithms, AI Insights Generation.",
    businessContext: "Strategische Entscheidungsunterstützung, Risk Assessment, Predictive Analytics für Regulatory Success.",
    generationMethod: "Extrahiert aus AI Analysis Service und Machine Learning Pipeline",
    sources: ["AI Analysis Service", "ML Pipeline", "Precedent Analysis"],
    relatedTerms: ["Machine Learning", "AI Analysis", "Predictive Analytics", "Risk Assessment"],
    lastUpdated: "2025-08-06",
    autoGenerated: true,
    validationStatus: "verified",
    usageContext: ["AI Insights", "Predictive Analysis", "Strategic Planning"],
    examples: ["ML-basierte Risikoanalyse", "AI Regulatory Insights"]
  },
  {
    id: "metadaten-tab",
    term: "Metadaten Tab",
    category: "UI-Navigation",
    definition: "Sechster Tab mit technischen Metadaten, Quellen-Attribution, Sync-Status und Data Lineage.",
    technicalExplanation: "Metadata Display System, Source Attribution, Data Lineage Tracking, Technical Information Panel.",
    businessContext: "Audit Trail Compliance, Source Verification, Data Quality Assurance, Regulatory Transparency.",
    generationMethod: "Extrahiert aus Metadata Management System und Data Lineage Tracking",
    sources: ["Metadata System", "Data Lineage", "Source Attribution"],
    relatedTerms: ["Metadata", "Data Lineage", "Source Attribution", "Audit Trail"],
    lastUpdated: "2025-08-06",
    autoGenerated: true,
    validationStatus: "verified",
    usageContext: ["Data Governance", "Audit Compliance", "Source Verification"],
    examples: ["Source Metadata Display", "Data Lineage Information"]
  },
  {
    id: "tab-navigation-system",
    term: "6-Tab Navigation System",
    category: "UI-Architecture",
    definition: "Konsistente Navigation-Architektur für alle Artikel mit 6 standardisierten Tabs zur strukturierten Informationsdarstellung.",
    technicalExplanation: "React Tab Component Architecture, Consistent Navigation Pattern, State Management across Tabs, Responsive Design.",
    businessContext: "Standardisierte User Experience, 60% schnellere Navigation, konsistente Information Architecture.",
    generationMethod: "Extrahiert aus Tab Navigation Components und UI Architecture Documentation",
    sources: ["Tab Components", "Navigation Architecture", "UI Design System"],
    relatedTerms: ["Navigation Pattern", "User Interface", "Information Architecture", "Component System"],
    lastUpdated: "2025-08-06",
    autoGenerated: true,
    validationStatus: "verified",
    usageContext: ["UI Navigation", "User Experience", "Information Architecture"],
    examples: ["6-Tab Article Navigation", "Consistent Tab Structure"]
  },

  // ======== GRIP INTELLIGENCE PLATFORM ========
  {
    id: "grip-platform",
    term: "GRIP Global Intelligence Platform",
    category: "Intelligence-Datenquellen",
    definition: "Premium Intelligence-Plattform von Pure Global für globale Regulatory Intelligence und Market Access-Daten.",
    technicalExplanation: "RESTful API v1, OAuth 2.0 Authentication, Real-time Data Streaming, Advanced Analytics Engine, Global Database Coverage.",
    businessContext: "Premium Data Source mit 95% Global Market Coverage, 24/7 Real-time Updates, €50k/Jahr Investment für Strategic Intelligence.",
    generationMethod: "Extrahiert aus GRIP API Integration und Data Source Configuration",
    sources: ["GRIP API Documentation", "Pure Global Contract", "Integration Configuration"],
    relatedTerms: ["Intelligence Platform", "Global Data", "Market Access", "Premium API"],
    lastUpdated: "2025-08-07",
    autoGenerated: true,
    validationStatus: "verified",
    usageContext: ["Strategic Intelligence", "Global Market Data", "Premium Analytics"],
    examples: ["GRIP Market Intelligence", "Global Regulatory Monitoring"]
  },
  {
    id: "grip-integration",
    term: "GRIP Integration",
    category: "API-Integration",
    definition: "Technische Integration der GRIP Platform mit Helix System über sichere API-Verbindung und Credential Management.",
    technicalExplanation: "Secure API Integration, Credential Encryption, Automated Sync Processes, Data Transformation Pipeline, Error Handling.",
    businessContext: "Zugangsdaten unter Verwaltung, automatisierte Data Pipeline, 99.5% Uptime SLA, Strategic Data Partnership.",
    generationMethod: "Extrahiert aus GRIP Integration Code und Security Configuration",
    sources: ["GRIP API Integration", "Security Configuration", "Data Pipeline Code"],
    relatedTerms: ["API Integration", "Credential Management", "Data Security", "Automated Sync"],
    lastUpdated: "2025-08-07",
    autoGenerated: true,
    validationStatus: "verified",
    usageContext: ["System Integration", "Data Security", "Automated Processing"],
    examples: ["GRIP API Connection", "Secure Credential Storage"]
  },
  {
    id: "credentials-management",
    term: "Zugangsdaten unter Verwaltung",
    category: "Security-Management",
    definition: "Zentrale Verwaltung von API-Credentials und Authentifizierungsdaten für externe Datenquellen wie GRIP.",
    technicalExplanation: "Encrypted Credential Storage, Environment Variable Management, Rotation Policies, Access Control, Audit Logging.",
    businessContext: "Security Compliance, Centralized Access Management, Risk Mitigation, Operational Efficiency für Premium Data Sources.",
    generationMethod: "Extrahiert aus Security Management System und Credential Storage Configuration",
    sources: ["Security Configuration", "Credential Management", "Access Control System"],
    relatedTerms: ["Security Management", "API Credentials", "Access Control", "Encryption"],
    lastUpdated: "2025-08-07",
    autoGenerated: true,
    validationStatus: "verified",
    usageContext: ["Security Management", "Credential Storage", "Access Control"],
    examples: ["GRIP Credentials", "API Key Management", "Secure Storage"]
  }];

const categories = [
  "Alle Kategorien",
  "Plattform-Architektur",
  "Backend-Framework",
  "Runtime-Environment",
  "Database-System",
  "Frontend-Framework",
  "Programmiersprache",
  "Build-Tool",
  "UI-Framework",
  "CSS-Framework",
  "Icon-Library",
  "KI-Services",
  "Database-ORM",
  "Database-Infrastruktur",
  "Database-Schema",
  "API-Architecture",
  "API-Routes",
  "Datenquellen",
  "Government-APIs",
  "Healthcare-APIs",
  "International-APIs",
  "Regulatorische Standards",
  "Quality-Standards",
  "State-Management",
  "Frontend-Routing",
  "Service-Klassen",
  "Validation-Library",
  "Logging-System",
  "Configuration",
  "UI-Navigation",
  "UI-Architecture",
  "Intelligence-Datenquellen",
  "API-Integration",
  "Security-Management"
];

export default function AdminGlossary() {
  const device = useDevice();
  const { toast } = useToast();
  const [searchTerm, setSearchTerm] = useState("");
  const [selectedCategory, setSelectedCategory] = useState("Alle Kategorien");
  const [validationFilter, setValidationFilter] = useState("all");
  const [autoGenOnly, setAutoGenOnly] = useState(false);
  const [isGenerating, setIsGenerating] = useState(false);

  const filteredTerms = adminGlossaryData
    .filter(term => {
      const matchesSearch = term.term.toLowerCase().includes(searchTerm.toLowerCase()) ||
                           term.definition.toLowerCase().includes(searchTerm.toLowerCase()) ||
                           term.technicalExplanation.toLowerCase().includes(searchTerm.toLowerCase());
      const matchesCategory = selectedCategory === "Alle Kategorien" || term.category === selectedCategory;
      const matchesValidation = validationFilter === "all" || term.validationStatus === validationFilter;
      const matchesAutoGen = !autoGenOnly || term.autoGenerated;
      return matchesSearch && matchesCategory && matchesValidation && matchesAutoGen;
    })
    .sort((a, b) => a.term.localeCompare(b.term));

  const handleAutoGenerate = async () => {
    setIsGenerating(true);
    toast({
      title: "Glossar-Generierung",
      description: "Automatische Begriffsgenerierung gestartet...",
    });
    
    // Simulate auto-generation process
    setTimeout(() => {
      setIsGenerating(false);
      toast({
        title: "Generierung abgeschlossen",
        description: `${adminGlossaryData.length} Begriffe erfolgreich aktualisiert`,
      });
    }, 3000);
  };

  const getValidationColor = (status: string) => {
    switch (status) {
      case 'verified': return "bg-green-100 text-green-800 border-green-200";
      case 'pending': return "bg-yellow-100 text-yellow-800 border-yellow-200";
      case 'outdated': return "bg-red-100 text-red-800 border-red-200";
      default: return "bg-gray-100 text-gray-800 border-gray-200";
    }
  };

  const getValidationIcon = (status: string) => {
    switch (status) {
      case 'verified': return <CheckCircle className="h-3 w-3" />;
      case 'pending': return <AlertTriangle className="h-3 w-3" />;
      case 'outdated': return <RefreshCw className="h-3 w-3" />;
      default: return <Eye className="h-3 w-3" />;
    }
  };

  return (
    <div className={cn(
      "space-y-6",
      device.isMobile ? "p-4" : device.isTablet ? "p-6" : "p-8"
    )}>
      {/* Header */}
      <div className="flex flex-col space-y-4">
        <div>
          <h1 className="text-2xl sm:text-3xl font-bold text-gray-900 dark:text-gray-100 flex items-center gap-3">
            <Settings className="h-8 w-8 text-blue-600" />
            Admin Glossar & Begriffsverwaltung
          </h1>
          <p className="text-sm sm:text-base text-gray-600 dark:text-gray-400 mt-2">
            Zentrale Verwaltung aller Plattform-Begriffe mit automatischer Generierung und Validierung
          </p>
        </div>

        {/* Stats Dashboard */}
        <div className="grid grid-cols-2 sm:grid-cols-4 lg:grid-cols-6 gap-4">
          <Card>
            <CardContent className="p-4 text-center">
              <div className="text-2xl font-bold text-blue-600">{adminGlossaryData.length}</div>
              <div className="text-xs text-gray-600">Gesamt Begriffe</div>
            </CardContent>
          </Card>
          <Card>
            <CardContent className="p-4 text-center">
              <div className="text-2xl font-bold text-green-600">
                {adminGlossaryData.filter(t => t.autoGenerated).length}
              </div>
              <div className="text-xs text-gray-600">Auto-generiert</div>
            </CardContent>
          </Card>
          <Card>
            <CardContent className="p-4 text-center">
              <div className="text-2xl font-bold text-purple-600">
                {adminGlossaryData.filter(t => t.validationStatus === 'verified').length}
              </div>
              <div className="text-xs text-gray-600">Verifiziert</div>
            </CardContent>
          </Card>
          <Card>
            <CardContent className="p-4 text-center">
              <div className="text-2xl font-bold text-yellow-600">
                {adminGlossaryData.filter(t => t.validationStatus === 'pending').length}
              </div>
              <div className="text-xs text-gray-600">Pending</div>
            </CardContent>
          </Card>
          <Card>
            <CardContent className="p-4 text-center">
              <div className="text-2xl font-bold text-orange-600">{categories.length - 1}</div>
              <div className="text-xs text-gray-600">Kategorien</div>
            </CardContent>
          </Card>
          <Card>
            <CardContent className="p-4 text-center">
              <div className="text-2xl font-bold text-indigo-600">
                {adminGlossaryData.reduce((sum, term) => sum + term.sources.length, 0)}
              </div>
              <div className="text-xs text-gray-600">Quellen</div>
            </CardContent>
          </Card>
        </div>
      </div>

      {/* Controls */}
      <Card>
        <CardHeader>
          <CardTitle className="text-lg flex items-center gap-2">
            <Search className="h-5 w-5" />
            Filter & Administration
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-6 gap-4">
            <div className="space-y-2">
              <label className="text-sm font-medium">Suchbegriff</label>
              <div className="relative">
                <Search className="h-4 w-4 absolute left-3 top-3 text-gray-400" />
                <Input
                  placeholder="Begriff suchen..."
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  className="pl-10"
                />
              </div>
            </div>
            
            <div className="space-y-2">
              <label className="text-sm font-medium">Kategorie</label>
              <Select value={selectedCategory} onValueChange={setSelectedCategory}>
                <SelectTrigger>
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  {categories.map(category => (
                    <SelectItem key={category} value={category}>
                      {category}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
            
            <div className="space-y-2">
              <label className="text-sm font-medium">Validation</label>
              <Select value={validationFilter} onValueChange={setValidationFilter}>
                <SelectTrigger>
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">Alle Status</SelectItem>
                  <SelectItem value="verified">Verifiziert</SelectItem>
                  <SelectItem value="pending">Pending</SelectItem>
                  <SelectItem value="outdated">Veraltet</SelectItem>
                </SelectContent>
              </Select>
            </div>

            <div className="space-y-2">
              <label className="text-sm font-medium">Filter</label>
              <Button
                onClick={() => setAutoGenOnly(!autoGenOnly)}
                variant={autoGenOnly ? "default" : "outline"}
                className="w-full"
              >
                {autoGenOnly ? "Nur Auto-Gen" : "Alle Begriffe"}
              </Button>
            </div>

            <div className="space-y-2">
              <label className="text-sm font-medium">Aktionen</label>
              <Button 
                onClick={handleAutoGenerate}
                disabled={isGenerating}
                className="w-full"
              >
                {isGenerating ? (
                  <RefreshCw className="h-4 w-4 mr-2 animate-spin" />
                ) : (
                  <Zap className="h-4 w-4 mr-2" />
                )}
                Auto-Generate
              </Button>
            </div>

            <div className="space-y-2">
              <label className="text-sm font-medium">Export/Import</label>
              <div className="flex gap-2">
                <Button size="sm" variant="outline" className="flex-1">
                  <Download className="h-3 w-3" />
                </Button>
                <Button size="sm" variant="outline" className="flex-1">
                  <Upload className="h-3 w-3" />
                </Button>
              </div>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Generation Method Explanation */}
      <Card>
        <CardHeader>
          <CardTitle className="text-lg flex items-center gap-2">
            <Target className="h-5 w-5" />
            Automatische Begriffsgenerierung
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            <div className="p-4 border rounded-lg">
              <h4 className="font-semibold flex items-center gap-2 mb-2">
                <FileText className="h-4 w-4 text-blue-600" />
                Code-Analyse
              </h4>
              <p className="text-sm text-gray-600">
                Automatische Extraktion von Begriffen aus Kommentaren, Variablennamen und API-Dokumentation
              </p>
            </div>
            <div className="p-4 border rounded-lg">
              <h4 className="font-semibold flex items-center gap-2 mb-2">
                <Database className="h-4 w-4 text-green-600" />
                Schema-Parsing
              </h4>
              <p className="text-sm text-gray-600">
                Generierung von Begriffen aus Datenbank-Schemas, Tabellennamen und Feld-Definitionen
              </p>
            </div>
            <div className="p-4 border rounded-lg">
              <h4 className="font-semibold flex items-center gap-2 mb-2">
                <Globe className="h-4 w-4 text-purple-600" />
                API-Integration
              </h4>
              <p className="text-sm text-gray-600">
                Ableitung von Begriffen aus externen API-Endpunkten und Service-Integrationen
              </p>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Glossary Entries */}
      <div className="space-y-4">
        <div className="flex justify-between items-center">
          <h2 className="text-lg font-semibold">
            {filteredTerms.length} von {adminGlossaryData.length} Begriffen
          </h2>
          <div className="flex gap-2">
            <Button size="sm" variant="outline">
              <Plus className="h-4 w-4 mr-2" />
              Neuer Begriff
            </Button>
            <Button size="sm" variant="outline">
              <Edit className="h-4 w-4 mr-2" />
              Bulk Edit
            </Button>
          </div>
        </div>

        <Accordion type="single" collapsible className="space-y-4">
          {filteredTerms.map((term) => (
            <AccordionItem key={term.id} value={term.id} className="border rounded-lg">
              <AccordionTrigger className="px-6 py-4 hover:no-underline">
                <div className="flex items-center justify-between w-full text-left">
                  <div className="flex items-center gap-3">
                    <div>
                      <h3 className="font-semibold text-lg flex items-center gap-2">
                        {term.term}
                        {term.autoGenerated && (
                          <Badge variant="outline" className="text-xs">
                            <Zap className="h-3 w-3 mr-1" />
                            Auto
                          </Badge>
                        )}
                      </h3>
                      <p className="text-sm text-gray-600 mt-1">
                        {term.definition.substring(0, 120)}...
                      </p>
                    </div>
                  </div>
                  <div className="flex items-center gap-2 ml-4">
                    <Badge className={getValidationColor(term.validationStatus)}>
                      {getValidationIcon(term.validationStatus)}
                      <span className="ml-1">{term.validationStatus}</span>
                    </Badge>
                    <Badge variant="outline">{term.category}</Badge>
                  </div>
                </div>
              </AccordionTrigger>
              
              <AccordionContent className="px-6 pb-6">
                <Tabs defaultValue="overview" className="space-y-4">
                  <TabsList className="grid w-full grid-cols-5">
                    <TabsTrigger value="overview">Übersicht</TabsTrigger>
                    <TabsTrigger value="technical">Technisch</TabsTrigger>
                    <TabsTrigger value="business">Business</TabsTrigger>
                    <TabsTrigger value="generation">Generierung</TabsTrigger>
                    <TabsTrigger value="admin">Admin</TabsTrigger>
                  </TabsList>
                  
                  <TabsContent value="overview" className="space-y-4">
                    <Card>
                      <CardHeader>
                        <CardTitle className="text-base">Definition & Kontext</CardTitle>
                      </CardHeader>
                      <CardContent className="space-y-4">
                        <div>
                          <h4 className="font-medium mb-2">Definition:</h4>
                          <p className="text-sm leading-relaxed">{term.definition}</p>
                        </div>
                        <div>
                          <h4 className="font-medium mb-2">Verwendungskontext:</h4>
                          <div className="flex flex-wrap gap-2">
                            {term.usageContext.map((context, idx) => (
                              <Badge key={idx} variant="secondary">
                                {context}
                              </Badge>
                            ))}
                          </div>
                        </div>
                        <div>
                          <h4 className="font-medium mb-2">Beispiele:</h4>
                          <ul className="text-sm space-y-1">
                            {term.examples.map((example, idx) => (
                              <li key={idx} className="flex items-start gap-2">
                                <span className="text-blue-600">•</span>
                                {example}
                              </li>
                            ))}
                          </ul>
                        </div>
                      </CardContent>
                    </Card>
                  </TabsContent>
                  
                  <TabsContent value="technical" className="space-y-4">
                    <Card>
                      <CardHeader>
                        <CardTitle className="text-base flex items-center gap-2">
                          <Zap className="h-4 w-4" />
                          Technische Erklärung
                        </CardTitle>
                      </CardHeader>
                      <CardContent>
                        <p className="text-sm leading-relaxed">{term.technicalExplanation}</p>
                        {term.relatedTerms.length > 0 && (
                          <div className="mt-4">
                            <h4 className="font-medium mb-2">Verwandte Begriffe:</h4>
                            <div className="flex flex-wrap gap-2">
                              {term.relatedTerms.map((relatedTerm, idx) => (
                                <Badge key={idx} variant="outline">
                                  {relatedTerm}
                                </Badge>
                              ))}
                            </div>
                          </div>
                        )}
                      </CardContent>
                    </Card>
                  </TabsContent>
                  
                  <TabsContent value="business" className="space-y-4">
                    <Card>
                      <CardHeader>
                        <CardTitle className="text-base flex items-center gap-2">
                          <Target className="h-4 w-4" />
                          Business-Kontext
                        </CardTitle>
                      </CardHeader>
                      <CardContent>
                        <p className="text-sm leading-relaxed">{term.businessContext}</p>
                      </CardContent>
                    </Card>
                  </TabsContent>
                  
                  <TabsContent value="generation" className="space-y-4">
                    <Card>
                      <CardHeader>
                        <CardTitle className="text-base flex items-center gap-2">
                          <RefreshCw className="h-4 w-4" />
                          Generierungsmethode
                        </CardTitle>
                      </CardHeader>
                      <CardContent className="space-y-4">
                        <div>
                          <h4 className="font-medium mb-2">Generierungsmethode:</h4>
                          <p className="text-sm">{term.generationMethod}</p>
                        </div>
                        <div>
                          <h4 className="font-medium mb-2">Quellen:</h4>
                          <ul className="text-sm space-y-1">
                            {term.sources.map((source, idx) => (
                              <li key={idx} className="flex items-start gap-2">
                                <Database className="h-3 w-3 mt-1 text-blue-600 flex-shrink-0" />
                                {source}
                              </li>
                            ))}
                          </ul>
                        </div>
                      </CardContent>
                    </Card>
                  </TabsContent>
                  
                  <TabsContent value="admin" className="space-y-4">
                    <Card>
                      <CardHeader>
                        <CardTitle className="text-base flex items-center gap-2">
                          <Settings className="h-4 w-4" />
                          Admin-Aktionen
                        </CardTitle>
                      </CardHeader>
                      <CardContent>
                        <div className="flex gap-2 flex-wrap">
                          <Button size="sm" variant="outline">
                            <Edit className="h-3 w-3 mr-2" />
                            Bearbeiten
                          </Button>
                          <Button size="sm" variant="outline">
                            <RefreshCw className="h-3 w-3 mr-2" />
                            Neu generieren
                          </Button>
                          <Button size="sm" variant="outline">
                            <CheckCircle className="h-3 w-3 mr-2" />
                            Validieren
                          </Button>
                          <Button size="sm" variant="destructive">
                            <Trash2 className="h-3 w-3 mr-2" />
                            Löschen
                          </Button>
                        </div>
                        <div className="mt-4 text-xs text-gray-500">
                          Letztes Update: {new Date(term.lastUpdated).toLocaleDateString('de-DE')}
                        </div>
                      </CardContent>
                    </Card>
                  </TabsContent>
                </Tabs>
              </AccordionContent>
            </AccordionItem>
          ))}
        </Accordion>
      </div>
    </div>
  );
}